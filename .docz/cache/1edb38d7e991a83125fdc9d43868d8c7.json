{"remainingRequest":"/Users/jeremytinianow/Sites/workspace.sprucebot-skills-kit/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/jeremytinianow/Sites/workspace.sprucebot-skills-kit/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/jeremytinianow/Sites/workspace.sprucebot-skills-kit/node_modules/source-map-loader/index.js!/Users/jeremytinianow/Sites/workspace.sprucebot-skills-kit/docs/spruce-skill/errors.md","dependencies":[{"path":"/Users/jeremytinianow/Sites/workspace.sprucebot-skills-kit/docs/spruce-skill/errors.md","mtime":1554307369207},{"path":"/Users/jeremytinianow/Sites/workspace.sprucebot-skills-kit/node_modules/cache-loader/dist/cjs.js","mtime":1554307451521},{"path":"/Users/jeremytinianow/Sites/workspace.sprucebot-skills-kit/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1554307451471},{"path":"/Users/jeremytinianow/Sites/workspace.sprucebot-skills-kit/node_modules/@mdx-js/loader/index.js","mtime":1554307451561},{"path":"/Users/jeremytinianow/Sites/workspace.sprucebot-skills-kit/node_modules/source-map-loader/index.js","mtime":1554307451815}],"contextDependencies":[],"result":["import _objectWithoutProperties from \"/Users/jeremytinianow/Sites/workspace.sprucebot-skills-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _classCallCheck from \"/Users/jeremytinianow/Sites/workspace.sprucebot-skills-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/jeremytinianow/Sites/workspace.sprucebot-skills-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/jeremytinianow/Sites/workspace.sprucebot-skills-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/jeremytinianow/Sites/workspace.sprucebot-skills-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/jeremytinianow/Sites/workspace.sprucebot-skills-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/jeremytinianow/Sites/workspace.sprucebot-skills-kit/docs/spruce-skill/errors.md\";\n\n(function () {\n  var enterModule = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).enterModule;\n  enterModule && enterModule(module);\n})();\n\nimport React from 'react';\nimport { MDXTag } from '@mdx-js/tag';\nvar layoutProps = {};\n\nvar MDXContent =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(MDXContent, _React$Component);\n\n  function MDXContent(props) {\n    var _this;\n\n    _classCallCheck(this, MDXContent);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MDXContent).call(this, props));\n    _this.layout = null;\n    return _this;\n  }\n\n  _createClass(MDXContent, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          components = _this$props.components,\n          props = _objectWithoutProperties(_this$props, [\"components\"]);\n\n      return React.createElement(MDXTag, {\n        name: \"wrapper\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 17\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"h1\",\n        components: components,\n        props: {\n          \"id\": \"errors\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20\n        },\n        __self: this\n      }, \"Errors\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21\n        },\n        __self: this\n      }, \"Server\"), \" side errors are defined in \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21\n        },\n        __self: this\n      }, \"config/errors.js\"), \" and include a \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21\n        },\n        __self: this\n      }, \"friendlyReason\"), \" that you can render on the \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21\n        },\n        __self: this\n      }, \"interface\"), \".\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22\n        },\n        __self: this\n      }, \"This kit ships with some errors pre-defined, but undoubtedly you'll be defining your own. Then, when you want to throw an error, you simply \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22\n        },\n        __self: this\n      }, \"ctx.throw('ERROR_KEY')\"), \" or \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22\n        },\n        __self: this\n      }, \"ctx.assert(assertion,'ERROR_KEY')\"), \". The entire \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22\n        },\n        __self: this\n      }, \"error\"), \" object is returned in the response.\"), React.createElement(MDXTag, {\n        name: \"h2\",\n        components: components,\n        props: {\n          \"id\": \"error-object\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23\n        },\n        __self: this\n      }, \"Error object\"), React.createElement(MDXTag, {\n        name: \"pre\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"code\",\n        components: components,\n        parentName: \"pre\",\n        props: {\n          \"className\": \"language-js\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24\n        },\n        __self: this\n      }, \"module.exports = {\\n    [key: String]: {\\n        code: Number, // https status code that will be set in the response\\n        status: String, // single word description of status, usually 'failure'\\n        reason: String, // official reason for failure\\n        friendlyReason: String // something the interface can render\\n    }\\n}\\n\")), React.createElement(MDXTag, {\n        name: \"h2\",\n        components: components,\n        props: {\n          \"id\": \"built-in-errors\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      }, \"Built-in errors\"), React.createElement(MDXTag, {\n        name: \"pre\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"code\",\n        components: components,\n        parentName: \"pre\",\n        props: {\n          \"className\": \"language-js\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      }, \"// config/errors.js\\nmodule.exports = {\\n  UNKNOWN: {\\n    code: 500,\\n    status: 'failure',\\n    reason: 'A server side error occurred.',\\n    friendlyReason:\\n      \\\"I honestly have no idea what went wrong, but I've let the humans know and they are on it!\\\"\\n  },\\n  ROUTE_NOT_FOUND: {\\n    code: 404,\\n    status: 'failure',\\n    reason: 'Invalid route. Check the path and request methods',\\n    friendlyReason: 'The droids you were looking for could not be found.'\\n  },\\n  LOCATION_NOT_FOUND: {\\n    code: 404,\\n    status: 'failure',\\n    reason: 'Location could not be found.',\\n    friendlyReason: 'I could not find the location you are looking for.'\\n  },\\n  USER_NOT_FOUND: {\\n    code: 404,\\n    status: 'failure',\\n    reason: 'User could not be found.',\\n    friendlyReason: \\\"No joke, I can't find that user.\\\"\\n  },\\n  INVALID_AUTHENTICATION: {\\n    code: 401,\\n    status: 'failure',\\n    reason: 'Authentication failed.',\\n    friendlyReason: \\\"Sorry, you can't be here right now.\\\"\\n  },\\n  NOT_AUTHORIZED: {\\n    code: 403,\\n    status: 'failure',\\n    reason: 'Permission denied.',\\n    friendlyReason: 'Permission denied.'\\n  }\\n}\\n\")), React.createElement(MDXTag, {\n        name: \"h2\",\n        components: components,\n        props: {\n          \"id\": \"throwing-errors\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, \"Throwing errors\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, \"There are 2 ways to throw errors. By throwing one manually with \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, \"ctx.throw\"), \" or through a failed assertion with \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, \"ctx.assert\")), React.createElement(MDXTag, {\n        name: \"pre\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"code\",\n        components: components,\n        parentName: \"pre\",\n        props: {\n          \"className\": \"language-js\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, \"// server/controllers/1.0/teammate/index.js\\nmodule.exports = router => {\\n\\n    router.post('/api/1.0/teammate/save.json', async (ctx, next) {\\n\\n        // make sure someValue was POST'ed with this request\\n        ctx.assert(typeof(ctx.request.body.favoriteColor) === 'string', 'MISSING_FAVORITE_COLOR')\\n\\n        if (ctx.request.body.favoriteColor === 'blue') {\\n            ctx.throw('WRONG_COLOR_BRO')\\n        }\\n\\n        ...\\n\\n    }\\n\\n}\\n\")), React.createElement(MDXTag, {\n        name: \"h2\",\n        components: components,\n        props: {\n          \"id\": \"rendering-errors-client-side\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, \"Rendering errors client side\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, \"You can safely render \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, \"friendlyReason\"), \" whenever an error occurs on the \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, \"server\"), \". Your \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, \"reducer\"), \" will\"), React.createElement(MDXTag, {\n        name: \"pre\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"code\",\n        components: components,\n        parentName: \"pre\",\n        props: {\n          \"className\": \"language-js\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, \"render() {\\n\\n    const { shopify } = this.props\\n\\n    return (\\n        <Fragment>\\n\\n            {shopify.fetchError && (\\n                <BotText>{shopify.fetchError.friendlyReason}</BotText>\\n            )}\\n\\n        </Fragment>\\n    )\\n}\\n\")), React.createElement(MDXTag, {\n        name: \"h2\",\n        components: components,\n        props: {\n          \"id\": \"defining-your-errors\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, \"Defining your errors\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, \"Then, all we have to do is define the errors.\"), React.createElement(MDXTag, {\n        name: \"pre\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"code\",\n        components: components,\n        parentName: \"pre\",\n        props: {\n          \"className\": \"language-js\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, \"// config/errors.js\\nmodule.exports = {\\n    ...,\\n    MISSING_FAVORITE_COLOR: {\\n        code: 422,\\n        status: 'failure',\\n        reason: 'Missing parameters',\\n        friendlyReason: 'You forgot to tell me your favorite color!'\\n    },\\n    WRONG_COLOR_BRO: {\\n        code: 409,\\n        status: 'failure',\\n        reason: 'Blue is not allowed',\\n        friendlyReason: 'You can\\\\'t pick blue! Not sure why, but you CAN\\\\'T!'\\n    }\\n}\\n\")), React.createElement(MDXTag, {\n        name: \"h2\",\n        components: components,\n        props: {\n          \"id\": \"overriding-friendlyreason\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }, \"Overriding friendlyReason\"), React.createElement(MDXTag, {\n        name: \"pre\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"code\",\n        components: components,\n        parentName: \"pre\",\n        props: {\n          \"className\": \"language-js\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, \"// server/controllers/1.0/teammate/index.js\\nmodule.exports = router => {\\n\\n    router.post('/api/1.0/teammate/save.json', async (ctx, next) {\\n\\n        // make sure someValue was POST'ed with this request\\n        ctx.assert(typeof(ctx.request.body.favoriteColor1) === 'string', 'MISSING_FAVORITE_COLOR', {\\n            friendlyReason: 'You forgot the first color'\\n        })\\n\\n        ctx.assert(typeof(ctx.request.body.favoriteColor2) === 'string', 'MISSING_FAVORITE_COLOR', {\\n            friendlyReason: 'You forgot the second color'\\n        })\\n\\n        if (ctx.request.body.favoriteColor === 'blue') {\\n            ctx.throw('WRONG_COLOR_BRO')\\n        }\\n\\n        ...\\n\\n    }\\n\\n}\\n\")), React.createElement(MDXTag, {\n        name: \"h2\",\n        components: components,\n        props: {\n          \"id\": \"gotchyas\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }, \"Gotchya's\"), React.createElement(MDXTag, {\n        name: \"ul\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      }, \"There is no way (or need) to throw errors in the \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"li\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      }, \"interface\"), \". Almost all your logic should be contained in \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"li\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      }, \"services\"), \" and \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"li\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      }, \"utilities\"), \" on the \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"li\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      }, \"server\"), \". The \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"li\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      }, \"interface\"), \" is just that, the interface.\"), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      }, \"You can render \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"li\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      }, \"friendlyMessage\"), \" right in your \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"li\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      }, \"interface\"), \", but you don't have to.\")), React.createElement(MDXTag, {\n        name: \"h1\",\n        components: components,\n        props: {\n          \"id\": \"whats-next\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      }, \"What's next?\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      }, \"We're done with the essentials! Lets get started on something very specific, \", React.createElement(MDXTag, {\n        name: \"a\",\n        components: components,\n        parentName: \"p\",\n        props: {\n          \"href\": \"uploads.md\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      }, \"uploads\"), \"!\"));\n    }\n  }, {\n    key: \"__reactstandin__regenerateByEval\",\n    // @ts-ignore\n    value: function __reactstandin__regenerateByEval(key, code) {\n      // @ts-ignore\n      this[key] = eval(code);\n    }\n  }]);\n\n  return MDXContent;\n}(React.Component);\n\nexport { MDXContent as default };\nMDXContent.isMDXComponent = true;\n;\n\n(function () {\n  var reactHotLoader = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).default;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(layoutProps, \"layoutProps\", \"/Users/jeremytinianow/Sites/workspace.sprucebot-skills-kit/docs/spruce-skill/errors.md\");\n  reactHotLoader.register(MDXContent, \"MDXContent\", \"/Users/jeremytinianow/Sites/workspace.sprucebot-skills-kit/docs/spruce-skill/errors.md\");\n})();\n\n;\n\n(function () {\n  var leaveModule = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).leaveModule;\n  leaveModule && leaveModule(module);\n})();",{"version":3,"sources":["/Users/jeremytinianow/Sites/workspace.sprucebot-skills-kit/docs/spruce-skill/errors.md"],"names":["React","MDXTag","layoutProps","MDXContent","props","layout","components","Component","isMDXComponent"],"mappings":"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","sourcesContent":["\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  \n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}><MDXTag name=\"h1\" components={components} props={{\"id\":\"errors\"}}>{`Errors`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Server`}</MDXTag>{` side errors are defined in `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`config/errors.js`}</MDXTag>{` and include a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`friendlyReason`}</MDXTag>{` that you can render on the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`interface`}</MDXTag>{`.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This kit ships with some errors pre-defined, but undoubtedly you'll be defining your own. Then, when you want to throw an error, you simply `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`ctx.throw('ERROR_KEY')`}</MDXTag>{` or `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`ctx.assert(assertion,'ERROR_KEY')`}</MDXTag>{`. The entire `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`error`}</MDXTag>{` object is returned in the response.`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"error-object\"}}>{`Error object`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-js\"}}>{`module.exports = {\n    [key: String]: {\n        code: Number, // https status code that will be set in the response\n        status: String, // single word description of status, usually 'failure'\n        reason: String, // official reason for failure\n        friendlyReason: String // something the interface can render\n    }\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"built-in-errors\"}}>{`Built-in errors`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-js\"}}>{`// config/errors.js\nmodule.exports = {\n  UNKNOWN: {\n    code: 500,\n    status: 'failure',\n    reason: 'A server side error occurred.',\n    friendlyReason:\n      \"I honestly have no idea what went wrong, but I've let the humans know and they are on it!\"\n  },\n  ROUTE_NOT_FOUND: {\n    code: 404,\n    status: 'failure',\n    reason: 'Invalid route. Check the path and request methods',\n    friendlyReason: 'The droids you were looking for could not be found.'\n  },\n  LOCATION_NOT_FOUND: {\n    code: 404,\n    status: 'failure',\n    reason: 'Location could not be found.',\n    friendlyReason: 'I could not find the location you are looking for.'\n  },\n  USER_NOT_FOUND: {\n    code: 404,\n    status: 'failure',\n    reason: 'User could not be found.',\n    friendlyReason: \"No joke, I can't find that user.\"\n  },\n  INVALID_AUTHENTICATION: {\n    code: 401,\n    status: 'failure',\n    reason: 'Authentication failed.',\n    friendlyReason: \"Sorry, you can't be here right now.\"\n  },\n  NOT_AUTHORIZED: {\n    code: 403,\n    status: 'failure',\n    reason: 'Permission denied.',\n    friendlyReason: 'Permission denied.'\n  }\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"throwing-errors\"}}>{`Throwing errors`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`There are 2 ways to throw errors. By throwing one manually with `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`ctx.throw`}</MDXTag>{` or through a failed assertion with `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`ctx.assert`}</MDXTag></MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-js\"}}>{`// server/controllers/1.0/teammate/index.js\nmodule.exports = router => {\n\n    router.post('/api/1.0/teammate/save.json', async (ctx, next) {\n\n        // make sure someValue was POST'ed with this request\n        ctx.assert(typeof(ctx.request.body.favoriteColor) === 'string', 'MISSING_FAVORITE_COLOR')\n\n        if (ctx.request.body.favoriteColor === 'blue') {\n            ctx.throw('WRONG_COLOR_BRO')\n        }\n\n        ...\n\n    }\n\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"rendering-errors-client-side\"}}>{`Rendering errors client side`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`You can safely render `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`friendlyReason`}</MDXTag>{` whenever an error occurs on the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`server`}</MDXTag>{`. Your `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`reducer`}</MDXTag>{` will`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-js\"}}>{`render() {\n\n    const { shopify } = this.props\n\n    return (\n        <Fragment>\n\n            {shopify.fetchError && (\n                <BotText>{shopify.fetchError.friendlyReason}</BotText>\n            )}\n\n        </Fragment>\n    )\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"defining-your-errors\"}}>{`Defining your errors`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Then, all we have to do is define the errors.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-js\"}}>{`// config/errors.js\nmodule.exports = {\n    ...,\n    MISSING_FAVORITE_COLOR: {\n        code: 422,\n        status: 'failure',\n        reason: 'Missing parameters',\n        friendlyReason: 'You forgot to tell me your favorite color!'\n    },\n    WRONG_COLOR_BRO: {\n        code: 409,\n        status: 'failure',\n        reason: 'Blue is not allowed',\n        friendlyReason: 'You can\\\\'t pick blue! Not sure why, but you CAN\\\\'T!'\n    }\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"overriding-friendlyreason\"}}>{`Overriding friendlyReason`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-js\"}}>{`// server/controllers/1.0/teammate/index.js\nmodule.exports = router => {\n\n    router.post('/api/1.0/teammate/save.json', async (ctx, next) {\n\n        // make sure someValue was POST'ed with this request\n        ctx.assert(typeof(ctx.request.body.favoriteColor1) === 'string', 'MISSING_FAVORITE_COLOR', {\n            friendlyReason: 'You forgot the first color'\n        })\n\n        ctx.assert(typeof(ctx.request.body.favoriteColor2) === 'string', 'MISSING_FAVORITE_COLOR', {\n            friendlyReason: 'You forgot the second color'\n        })\n\n        if (ctx.request.body.favoriteColor === 'blue') {\n            ctx.throw('WRONG_COLOR_BRO')\n        }\n\n        ...\n\n    }\n\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"gotchyas\"}}>{`Gotchya's`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`There is no way (or need) to throw errors in the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`interface`}</MDXTag>{`. Almost all your logic should be contained in `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`services`}</MDXTag>{` and `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`utilities`}</MDXTag>{` on the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`server`}</MDXTag>{`. The `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`interface`}</MDXTag>{` is just that, the interface.`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`You can render `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`friendlyMessage`}</MDXTag>{` right in your `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`interface`}</MDXTag>{`, but you don't have to.`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"whats-next\"}}>{`What's next?`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`We're done with the essentials! Lets get started on something very specific, `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"uploads.md\"}}>{`uploads`}</MDXTag>{`!`}</MDXTag>\n           </MDXTag>\n  }\n}\nMDXContent.isMDXComponent = true\n  "]}]}