{"remainingRequest":"/Users/jeremytinianow/Sites/workspace.sprucebot-skills-kit/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/jeremytinianow/Sites/workspace.sprucebot-skills-kit/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/jeremytinianow/Sites/workspace.sprucebot-skills-kit/node_modules/source-map-loader/index.js!/Users/jeremytinianow/Sites/workspace.sprucebot-skills-kit/docs/spruce-skill/meta.md","dependencies":[{"path":"/Users/jeremytinianow/Sites/workspace.sprucebot-skills-kit/docs/spruce-skill/meta.md","mtime":1554307369211},{"path":"/Users/jeremytinianow/Sites/workspace.sprucebot-skills-kit/node_modules/cache-loader/dist/cjs.js","mtime":1554307451521},{"path":"/Users/jeremytinianow/Sites/workspace.sprucebot-skills-kit/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1554307451471},{"path":"/Users/jeremytinianow/Sites/workspace.sprucebot-skills-kit/node_modules/@mdx-js/loader/index.js","mtime":1554307451561},{"path":"/Users/jeremytinianow/Sites/workspace.sprucebot-skills-kit/node_modules/source-map-loader/index.js","mtime":1554307451815}],"contextDependencies":[],"result":["import _objectWithoutProperties from \"/Users/jeremytinianow/Sites/workspace.sprucebot-skills-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _classCallCheck from \"/Users/jeremytinianow/Sites/workspace.sprucebot-skills-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/jeremytinianow/Sites/workspace.sprucebot-skills-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/jeremytinianow/Sites/workspace.sprucebot-skills-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/jeremytinianow/Sites/workspace.sprucebot-skills-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/jeremytinianow/Sites/workspace.sprucebot-skills-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/jeremytinianow/Sites/workspace.sprucebot-skills-kit/docs/spruce-skill/meta.md\";\n\n(function () {\n  var enterModule = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).enterModule;\n  enterModule && enterModule(module);\n})();\n\nimport React from 'react';\nimport { MDXTag } from '@mdx-js/tag';\nvar layoutProps = {};\n\nvar MDXContent =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(MDXContent, _React$Component);\n\n  function MDXContent(props) {\n    var _this;\n\n    _classCallCheck(this, MDXContent);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MDXContent).call(this, props));\n    _this.layout = null;\n    return _this;\n  }\n\n  _createClass(MDXContent, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          components = _this$props.components,\n          props = _objectWithoutProperties(_this$props, [\"components\"]);\n\n      return React.createElement(MDXTag, {\n        name: \"wrapper\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 17\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"h1\",\n        components: components,\n        props: {\n          \"id\": \"meta-api\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20\n        },\n        __self: this\n      }, \"Meta API\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21\n        },\n        __self: this\n      }, \"A way to store any JSON.stringify'able object and query against it.\"), React.createElement(MDXTag, {\n        name: \"h3\",\n        components: components,\n        props: {\n          \"id\": \"for-when-you-dont-quite-need-a-database\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22\n        },\n        __self: this\n      }, \"For when you don't quite need a database\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23\n        },\n        __self: this\n      }, \"There will come a time when you need to store some data about a guest, teammate, owner, location, or even your own skill.\\nThe \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24\n        },\n        __self: this\n      }, \"Meta API\"), \" is a basic key/value store. As such, it can not run aggregate operations (avg, sum, etc.) on the data. If you need a more advanced data store, see \", React.createElement(MDXTag, {\n        name: \"a\",\n        components: components,\n        parentName: \"p\",\n        props: {\n          \"href\": \"models.md\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24\n        },\n        __self: this\n      }, \"models.md\"), \".\"), React.createElement(MDXTag, {\n        name: \"h2\",\n        components: components,\n        props: {\n          \"id\": \"meta-object\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25\n        },\n        __self: this\n      }, \"Meta object\"), React.createElement(MDXTag, {\n        name: \"pre\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"code\",\n        components: components,\n        parentName: \"pre\",\n        props: {\n          \"className\": \"language-js\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26\n        },\n        __self: this\n      }, \"{\\n    id: UUID4,\\n    createdAt: Date,\\n    updatedAt: Date,\\n    key: String,\\n    value: *, // anything JSON.stringify'able\\n    LocationId: UUID4,\\n    SkillId: UUID4,\\n    UserId: UUID4\\n}\\n\")), React.createElement(MDXTag, {\n        name: \"h2\",\n        components: components,\n        props: {\n          \"id\": \"api\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }, \"API\"), React.createElement(MDXTag, {\n        name: \"pre\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"code\",\n        components: components,\n        parentName: \"pre\",\n        props: {\n          \"className\": \"language-js\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }, \"// fetch single Meta (returns first match)\\nlet response = await ctx.sb.meta(key: String, {\\n    locationId: UUID4, // optional\\n    userId: UUID4, // optional (requires locationId to be set)\\n    sortBy: String, // createdAt|updatedAt\\n    order: String // ASC|DESC (defaults to DESC)\\n})\\n\\nconsole.log(response) // {Meta} or null\\n\\n// fetch many Metas\\nlet response = await ctx.sb.metas({\\n    locationId: UUID4, // optional\\n    userId: UUID4, // optional (requires locationId to be set)\\n    value: *, // optional (can search against key in object)\\n    sortBy: String, // createdAt|updatedAt,\\n    order: String, // ASC|DESC (defaults to DESC)\\n    key: String, // optional\\n    page: Number, // optional (defaults to 0)\\n    limit: Number // optional (defaults to 10, max 200)\\n})\\n\\nconsole.log(response) // [{Meta}, {Meta}, {Meta}] or []\\n\\n// create Meta\\nlet response = await ctx.sb.createMeta(key: String, value: *, {\\n    locationId: UUID4, // optional\\n    userId: UUID4, // optional (requires locationId to be set)\\n})\\n\\nconsole.log(response) // {Meta}\\n\\n// create Meta if matching one does not exist\\nlet response = await ctx.sb.metaOrCreate(key: String, value: *, {\\n    locationId: UUID4, // optional\\n    userId: UUID4, // optional (requires locationId to be set)\\n});\\n\\nconsole.log(response) // {Meta}\\n\\n// create Meta if no match found, update any matches found\\nlet response = await ctx.sb.upsertMeta(key: String, value: *, {\\n    locationId: UUID4, // optional\\n    userId: UUID4, // optional (requires locationId to be set)\\n});\\n\\nconsole.log(response) // {Meta}\\n\\n// delete\\nlet response = await ctx.sb.deleteMeta(id: UUID4)\\n\\nconsole.log(response) // {??}\\n\")), React.createElement(MDXTag, {\n        name: \"h2\",\n        components: components,\n        props: {\n          \"id\": \"values\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, \"Values\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, \"Meta\"), \" can store anything \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, \"JSON.stringify\"), \"able, which means anything like this works. But note how \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, \"Date\"), \"s come back as a string. Under the hood it's running \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, \"JSON.parse\"), \" when pulling the value from Sprucebot. So, if you want to know how something will work, do \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, \"JSON.stringify\"), \" tests in your favorite browser's developer console.\"), React.createElement(MDXTag, {\n        name: \"pre\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"code\",\n        components: components,\n        parentName: \"pre\",\n        props: {\n          \"className\": \"language-js\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, \"// will save this meta \\\"skill wide\\\"\\nawait ctx.sb.createMeta('my-key', {\\n    name: 'Sprucebot',\\n    today: new Date(),\\n    numbers: [2, 2, 5]\\n})\\n\\nconst meta = await ctx.sb.meta('my-key')\\n\\nconsole.log(meta.value) // { name: 'Sprucebot', today: \\\"2017-11-23T00:15:34.676Z\\\", numbers: [2,2,5] }\\n\")), React.createElement(MDXTag, {\n        name: \"h2\",\n        components: components,\n        props: {\n          \"id\": \"advanced-queries\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, \"Advanced Queries\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, \"If you wanna get down and dirty, you can checkout \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, \"spruce-node\"), \"'s \", React.createElement(MDXTag, {\n        name: \"a\",\n        components: components,\n        parentName: \"p\",\n        props: {\n          \"href\": \"https://github.com/sprucelabsai/spruce-node/blob/dev/index.test.js\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, \"unit tests\"), \".\"), React.createElement(MDXTag, {\n        name: \"h3\",\n        components: components,\n        props: {\n          \"id\": \"searching-values\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, \"Searching values\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, \"If your \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, \"meta.value\"), \" is an object, you can search inside it. Here we'll quickly create 3 \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, \"meta\"), \" objects and test querying against them.\"), React.createElement(MDXTag, {\n        name: \"pre\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"code\",\n        components: components,\n        parentName: \"pre\",\n        props: {\n          \"className\": \"language-js\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, \"// start with 2 metas\\nawait sb.createMeta(\\n    'meta-key',\\n    {\\n        hello: 'world',\\n        world: 'hello'\\n    },\\n    {\\n        userId: teammate1.User.id\\n    }\\n)\\n\\nawait sb.createMeta(\\n    'meta-key',\\n    {\\n        hello: 'world'\\n    },\\n    {\\n        userId: teammate2.User.id\\n    }\\n)\\n\\nawait sb.createMeta(\\n    'meta-key',\\n    {\\n        hello: 'again?'\\n    },\\n    {\\n        userId: teammate3.User.id\\n    }\\n)\\n\\n// finds first 2\\nlet matches = await sb.metas({\\n    value: {\\n        hello: 'world'\\n    }\\n})\\n\\n// finds first only\\nmatches = await sb.metas({\\n    value: {\\n        hello: 'world',\\n        world: 'hello'\\n    }\\n})\\n\\n// finds all\\nmatches = await sb.metas({\\n    value: {\\n        $or: [{ hello: 'world' }, { hello: 'again?' }]\\n    }\\n})\\n\\n// first 1\\nmatches = await sb.metas({\\n    userId: teammate1.User.id\\n})\\n\\n// finds 2\\nmatches = await sb.metas({\\n    userId: { $or: [teammate1.User.id, teammate2.User.id] }\\n})\\n\")), React.createElement(MDXTag, {\n        name: \"h2\",\n        components: components,\n        props: {\n          \"id\": \"uniqueness\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172\n        },\n        __self: this\n      }, \"Uniqueness\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173\n        },\n        __self: this\n      }, \"Meta.key\"), \" is \", React.createElement(MDXTag, {\n        name: \"strong\",\n        components: components,\n        parentName: \"p\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173\n        },\n        __self: this\n      }, \"not\"), \" unique. That means, you have to ensure any \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173\n        },\n        __self: this\n      }, \"Meta\"), \" you expect to be unique, actually is. This is where \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173\n        },\n        __self: this\n      }, \"metaOrCreate\"), \" & \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173\n        },\n        __self: this\n      }, \"upsertMeta\"), \" come in handy. Something to keep in mind is the handling of race conditions in an async I/O environment like \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173\n        },\n        __self: this\n      }, \"nodejs\"), \", e.g.\"), React.createElement(MDXTag, {\n        name: \"ul\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      }, \"An \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"li\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      }, \"owner\"), \" hits \\\"Save\\\" twice and 2 requests come in.\"), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      }, \"The first request hits and you call \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"li\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      }, \"ctx.sb.meta()\"), \" to see if a \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"li\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      }, \"Meta\"), \" exists.\", React.createElement(MDXTag, {\n        name: \"ul\",\n        components: components,\n        parentName: \"li\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        },\n        __self: this\n      }, \"Since I\\\\O is async, while \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"li\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        },\n        __self: this\n      }, \"ctx.sb.meta()\"), \" is doing it's lookup, control is passed back to \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"li\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        },\n        __self: this\n      }, \"koa-router\"), \" who is waiting for the next request.\"))), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179\n        },\n        __self: this\n      }, \"The second request hits and you call \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"li\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179\n        },\n        __self: this\n      }, \"ctx.sb.meta()\"), \" and \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"li\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179\n        },\n        __self: this\n      }, \"Meta\"), \" still does not exist.\", React.createElement(MDXTag, {\n        name: \"ul\",\n        components: components,\n        parentName: \"li\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180\n        },\n        __self: this\n      }, \"As this call happens, and the first call finishes, control is passed back to the first call, and the following check happens.\"))), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182\n        },\n        __self: this\n      }, \"The first request does an \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"li\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182\n        },\n        __self: this\n      }, \"if(!meta)\"), \" check, and since \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"li\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182\n        },\n        __self: this\n      }, \"meta\"), \" is \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"li\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182\n        },\n        __self: this\n      }, \"null\"), \", it'll pass and a new \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"li\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182\n        },\n        __self: this\n      }, \"Meta\"), \" will be created\"), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183\n        },\n        __self: this\n      }, \"The second request also passes \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"li\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183\n        },\n        __self: this\n      }, \"if(!meta)\"), \" because \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"li\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183\n        },\n        __self: this\n      }, \"meta\"), \" is \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"li\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183\n        },\n        __self: this\n      }, \"null\"), \", it'll create a new \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"li\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183\n        },\n        __self: this\n      }, \"Meta\")), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184\n        },\n        __self: this\n      }, \"Now you have 2 \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"li\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184\n        },\n        __self: this\n      }, \"Metas\"), \" that are identical\")), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186\n        },\n        __self: this\n      }, \"Lets create some meta we 100% want to be unique. In this example, an \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186\n        },\n        __self: this\n      }, \"owner\"), \" is saving some setting to their \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186\n        },\n        __self: this\n      }, \"Location\"), \".\"), React.createElement(MDXTag, {\n        name: \"pre\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"code\",\n        components: components,\n        parentName: \"pre\",\n        props: {\n          \"className\": \"language-js\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187\n        },\n        __self: this\n      }, \"// server/controllers/1.0/owner/index.js\\nmodule.exports = router => {\\n\\n    router.post('/api/1.0/owner/save.json', async (ctx, next) {\\n\\n        ctx.assert(typeof(ctx.request.body.someValue) === 'string', 'MISSING_SOME_VALUE')\\n\\n        // because this setting is Location wide, we'll only lock for this location\\n        // the scenarios being same user hits submit too many times or two owners\\n        // are in the settings at the same time\\n        const waitKey = `save-some-value-${ctx.auth.Location.id}`\\n\\n        try {\\n\\n            // this will block all requests matching this key until go() is invoked\\n            await ctx.sb.wait(waitKey)\\n\\n            // rather than doing a lookup, then a check, then an update, lets upsert!\\n            const meta = ctx.sb.upsertMeta('some-value', ctx.body.someValue, {\\n                locationId: ctx.auth.Location.id\\n            })\\n\\n            // pass back whole meta and let client sort it out\\n            ctx.body = meta\\n\\n        } catch (err) {\\n            console.error(err)\\n            ctx.throw('FAILED_TO_SAVE_SOME_VALUE')\\n        } finally {\\n            // unlock this request\\n            ctx.sb.go(waitKey)\\n        }\\n\\n        // pass back to koa\\n        next()\\n\\n    })\\n}\\n\")), React.createElement(MDXTag, {\n        name: \"h2\",\n        components: components,\n        props: {\n          \"id\": \"gotchyas\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 226\n        },\n        __self: this\n      }, \"Gotchya's\"), React.createElement(MDXTag, {\n        name: \"ul\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228\n        },\n        __self: this\n      }, \"A \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"li\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228\n        },\n        __self: this\n      }, \"Metas\"), \" \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"li\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228\n        },\n        __self: this\n      }, \"key\"), \" is \", React.createElement(MDXTag, {\n        name: \"strong\",\n        components: components,\n        parentName: \"li\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228\n        },\n        __self: this\n      }, \"not\"), \" unique. In fact, nothing in \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"li\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228\n        },\n        __self: this\n      }, \"Meta\"), \" is unique. Meaning, you must manage uniqueness.\"), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 229\n        },\n        __self: this\n      }, \"If you want to save \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"li\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 229\n        },\n        __self: this\n      }, \"Meta\"), \" for a \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"li\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 229\n        },\n        __self: this\n      }, \"User\"), \", you MUST also provide a \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"li\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 229\n        },\n        __self: this\n      }, \"Location\"), \". In other words, if you set \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"li\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 229\n        },\n        __self: this\n      }, \"userId\"), \", you must set \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"li\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 229\n        },\n        __self: this\n      }, \"locationId\")), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 230\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"li\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 230\n        },\n        __self: this\n      }, \"Meta\"), \" saved to a \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"li\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 230\n        },\n        __self: this\n      }, \"Location\"), \" only needs \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"li\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 230\n        },\n        __self: this\n      }, \"locationId\")), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 231\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"li\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 231\n        },\n        __self: this\n      }, \"Meta\"), \" that is available globally only needs \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"li\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 231\n        },\n        __self: this\n      }, \"key\"), \" and \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"li\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 231\n        },\n        __self: this\n      }, \"value\")), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232\n        },\n        __self: this\n      }, \"Utility methods like \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"li\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232\n        },\n        __self: this\n      }, \"metaOrCreate\"), \" and \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"li\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232\n        },\n        __self: this\n      }, \"upsertMeta\"), \" are prone to race conditions with all their fetching, checking, saving, updating. Easily fixed with \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"li\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232\n        },\n        __self: this\n      }, \"ctx.sb.wait(waitKey)\")), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 233\n        },\n        __self: this\n      }, \"Don't let owners share information about teammates with owners of other businesses. That is, make sure you're keep data segmented by \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"li\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 233\n        },\n        __self: this\n      }, \"locationId\"), \" nearly 100% of the time. Sharing data between \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"li\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 233\n        },\n        __self: this\n      }, \"Locations\"), \" is coming soon.\")), React.createElement(MDXTag, {\n        name: \"h2\",\n        components: components,\n        props: {\n          \"id\": \"examples\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 235\n        },\n        __self: this\n      }, \"Examples\"), React.createElement(MDXTag, {\n        name: \"h3\",\n        components: components,\n        props: {\n          \"id\": \"saving-a-teammates-favorite-color\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 236\n        },\n        __self: this\n      }, \"Saving a teammate's favorite color\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"strong\",\n        components: components,\n        parentName: \"p\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237\n        },\n        __self: this\n      }, \"Difficulty level\"), \": Easy\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 238\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"strong\",\n        components: components,\n        parentName: \"p\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 238\n        },\n        __self: this\n      }, \"Description\"), \": Every teammate has a favorite color, so you decide to let them save it. Then, you tell Sprucebot to text it to them whenever they show up (do not do this, ever). We will not cover any of the interface here. Assume a \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 238\n        },\n        __self: this\n      }, \"<List>\"), \" of teammates with a text field next to each and a \\\"Save\\\" button.\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"strong\",\n        components: components,\n        parentName: \"p\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239\n        },\n        __self: this\n      }, \"Required reading\"), \":\"), React.createElement(MDXTag, {\n        name: \"ul\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 240\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 241\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"a\",\n        components: components,\n        parentName: \"li\",\n        props: {\n          \"href\": \"user.md\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 241\n        },\n        __self: this\n      }, \"User\")), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 242\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"a\",\n        components: components,\n        parentName: \"li\",\n        props: {\n          \"href\": \"server.md\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 242\n        },\n        __self: this\n      }, \"Server\")), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 243\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"a\",\n        components: components,\n        parentName: \"li\",\n        props: {\n          \"href\": \"messaging.md\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 243\n        },\n        __self: this\n      }, \"Messaging\")), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 244\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"a\",\n        components: components,\n        parentName: \"li\",\n        props: {\n          \"href\": \"lang.md\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 244\n        },\n        __self: this\n      }, \"Lang\")), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 245\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"a\",\n        components: components,\n        parentName: \"li\",\n        props: {\n          \"href\": \"events.md\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 245\n        },\n        __self: this\n      }, \"Events\")), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"a\",\n        components: components,\n        parentName: \"li\",\n        props: {\n          \"href\": \"errors.md\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246\n        },\n        __self: this\n      }, \"Errors\"))), React.createElement(MDXTag, {\n        name: \"h4\",\n        components: components,\n        props: {\n          \"id\": \"saving-the-color\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 248\n        },\n        __self: this\n      }, \"Saving the color\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 249\n        },\n        __self: this\n      }, \"First thing we're going to do is create the route that will handle our ability to save a color.\"), React.createElement(MDXTag, {\n        name: \"pre\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 250\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"code\",\n        components: components,\n        parentName: \"pre\",\n        props: {\n          \"className\": \"language-js\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 250\n        },\n        __self: this\n      }, \"// server/controllers/1.0/teammate/index.js\\nmodule.exports = router => {\\n\\n    router.post('/api/1.0/teammate/color/save.json', async (ctx, next) => {\\n\\n        // make sure favorite color is a string (our only required field)\\n        ctx.assert(typeof(ctx.request.body.favoriteColor) === 'string', 'MISSING_FAVORITE_COLOR')\\n\\n        // get the currently authed [user](user.md)\\n        const user = ctx.auth\\n\\n        // it's good practice to lock unique requests to handle race conditions\\n        // e.g. someone hitting save 100x in 2 seconds\\n        const waitKey = `save-color-for-${user.User.id}`\\n\\n        // drop everything in a try/catch/finally to ensure you can always unlock the request\\n        try {\\n\\n            // subsequent requests will be stuck here until .go() is invoked\\n            await ctx.sb.wait(waitKey)\\n\\n            // upsert the meta data for this user, we save location and user so this teammate can\\n            // save a different favorite color at their \\\"other\\\" job\\n            const meta = await ctx.sb.upsertMeta('favorite-color', ctx.request.body.favoriteColor, {\\n                locationId: user.Location.id,\\n                userId: user.User.id\\n            })\\n\\n            // respond to the request\\n            ctx.body = {\\n                favoriteColor: meta.value\\n            }\\n\\n        } catch(err) {\\n\\n            console.error(err)\\n            ctx.throw('FAILED_TO_SAVE_FAVORITE_COLOR')\\n\\n        } finally() {\\n            ctx.sb.go(waitKey)\\n        }\\n\\n\\n        // pass back to koa if no error\\n        next()\\n    })\\n}\\n\")), React.createElement(MDXTag, {\n        name: \"h4\",\n        components: components,\n        props: {\n          \"id\": \"send-the-teammate-their-color-on-arrival\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 298\n        },\n        __self: this\n      }, \"Send the teammate their color on arrival\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 299\n        },\n        __self: this\n      }, \"Or, you know, remind them to set one if they haven't.\"), React.createElement(MDXTag, {\n        name: \"pre\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 300\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"code\",\n        components: components,\n        parentName: \"pre\",\n        props: {\n          \"className\": \"language-js\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 300\n        },\n        __self: this\n      }, \"// server/events/did-enter.js\\nmodule.exports = await (ctx, next) => {\\n\\n    // grab the event\\n    const event = ctx.event\\n\\n    // only if a teammate enters\\n    if (event.User.role === 'teammate') {\\n\\n        // stop Sprucebot from sending the default did-enter message\\n        ctx.body = { preventDefault: true }\\n        next() // respond immediately or Sprucebot will move on (no await)\\n\\n        // the favorite color (may be null)\\n        await favoriteColor = await ctx.sb.meta('favorite-color', {\\n            locationId: event.Location.id,\\n            userId: event.User.id\\n        })\\n\\n        // use lang to construct the message body\\n        // we prefer to pass entire objects so lang can make some decisions\\n        const body = ctx.utilities.lang.getText('didEnterMessage', { favoriteColor, event })\\n\\n        // fire the message\\n        await ctx.sb.message(event.Location.id, event.User.id, body, {\\n            linksToWebView: !favoriteColor // take them to set their color if they have not\\n        })\\n\\n    } else {\\n\\n        // move on\\n        await next()\\n    }\\n\\n\\n\\n}\\n\")), React.createElement(MDXTag, {\n        name: \"h4\",\n        components: components,\n        props: {\n          \"id\": \"define-the-terms\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 338\n        },\n        __self: this\n      }, \"Define the terms\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 339\n        },\n        __self: this\n      }, \"Notice we run a bit of logic in the \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 339\n        },\n        __self: this\n      }, \"didEnterMessage\"), \" term. Check \", React.createElement(MDXTag, {\n        name: \"a\",\n        components: components,\n        parentName: \"p\",\n        props: {\n          \"href\": \"lang.md\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 339\n        },\n        __self: this\n      }, \"lang\"), \" for more deets.\"), React.createElement(MDXTag, {\n        name: \"pre\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 340\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"code\",\n        components: components,\n        parentName: \"pre\",\n        props: {\n          \"className\": \"language-js\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 340\n        },\n        __self: this\n      }, \"// interface/lang/default.js\\nmodule.exports = {\\n    didEnterMessage: ({ favoriteColor, event }) =>\\n        favoriteColor\\n            ? `Welcome back ${event.User.casualName}! Your favorite color is ${\\n                    favoriteColor.value\\n              }. That's pretty alright. \\uD83D\\uDC4A\\uD83C\\uDFFC`\\n            : `Hey ${event.User.casualName}, why haven't you set your favorite color?`\\n}\\n\")), React.createElement(MDXTag, {\n        name: \"h4\",\n        components: components,\n        props: {\n          \"id\": \"errors\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 350\n        },\n        __self: this\n      }, \"Errors\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 351\n        },\n        __self: this\n      }, \"We need to define our errors. This kit comes with some built in, but we will be adding our own.\"), React.createElement(MDXTag, {\n        name: \"pre\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 352\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"code\",\n        components: components,\n        parentName: \"pre\",\n        props: {\n          \"className\": \"language-js\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 352\n        },\n        __self: this\n      }, \"// config/errors.js\\nmodule.exports = {\\n    ...,\\n    MISSING_FAVORITE_COLOR: {\\n        code: 422,\\n        status: 'failure',\\n        reason: 'Missing parameters',\\n        friendlyReason: 'You forgot to tell me your favorite color!'\\n    },\\n    FAILED_TO_SAVE_FAVORITE_COLOR: {\\n        code: 500,\\n        status: 'failure',\\n        reason: 'Failed to save favorite color',\\n        friendlyReason: 'Oh no! I couldn`t save your favorite color. I\\\\'m not sure what happened!'\\n    }\\n}\\n\")), React.createElement(MDXTag, {\n        name: \"h1\",\n        components: components,\n        props: {\n          \"id\": \"whats-next\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 369\n        },\n        __self: this\n      }, \"What's next?\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 370\n        },\n        __self: this\n      }, \"Cool, we're pretty ramped up on all the data passed to and from Sprucebot, lets dive into \", React.createElement(MDXTag, {\n        name: \"a\",\n        components: components,\n        parentName: \"p\",\n        props: {\n          \"href\": \"events.md\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 370\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"a\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 370\n        },\n        __self: this\n      }, \"events\")), \"!\"));\n    }\n  }, {\n    key: \"__reactstandin__regenerateByEval\",\n    // @ts-ignore\n    value: function __reactstandin__regenerateByEval(key, code) {\n      // @ts-ignore\n      this[key] = eval(code);\n    }\n  }]);\n\n  return MDXContent;\n}(React.Component);\n\nexport { MDXContent as default };\nMDXContent.isMDXComponent = true;\n;\n\n(function () {\n  var reactHotLoader = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).default;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(layoutProps, \"layoutProps\", \"/Users/jeremytinianow/Sites/workspace.sprucebot-skills-kit/docs/spruce-skill/meta.md\");\n  reactHotLoader.register(MDXContent, \"MDXContent\", \"/Users/jeremytinianow/Sites/workspace.sprucebot-skills-kit/docs/spruce-skill/meta.md\");\n})();\n\n;\n\n(function () {\n  var leaveModule = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).leaveModule;\n  leaveModule && leaveModule(module);\n})();",{"version":3,"sources":["/Users/jeremytinianow/Sites/workspace.sprucebot-skills-kit/docs/spruce-skill/meta.md"],"names":["React","MDXTag","layoutProps","MDXContent","props","layout","components","Component","isMDXComponent"],"mappings":"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","sourcesContent":["\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  \n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}><MDXTag name=\"h1\" components={components} props={{\"id\":\"meta-api\"}}>{`Meta API`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`A way to store any JSON.stringify'able object and query against it.`}</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"for-when-you-dont-quite-need-a-database\"}}>{`For when you don't quite need a database`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`There will come a time when you need to store some data about a guest, teammate, owner, location, or even your own skill.\nThe `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Meta API`}</MDXTag>{` is a basic key/value store. As such, it can not run aggregate operations (avg, sum, etc.) on the data. If you need a more advanced data store, see `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"models.md\"}}>{`models.md`}</MDXTag>{`.`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"meta-object\"}}>{`Meta object`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-js\"}}>{`{\n    id: UUID4,\n    createdAt: Date,\n    updatedAt: Date,\n    key: String,\n    value: *, // anything JSON.stringify'able\n    LocationId: UUID4,\n    SkillId: UUID4,\n    UserId: UUID4\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"api\"}}>{`API`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-js\"}}>{`// fetch single Meta (returns first match)\nlet response = await ctx.sb.meta(key: String, {\n    locationId: UUID4, // optional\n    userId: UUID4, // optional (requires locationId to be set)\n    sortBy: String, // createdAt|updatedAt\n    order: String // ASC|DESC (defaults to DESC)\n})\n\nconsole.log(response) // {Meta} or null\n\n// fetch many Metas\nlet response = await ctx.sb.metas({\n    locationId: UUID4, // optional\n    userId: UUID4, // optional (requires locationId to be set)\n    value: *, // optional (can search against key in object)\n    sortBy: String, // createdAt|updatedAt,\n    order: String, // ASC|DESC (defaults to DESC)\n    key: String, // optional\n    page: Number, // optional (defaults to 0)\n    limit: Number // optional (defaults to 10, max 200)\n})\n\nconsole.log(response) // [{Meta}, {Meta}, {Meta}] or []\n\n// create Meta\nlet response = await ctx.sb.createMeta(key: String, value: *, {\n    locationId: UUID4, // optional\n    userId: UUID4, // optional (requires locationId to be set)\n})\n\nconsole.log(response) // {Meta}\n\n// create Meta if matching one does not exist\nlet response = await ctx.sb.metaOrCreate(key: String, value: *, {\n    locationId: UUID4, // optional\n    userId: UUID4, // optional (requires locationId to be set)\n});\n\nconsole.log(response) // {Meta}\n\n// create Meta if no match found, update any matches found\nlet response = await ctx.sb.upsertMeta(key: String, value: *, {\n    locationId: UUID4, // optional\n    userId: UUID4, // optional (requires locationId to be set)\n});\n\nconsole.log(response) // {Meta}\n\n// delete\nlet response = await ctx.sb.deleteMeta(id: UUID4)\n\nconsole.log(response) // {??}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"values\"}}>{`Values`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Meta`}</MDXTag>{` can store anything `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`JSON.stringify`}</MDXTag>{`able, which means anything like this works. But note how `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Date`}</MDXTag>{`s come back as a string. Under the hood it's running `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`JSON.parse`}</MDXTag>{` when pulling the value from Sprucebot. So, if you want to know how something will work, do `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`JSON.stringify`}</MDXTag>{` tests in your favorite browser's developer console.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-js\"}}>{`// will save this meta \"skill wide\"\nawait ctx.sb.createMeta('my-key', {\n    name: 'Sprucebot',\n    today: new Date(),\n    numbers: [2, 2, 5]\n})\n\nconst meta = await ctx.sb.meta('my-key')\n\nconsole.log(meta.value) // { name: 'Sprucebot', today: \"2017-11-23T00:15:34.676Z\", numbers: [2,2,5] }\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"advanced-queries\"}}>{`Advanced Queries`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`If you wanna get down and dirty, you can checkout `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`spruce-node`}</MDXTag>{`'s `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://github.com/sprucelabsai/spruce-node/blob/dev/index.test.js\"}}>{`unit tests`}</MDXTag>{`.`}</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"searching-values\"}}>{`Searching values`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`If your `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`meta.value`}</MDXTag>{` is an object, you can search inside it. Here we'll quickly create 3 `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`meta`}</MDXTag>{` objects and test querying against them.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-js\"}}>{`// start with 2 metas\nawait sb.createMeta(\n    'meta-key',\n    {\n        hello: 'world',\n        world: 'hello'\n    },\n    {\n        userId: teammate1.User.id\n    }\n)\n\nawait sb.createMeta(\n    'meta-key',\n    {\n        hello: 'world'\n    },\n    {\n        userId: teammate2.User.id\n    }\n)\n\nawait sb.createMeta(\n    'meta-key',\n    {\n        hello: 'again?'\n    },\n    {\n        userId: teammate3.User.id\n    }\n)\n\n// finds first 2\nlet matches = await sb.metas({\n    value: {\n        hello: 'world'\n    }\n})\n\n// finds first only\nmatches = await sb.metas({\n    value: {\n        hello: 'world',\n        world: 'hello'\n    }\n})\n\n// finds all\nmatches = await sb.metas({\n    value: {\n        $or: [{ hello: 'world' }, { hello: 'again?' }]\n    }\n})\n\n// first 1\nmatches = await sb.metas({\n    userId: teammate1.User.id\n})\n\n// finds 2\nmatches = await sb.metas({\n    userId: { $or: [teammate1.User.id, teammate2.User.id] }\n})\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"uniqueness\"}}>{`Uniqueness`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Meta.key`}</MDXTag>{` is `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`not`}</MDXTag>{` unique. That means, you have to ensure any `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Meta`}</MDXTag>{` you expect to be unique, actually is. This is where `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`metaOrCreate`}</MDXTag>{` & `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`upsertMeta`}</MDXTag>{` come in handy. Something to keep in mind is the handling of race conditions in an async I/O environment like `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`nodejs`}</MDXTag>{`, e.g.`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`An `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`owner`}</MDXTag>{` hits \"Save\" twice and 2 requests come in.`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`The first request hits and you call `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`ctx.sb.meta()`}</MDXTag>{` to see if a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`Meta`}</MDXTag>{` exists.`}<MDXTag name=\"ul\" components={components} parentName=\"li\">\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Since I\\\\O is async, while `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`ctx.sb.meta()`}</MDXTag>{` is doing it's lookup, control is passed back to `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`koa-router`}</MDXTag>{` who is waiting for the next request.`}</MDXTag>\n</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`The second request hits and you call `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`ctx.sb.meta()`}</MDXTag>{` and `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`Meta`}</MDXTag>{` still does not exist.`}<MDXTag name=\"ul\" components={components} parentName=\"li\">\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`As this call happens, and the first call finishes, control is passed back to the first call, and the following check happens.`}</MDXTag>\n</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`The first request does an `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`if(!meta)`}</MDXTag>{` check, and since `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`meta`}</MDXTag>{` is `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`null`}</MDXTag>{`, it'll pass and a new `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`Meta`}</MDXTag>{` will be created`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`The second request also passes `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`if(!meta)`}</MDXTag>{` because `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`meta`}</MDXTag>{` is `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`null`}</MDXTag>{`, it'll create a new `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`Meta`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Now you have 2 `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`Metas`}</MDXTag>{` that are identical`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Lets create some meta we 100% want to be unique. In this example, an `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`owner`}</MDXTag>{` is saving some setting to their `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Location`}</MDXTag>{`.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-js\"}}>{`// server/controllers/1.0/owner/index.js\nmodule.exports = router => {\n\n    router.post('/api/1.0/owner/save.json', async (ctx, next) {\n\n        ctx.assert(typeof(ctx.request.body.someValue) === 'string', 'MISSING_SOME_VALUE')\n\n        // because this setting is Location wide, we'll only lock for this location\n        // the scenarios being same user hits submit too many times or two owners\n        // are in the settings at the same time\n        const waitKey = \\`save-some-value-\\${ctx.auth.Location.id}\\`\n\n        try {\n\n            // this will block all requests matching this key until go() is invoked\n            await ctx.sb.wait(waitKey)\n\n            // rather than doing a lookup, then a check, then an update, lets upsert!\n            const meta = ctx.sb.upsertMeta('some-value', ctx.body.someValue, {\n                locationId: ctx.auth.Location.id\n            })\n\n            // pass back whole meta and let client sort it out\n            ctx.body = meta\n\n        } catch (err) {\n            console.error(err)\n            ctx.throw('FAILED_TO_SAVE_SOME_VALUE')\n        } finally {\n            // unlock this request\n            ctx.sb.go(waitKey)\n        }\n\n        // pass back to koa\n        next()\n\n    })\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"gotchyas\"}}>{`Gotchya's`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`A `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`Metas`}</MDXTag>{` `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`key`}</MDXTag>{` is `}<MDXTag name=\"strong\" components={components} parentName=\"li\">{`not`}</MDXTag>{` unique. In fact, nothing in `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`Meta`}</MDXTag>{` is unique. Meaning, you must manage uniqueness.`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`If you want to save `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`Meta`}</MDXTag>{` for a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`User`}</MDXTag>{`, you MUST also provide a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`Location`}</MDXTag>{`. In other words, if you set `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`userId`}</MDXTag>{`, you must set `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`locationId`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`Meta`}</MDXTag>{` saved to a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`Location`}</MDXTag>{` only needs `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`locationId`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`Meta`}</MDXTag>{` that is available globally only needs `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`key`}</MDXTag>{` and `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`value`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Utility methods like `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`metaOrCreate`}</MDXTag>{` and `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`upsertMeta`}</MDXTag>{` are prone to race conditions with all their fetching, checking, saving, updating. Easily fixed with `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`ctx.sb.wait(waitKey)`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Don't let owners share information about teammates with owners of other businesses. That is, make sure you're keep data segmented by `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`locationId`}</MDXTag>{` nearly 100% of the time. Sharing data between `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`Locations`}</MDXTag>{` is coming soon.`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"examples\"}}>{`Examples`}</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"saving-a-teammates-favorite-color\"}}>{`Saving a teammate's favorite color`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{`Difficulty level`}</MDXTag>{`: Easy`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{`Description`}</MDXTag>{`: Every teammate has a favorite color, so you decide to let them save it. Then, you tell Sprucebot to text it to them whenever they show up (do not do this, ever). We will not cover any of the interface here. Assume a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`<List>`}</MDXTag>{` of teammates with a text field next to each and a \"Save\" button.`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{`Required reading`}</MDXTag>{`:`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"user.md\"}}>{`User`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"server.md\"}}>{`Server`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"messaging.md\"}}>{`Messaging`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"lang.md\"}}>{`Lang`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"events.md\"}}>{`Events`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"errors.md\"}}>{`Errors`}</MDXTag></MDXTag>\n</MDXTag>\n<MDXTag name=\"h4\" components={components} props={{\"id\":\"saving-the-color\"}}>{`Saving the color`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`First thing we're going to do is create the route that will handle our ability to save a color.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-js\"}}>{`// server/controllers/1.0/teammate/index.js\nmodule.exports = router => {\n\n    router.post('/api/1.0/teammate/color/save.json', async (ctx, next) => {\n\n        // make sure favorite color is a string (our only required field)\n        ctx.assert(typeof(ctx.request.body.favoriteColor) === 'string', 'MISSING_FAVORITE_COLOR')\n\n        // get the currently authed [user](user.md)\n        const user = ctx.auth\n\n        // it's good practice to lock unique requests to handle race conditions\n        // e.g. someone hitting save 100x in 2 seconds\n        const waitKey = \\`save-color-for-\\${user.User.id}\\`\n\n        // drop everything in a try/catch/finally to ensure you can always unlock the request\n        try {\n\n            // subsequent requests will be stuck here until .go() is invoked\n            await ctx.sb.wait(waitKey)\n\n            // upsert the meta data for this user, we save location and user so this teammate can\n            // save a different favorite color at their \"other\" job\n            const meta = await ctx.sb.upsertMeta('favorite-color', ctx.request.body.favoriteColor, {\n                locationId: user.Location.id,\n                userId: user.User.id\n            })\n\n            // respond to the request\n            ctx.body = {\n                favoriteColor: meta.value\n            }\n\n        } catch(err) {\n\n            console.error(err)\n            ctx.throw('FAILED_TO_SAVE_FAVORITE_COLOR')\n\n        } finally() {\n            ctx.sb.go(waitKey)\n        }\n\n\n        // pass back to koa if no error\n        next()\n    })\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h4\" components={components} props={{\"id\":\"send-the-teammate-their-color-on-arrival\"}}>{`Send the teammate their color on arrival`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Or, you know, remind them to set one if they haven't.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-js\"}}>{`// server/events/did-enter.js\nmodule.exports = await (ctx, next) => {\n\n    // grab the event\n    const event = ctx.event\n\n    // only if a teammate enters\n    if (event.User.role === 'teammate') {\n\n        // stop Sprucebot from sending the default did-enter message\n        ctx.body = { preventDefault: true }\n        next() // respond immediately or Sprucebot will move on (no await)\n\n        // the favorite color (may be null)\n        await favoriteColor = await ctx.sb.meta('favorite-color', {\n            locationId: event.Location.id,\n            userId: event.User.id\n        })\n\n        // use lang to construct the message body\n        // we prefer to pass entire objects so lang can make some decisions\n        const body = ctx.utilities.lang.getText('didEnterMessage', { favoriteColor, event })\n\n        // fire the message\n        await ctx.sb.message(event.Location.id, event.User.id, body, {\n            linksToWebView: !favoriteColor // take them to set their color if they have not\n        })\n\n    } else {\n\n        // move on\n        await next()\n    }\n\n\n\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h4\" components={components} props={{\"id\":\"define-the-terms\"}}>{`Define the terms`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Notice we run a bit of logic in the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`didEnterMessage`}</MDXTag>{` term. Check `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"lang.md\"}}>{`lang`}</MDXTag>{` for more deets.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-js\"}}>{`// interface/lang/default.js\nmodule.exports = {\n    didEnterMessage: ({ favoriteColor, event }) =>\n        favoriteColor\n            ? \\`Welcome back \\${event.User.casualName}! Your favorite color is \\${\n                    favoriteColor.value\n              }. That's pretty alright. 👊🏼\\`\n            : \\`Hey \\${event.User.casualName}, why haven't you set your favorite color?\\`\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h4\" components={components} props={{\"id\":\"errors\"}}>{`Errors`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`We need to define our errors. This kit comes with some built in, but we will be adding our own.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-js\"}}>{`// config/errors.js\nmodule.exports = {\n    ...,\n    MISSING_FAVORITE_COLOR: {\n        code: 422,\n        status: 'failure',\n        reason: 'Missing parameters',\n        friendlyReason: 'You forgot to tell me your favorite color!'\n    },\n    FAILED_TO_SAVE_FAVORITE_COLOR: {\n        code: 500,\n        status: 'failure',\n        reason: 'Failed to save favorite color',\n        friendlyReason: 'Oh no! I couldn\\`t save your favorite color. I\\\\'m not sure what happened!'\n    }\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"whats-next\"}}>{`What's next?`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Cool, we're pretty ramped up on all the data passed to and from Sprucebot, lets dive into `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"events.md\"}}><MDXTag name=\"inlineCode\" components={components} parentName=\"a\">{`events`}</MDXTag></MDXTag>{`!`}</MDXTag>\n           </MDXTag>\n  }\n}\nMDXContent.isMDXComponent = true\n  "]}]}