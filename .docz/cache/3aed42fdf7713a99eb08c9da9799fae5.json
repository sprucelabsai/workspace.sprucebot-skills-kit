{"remainingRequest":"/Users/jeremytinianow/Sites/workspace.sprucebot-skills-kit/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/jeremytinianow/Sites/workspace.sprucebot-skills-kit/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/jeremytinianow/Sites/workspace.sprucebot-skills-kit/node_modules/source-map-loader/index.js!/Users/jeremytinianow/Sites/workspace.sprucebot-skills-kit/docs/spruce-skill/messages.md","dependencies":[{"path":"/Users/jeremytinianow/Sites/workspace.sprucebot-skills-kit/docs/spruce-skill/messages.md","mtime":1554307369210},{"path":"/Users/jeremytinianow/Sites/workspace.sprucebot-skills-kit/node_modules/cache-loader/dist/cjs.js","mtime":1554307451521},{"path":"/Users/jeremytinianow/Sites/workspace.sprucebot-skills-kit/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1554307451471},{"path":"/Users/jeremytinianow/Sites/workspace.sprucebot-skills-kit/node_modules/@mdx-js/loader/index.js","mtime":1554307451561},{"path":"/Users/jeremytinianow/Sites/workspace.sprucebot-skills-kit/node_modules/source-map-loader/index.js","mtime":1554307451815}],"contextDependencies":[],"result":["import _objectWithoutProperties from \"/Users/jeremytinianow/Sites/workspace.sprucebot-skills-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _classCallCheck from \"/Users/jeremytinianow/Sites/workspace.sprucebot-skills-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/jeremytinianow/Sites/workspace.sprucebot-skills-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/jeremytinianow/Sites/workspace.sprucebot-skills-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/jeremytinianow/Sites/workspace.sprucebot-skills-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/jeremytinianow/Sites/workspace.sprucebot-skills-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/jeremytinianow/Sites/workspace.sprucebot-skills-kit/docs/spruce-skill/messages.md\";\n\n(function () {\n  var enterModule = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).enterModule;\n  enterModule && enterModule(module);\n})();\n\nimport React from 'react';\nimport { MDXTag } from '@mdx-js/tag';\nvar layoutProps = {};\n\nvar MDXContent =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(MDXContent, _React$Component);\n\n  function MDXContent(props) {\n    var _this;\n\n    _classCallCheck(this, MDXContent);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MDXContent).call(this, props));\n    _this.layout = null;\n    return _this;\n  }\n\n  _createClass(MDXContent, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          components = _this$props.components,\n          props = _objectWithoutProperties(_this$props, [\"components\"]);\n\n      return React.createElement(MDXTag, {\n        name: \"wrapper\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 17\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"h1\",\n        components: components,\n        props: {\n          \"id\": \"messages\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20\n        },\n        __self: this\n      }, \"Messages\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21\n        },\n        __self: this\n      }, \"Messaging is how Sprucebot communicates with humans. Sprucebot currently has 2 means of messaging, \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21\n        },\n        __self: this\n      }, \"sms\"), \" and \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21\n        },\n        __self: this\n      }, \"push\"), \". Luckily, you don't have to worry about how the \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21\n        },\n        __self: this\n      }, \"message\"), \" is delivered, you just send it.\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22\n        },\n        __self: this\n      }, \"In order to keep Sprucebot spam free, \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22\n        },\n        __self: this\n      }, \"messages\"), \" are tied to a \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22\n        },\n        __self: this\n      }, \"Location\"), \" so we can ensure a physical visit has ocurred.\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23\n        },\n        __self: this\n      }, \"While sending a message to a \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23\n        },\n        __self: this\n      }, \"user\"), \" whose \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23\n        },\n        __self: this\n      }, \"status === 'offline'\"), \" is allowed, abuse of this feature will result in banishment... forever.\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24\n        },\n        __self: this\n      }, \"Sending a \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24\n        },\n        __self: this\n      }, \"message\"), \" to a \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24\n        },\n        __self: this\n      }, \"guest\"), \" should be a last resort. It is much better to send a message to a \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24\n        },\n        __self: this\n      }, \"teammate\"), \" to have them deliver the \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24\n        },\n        __self: this\n      }, \"message\"), \". It's the human-to-human contact of this type of interaction that makes what we are all doing so unique.\"), React.createElement(MDXTag, {\n        name: \"h2\",\n        components: components,\n        props: {\n          \"id\": \"api\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25\n        },\n        __self: this\n      }, \"API\"), React.createElement(MDXTag, {\n        name: \"pre\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"code\",\n        components: components,\n        parentName: \"pre\",\n        props: {\n          \"className\": \"language-js\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26\n        },\n        __self: this\n      }, \"// Send a message\\nconst message = await ctx.sb.message(locationId: UUID4, userId: UUID4, message:\\n String, {\\n    linksToWebView: Bool, // optional (true|false)\\n    webViewQueryData: Object, // optional (query string sent to skill when user taps it)\\n    payload: Object // optional, anything else you want to pass through to the messaging layer\\n});\\n\")), React.createElement(MDXTag, {\n        name: \"h3\",\n        components: components,\n        props: {\n          \"id\": \"push-notifications\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      }, \"Push Notifications\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }, \"The example message above can be received by the user as a push notification via the Spruce mobile app. Without any further customization, the user will receive just the \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }, \"message\"), \" string in the notification.\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }, \"If you want to customize the push notification, simply add a \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }, \"push\"), \" object to your message payload.\"), React.createElement(MDXTag, {\n        name: \"pre\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"code\",\n        components: components,\n        parentName: \"pre\",\n        props: {\n          \"className\": \"language-js\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }, \"// Basic notification\\nconst payload = {\\n    push: {\\n        title: String,// optional\\n        subtitle: String,// optional\\n        body: String// optional, will override `message` argument\\n    }\\n}\\n\")), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, \"Additionally, Spruce takes advantage of \\\"Rich Notification\\\" features on iOS.\"), React.createElement(MDXTag, {\n        name: \"pre\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"code\",\n        components: components,\n        parentName: \"pre\",\n        props: {\n          \"className\": \"language-js\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, \"// Send an image, brief video clip or audio clip\\n// Media notification example:\\nconst mediaPushPayload = {\\n    push: {\\n        title: \\\"VIP Alert\\\",\\n        body: \\\"Alex Martinez just arrived at 1234 Main St\\\",\\n        media: {\\n            url: \\\"https://images.unsplash.com/photo-1501625277806-e25bd4596da3\\\",\\n            fileName: \\\"1501625277806.png\\\"\\n        }\\n    }\\n}\\n\\n// Send a notification with customizable \\\"actions\\\"\\nconst actionsPushPayload = {\\n    push: {\\n        title: \\\"This has some actions\\\",\\n        body: \\\"Just press on this notification to see the actions\\\",\\n        actions: [\\n            {\\n                id: \\\"action_one\\\",\\n                label: \\\"Action One\\\",\\n                deepLink: \\\"link_to_app_screen\\\",// optional\\n                webUrl: \\\"link_to_web\\\"// optional, lower priority than `deepLink`\\n            },\\n            {\\n                id: \\\"action_two\\\",\\n                label: \\\"Action Two\\\",\\n                deepLink: \\\"link_to_app_screen\\\",// optional\\n                webUrl: \\\"link_to_web\\\"// optional, lower priority than `deepLink`\\n            }\\n        ]\\n    }\\n}\\n\\n// Send a message as a user in an \\\"iMessage\\\" style UI\\nconst messagePushPayload = {\\n    push: {\\n        title: \\\"Lindsay Brockling\\\",\\n        body: \\\"Thanks so much again for the great service today. I can't wait for my next visit!\\\",\\n        message: {\\n            user: {\\n                id: '00000001',\\n                name: 'Lindsay Brockling',\\n                profileImages: {\\n                    \\\"profile60@2x\\\": \\\"https://images.unsplash.com/photo-1489424731084-a5d8b219a5bb\\\"\\n                }\\n            },\\n            message: \\\"Thanks so much again for the great service today. I can't wait for my next visit!\\\"\\n        }\\n        \\n    }\\n}\\n\\n// Send a Card as a notification:\\nconst cardPushPayload = {\\n    push: {\\n        title: \\\"Card Notification\\\",\\n        card: {\\n            cardBuilder: {\\n                __typename: \\\"CardBuilder\\\",\\n                header: {\\n                    __typename: \\\"CardHeader\\\",\\n                    title: 'This is an example of a basic card.',\\n                    labelText: null,\\n                    labelIcon: null,\\n                    actions: null,\\n                    contextMenu: null\\n                },\\n                headerImage: null,\\n                onboarding: null,\\n                body: {\\n                    __typename: \\\"CardBodyType\\\",\\n                    isSectioned: false,\\n                    children: [\\n                        {\\n                            __typename: \\\"CardBodyText\\\",\\n                            type: 'text',\\n                            key: 'text',\\n                            text: 'Just a little bit of info for you just in case you needed it.',\\n                            props: null\\n                        }\\n                    ]\\n                },\\n                footer: {\\n                    __typename: \\\"CardFooterActions\\\",\\n                    actions: [\\n                        {\\n                            __typename: \\\"Button\\\",\\n                            key: 'key',\\n                            className: '',\\n                            kind: 'primary',\\n                            isSmall: false,\\n                            isFullWidth: false,\\n                            isLoading: false,\\n                            isIconOnly: false,\\n                            text: 'See the Event',\\n                            href: 'https://sprucebot.com',\\n                            type: null,\\n                            target: null,\\n                            icon: {\\n                                __typename: \\\"IconType\\\",\\n                                icon: 'foo',\\n                                isLineIcon: false,\\n                                className: ''\\n                            },\\n                            payload: {}\\n                        }\\n                    ]\\n                }\\n            }\\n        }\\n    }\\n}\\n\")), React.createElement(MDXTag, {\n        name: \"h2\",\n        components: components,\n        props: {\n          \"id\": \"gotchyas\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      }, \"Gotchya's\"), React.createElement(MDXTag, {\n        name: \"ul\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"li\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }, \"Messages\"), \" must be routed through a \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"li\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }, \"Location\"), \". This means there is no messaging a \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"li\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }, \"user\"), \" who has not visited that \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"li\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }, \"Location\"), \". #nooutbound\"), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      }, \"To send a card, all potential props in card builder MUST be declared, even if null. (On roadmap to fix this in API, though.)\"), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      }, \"Focus your messaging on in-store experiences.\"), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        },\n        __self: this\n      }, \"If you need to deliver a message to the \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"li\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        },\n        __self: this\n      }, \"guest\"), \", try notifying a \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"li\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        },\n        __self: this\n      }, \"teammate\"), \" so they can deliver the message.\"), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168\n        },\n        __self: this\n      }, \"If you must message the \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"li\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168\n        },\n        __self: this\n      }, \"guest\"), \", don't bombard them with messages (how much would you like to be spammed when you walk into a shop?)\"), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169\n        },\n        __self: this\n      }, \"DO NOT SPAM\")), React.createElement(MDXTag, {\n        name: \"h1\",\n        components: components,\n        props: {\n          \"id\": \"whats-next\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171\n        },\n        __self: this\n      }, \"What's next?\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172\n        },\n        __self: this\n      }, \"Ok, lets dive into \", React.createElement(MDXTag, {\n        name: \"a\",\n        components: components,\n        parentName: \"p\",\n        props: {\n          \"href\": \"errors.md\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172\n        },\n        __self: this\n      }, \"error reporting\"), \"!\"));\n    }\n  }, {\n    key: \"__reactstandin__regenerateByEval\",\n    // @ts-ignore\n    value: function __reactstandin__regenerateByEval(key, code) {\n      // @ts-ignore\n      this[key] = eval(code);\n    }\n  }]);\n\n  return MDXContent;\n}(React.Component);\n\nexport { MDXContent as default };\nMDXContent.isMDXComponent = true;\n;\n\n(function () {\n  var reactHotLoader = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).default;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(layoutProps, \"layoutProps\", \"/Users/jeremytinianow/Sites/workspace.sprucebot-skills-kit/docs/spruce-skill/messages.md\");\n  reactHotLoader.register(MDXContent, \"MDXContent\", \"/Users/jeremytinianow/Sites/workspace.sprucebot-skills-kit/docs/spruce-skill/messages.md\");\n})();\n\n;\n\n(function () {\n  var leaveModule = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).leaveModule;\n  leaveModule && leaveModule(module);\n})();",{"version":3,"sources":["/Users/jeremytinianow/Sites/workspace.sprucebot-skills-kit/docs/spruce-skill/messages.md"],"names":["React","MDXTag","layoutProps","MDXContent","props","layout","components","Component","isMDXComponent"],"mappings":"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","sourcesContent":["\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  \n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}><MDXTag name=\"h1\" components={components} props={{\"id\":\"messages\"}}>{`Messages`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Messaging is how Sprucebot communicates with humans. Sprucebot currently has 2 means of messaging, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`sms`}</MDXTag>{` and `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`push`}</MDXTag>{`. Luckily, you don't have to worry about how the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`message`}</MDXTag>{` is delivered, you just send it.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`In order to keep Sprucebot spam free, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`messages`}</MDXTag>{` are tied to a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Location`}</MDXTag>{` so we can ensure a physical visit has ocurred.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`While sending a message to a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`user`}</MDXTag>{` whose `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`status === 'offline'`}</MDXTag>{` is allowed, abuse of this feature will result in banishment... forever.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Sending a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`message`}</MDXTag>{` to a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`guest`}</MDXTag>{` should be a last resort. It is much better to send a message to a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`teammate`}</MDXTag>{` to have them deliver the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`message`}</MDXTag>{`. It's the human-to-human contact of this type of interaction that makes what we are all doing so unique.`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"api\"}}>{`API`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-js\"}}>{`// Send a message\nconst message = await ctx.sb.message(locationId: UUID4, userId: UUID4, message:\n String, {\n    linksToWebView: Bool, // optional (true|false)\n    webViewQueryData: Object, // optional (query string sent to skill when user taps it)\n    payload: Object // optional, anything else you want to pass through to the messaging layer\n});\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"push-notifications\"}}>{`Push Notifications`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`The example message above can be received by the user as a push notification via the Spruce mobile app. Without any further customization, the user will receive just the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`message`}</MDXTag>{` string in the notification.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`If you want to customize the push notification, simply add a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`push`}</MDXTag>{` object to your message payload.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-js\"}}>{`// Basic notification\nconst payload = {\n    push: {\n        title: String,// optional\n        subtitle: String,// optional\n        body: String// optional, will override \\`message\\` argument\n    }\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`Additionally, Spruce takes advantage of \"Rich Notification\" features on iOS.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-js\"}}>{`// Send an image, brief video clip or audio clip\n// Media notification example:\nconst mediaPushPayload = {\n    push: {\n        title: \"VIP Alert\",\n        body: \"Alex Martinez just arrived at 1234 Main St\",\n        media: {\n            url: \"https://images.unsplash.com/photo-1501625277806-e25bd4596da3\",\n            fileName: \"1501625277806.png\"\n        }\n    }\n}\n\n// Send a notification with customizable \"actions\"\nconst actionsPushPayload = {\n    push: {\n        title: \"This has some actions\",\n        body: \"Just press on this notification to see the actions\",\n        actions: [\n            {\n                id: \"action_one\",\n                label: \"Action One\",\n                deepLink: \"link_to_app_screen\",// optional\n                webUrl: \"link_to_web\"// optional, lower priority than \\`deepLink\\`\n            },\n            {\n                id: \"action_two\",\n                label: \"Action Two\",\n                deepLink: \"link_to_app_screen\",// optional\n                webUrl: \"link_to_web\"// optional, lower priority than \\`deepLink\\`\n            }\n        ]\n    }\n}\n\n// Send a message as a user in an \"iMessage\" style UI\nconst messagePushPayload = {\n    push: {\n        title: \"Lindsay Brockling\",\n        body: \"Thanks so much again for the great service today. I can't wait for my next visit!\",\n        message: {\n            user: {\n                id: '00000001',\n                name: 'Lindsay Brockling',\n                profileImages: {\n                    \"profile60@2x\": \"https://images.unsplash.com/photo-1489424731084-a5d8b219a5bb\"\n                }\n            },\n            message: \"Thanks so much again for the great service today. I can't wait for my next visit!\"\n        }\n        \n    }\n}\n\n// Send a Card as a notification:\nconst cardPushPayload = {\n    push: {\n        title: \"Card Notification\",\n        card: {\n            cardBuilder: {\n                __typename: \"CardBuilder\",\n                header: {\n                    __typename: \"CardHeader\",\n                    title: 'This is an example of a basic card.',\n                    labelText: null,\n                    labelIcon: null,\n                    actions: null,\n                    contextMenu: null\n                },\n                headerImage: null,\n                onboarding: null,\n                body: {\n                    __typename: \"CardBodyType\",\n                    isSectioned: false,\n                    children: [\n                        {\n                            __typename: \"CardBodyText\",\n                            type: 'text',\n                            key: 'text',\n                            text: 'Just a little bit of info for you just in case you needed it.',\n                            props: null\n                        }\n                    ]\n                },\n                footer: {\n                    __typename: \"CardFooterActions\",\n                    actions: [\n                        {\n                            __typename: \"Button\",\n                            key: 'key',\n                            className: '',\n                            kind: 'primary',\n                            isSmall: false,\n                            isFullWidth: false,\n                            isLoading: false,\n                            isIconOnly: false,\n                            text: 'See the Event',\n                            href: 'https://sprucebot.com',\n                            type: null,\n                            target: null,\n                            icon: {\n                                __typename: \"IconType\",\n                                icon: 'foo',\n                                isLineIcon: false,\n                                className: ''\n                            },\n                            payload: {}\n                        }\n                    ]\n                }\n            }\n        }\n    }\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"gotchyas\"}}>{`Gotchya's`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`Messages`}</MDXTag>{` must be routed through a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`Location`}</MDXTag>{`. This means there is no messaging a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`user`}</MDXTag>{` who has not visited that `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`Location`}</MDXTag>{`. #nooutbound`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`To send a card, all potential props in card builder MUST be declared, even if null. (On roadmap to fix this in API, though.)`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Focus your messaging on in-store experiences.`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`If you need to deliver a message to the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`guest`}</MDXTag>{`, try notifying a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`teammate`}</MDXTag>{` so they can deliver the message.`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`If you must message the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`guest`}</MDXTag>{`, don't bombard them with messages (how much would you like to be spammed when you walk into a shop?)`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`DO NOT SPAM`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"whats-next\"}}>{`What's next?`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Ok, lets dive into `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"errors.md\"}}>{`error reporting`}</MDXTag>{`!`}</MDXTag>\n           </MDXTag>\n  }\n}\nMDXContent.isMDXComponent = true\n  "]}]}