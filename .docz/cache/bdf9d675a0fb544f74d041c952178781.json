{"remainingRequest":"/Users/jeremytinianow/Sites/workspace.sprucebot-skills-kit/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/jeremytinianow/Sites/workspace.sprucebot-skills-kit/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/jeremytinianow/Sites/workspace.sprucebot-skills-kit/node_modules/source-map-loader/index.js!/Users/jeremytinianow/Sites/workspace.sprucebot-skills-kit/docs/spruce-skill/api.md","dependencies":[{"path":"/Users/jeremytinianow/Sites/workspace.sprucebot-skills-kit/docs/spruce-skill/api.md","mtime":1554307369207},{"path":"/Users/jeremytinianow/Sites/workspace.sprucebot-skills-kit/node_modules/cache-loader/dist/cjs.js","mtime":1554307451521},{"path":"/Users/jeremytinianow/Sites/workspace.sprucebot-skills-kit/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1554307451471},{"path":"/Users/jeremytinianow/Sites/workspace.sprucebot-skills-kit/node_modules/@mdx-js/loader/index.js","mtime":1554307451561},{"path":"/Users/jeremytinianow/Sites/workspace.sprucebot-skills-kit/node_modules/source-map-loader/index.js","mtime":1554307451815}],"contextDependencies":[],"result":["import _objectWithoutProperties from \"/Users/jeremytinianow/Sites/workspace.sprucebot-skills-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _classCallCheck from \"/Users/jeremytinianow/Sites/workspace.sprucebot-skills-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/jeremytinianow/Sites/workspace.sprucebot-skills-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/jeremytinianow/Sites/workspace.sprucebot-skills-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/jeremytinianow/Sites/workspace.sprucebot-skills-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/jeremytinianow/Sites/workspace.sprucebot-skills-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/jeremytinianow/Sites/workspace.sprucebot-skills-kit/docs/spruce-skill/api.md\";\n\n(function () {\n  var enterModule = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).enterModule;\n  enterModule && enterModule(module);\n})();\n\nimport React from 'react';\nimport { MDXTag } from '@mdx-js/tag';\nvar layoutProps = {};\n\nvar MDXContent =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(MDXContent, _React$Component);\n\n  function MDXContent(props) {\n    var _this;\n\n    _classCallCheck(this, MDXContent);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MDXContent).call(this, props));\n    _this.layout = null;\n    return _this;\n  }\n\n  _createClass(MDXContent, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          components = _this$props.components,\n          props = _objectWithoutProperties(_this$props, [\"components\"]);\n\n      return React.createElement(MDXTag, {\n        name: \"wrapper\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 17\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"h1\",\n        components: components,\n        props: {\n          \"id\": \"sprucebot-api\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20\n        },\n        __self: this\n      }, \"Sprucebot API\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21\n        },\n        __self: this\n      }, \"This kit uses \", React.createElement(MDXTag, {\n        name: \"a\",\n        components: components,\n        parentName: \"p\",\n        props: {\n          \"href\": \"https://github.com/sprucelabsai/spruce-node\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"a\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21\n        },\n        __self: this\n      }, \"spruce-node\")), \" to communicate with Sprucebot. \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21\n        },\n        __self: this\n      }, \"sb\"), \" is only available on the \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21\n        },\n        __self: this\n      }, \"server\"), \" via \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21\n        },\n        __self: this\n      }, \"ctx\"), \".\"), React.createElement(MDXTag, {\n        name: \"h2\",\n        components: components,\n        props: {\n          \"id\": \"user-api\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22\n        },\n        __self: this\n      }, \"User API\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23\n        },\n        __self: this\n      }, \"Learn about the \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23\n        },\n        __self: this\n      }, \"user\"), \" object \", React.createElement(MDXTag, {\n        name: \"a\",\n        components: components,\n        parentName: \"p\",\n        props: {\n          \"href\": \"user.md\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23\n        },\n        __self: this\n      }, \"here\"), \".\"), React.createElement(MDXTag, {\n        name: \"ul\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"li\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25\n        },\n        __self: this\n      }, \"user\"), \" locationId, userId\"), React.createElement(MDXTag, {\n        name: \"li\",\n        components: components,\n        parentName: \"ul\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"li\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26\n        },\n        __self: this\n      }, \"users\"))), React.createElement(MDXTag, {\n        name: \"pre\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"code\",\n        components: components,\n        parentName: \"pre\",\n        props: {\n          \"className\": \"language-js\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28\n        },\n        __self: this\n      }, \"  // USER API\\n\\n// Fetch a single user\\nconst guest = await ctx.sb.user(locationId: UUID4, userId: UUID4)\\n\\nconsole.log(guest) // {User} or null\\n\\n// Fetch a bunch of users\\nconst teammates = await ctx.sb.users(locationId: UUID4, {\\n    role: String, // optional (owner|teammate|guest|ownerteammate)\\n    status: String, // optional (online|offline)\\n    page: Number, // optional (defaults to 0)\\n    limit: Number, // optional (default to 10, max 200)\\n})\\n\\nconsole.log(teammates) // [{User},{User},{User}] or []\\n\\n// Update a user\\nconst guest = await ctx.sb.updateUser(userId: UUID4, {\\n    firstName: String\\n})\\n\\nconsole.log(guest) // {User}\\n\")), React.createElement(MDXTag, {\n        name: \"h2\",\n        components: components,\n        props: {\n          \"id\": \"location-api\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, \"Location API\"), React.createElement(MDXTag, {\n        name: \"pre\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"code\",\n        components: components,\n        parentName: \"pre\",\n        props: {\n          \"className\": \"language-js\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, \"// Fetch a single location\\nconst location = await ctx.sb.location(locationId: UUID4)\\n\\nconsole.log(location) // {} or null\\n\\n// All locations where this skill is installed\\nconst locations = await ctx.sb.locations({\\n    page: Number, // optional (defaults to 0)\\n    limit: Number // optional (defaults to 10, max 200)\\n})\\n\\nconsole.log(locations) // [{},{}] or []\\n\")), React.createElement(MDXTag, {\n        name: \"h2\",\n        components: components,\n        props: {\n          \"id\": \"messaging-api\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, \"Messaging API\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, \"Good stuff about messaging \", React.createElement(MDXTag, {\n        name: \"a\",\n        components: components,\n        parentName: \"p\",\n        props: {\n          \"href\": \"messages.md\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, \"here\"), \".\"), React.createElement(MDXTag, {\n        name: \"pre\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"code\",\n        components: components,\n        parentName: \"pre\",\n        props: {\n          \"className\": \"language-js\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, \"// Send a message\\nconst message = await ctx.sb.message(locationId: UUID4, userId: UUID4, message:\\n String, {\\n    linksToWebView: Bool, // optional (true|false)\\n    webViewQueryData: Object, // optional (query string sent to skill when user taps it)\\n    payload: Object // optional, anything else you want to pass through to the messaging layer\\n});\\n\")), React.createElement(MDXTag, {\n        name: \"h2\",\n        components: components,\n        props: {\n          \"id\": \"meta-api\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, \"Meta API\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, \"Learn about the goodness \", React.createElement(MDXTag, {\n        name: \"a\",\n        components: components,\n        parentName: \"p\",\n        props: {\n          \"href\": \"meta.md\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, \"here\"), \".\"), React.createElement(MDXTag, {\n        name: \"pre\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"code\",\n        components: components,\n        parentName: \"pre\",\n        props: {\n          \"className\": \"language-js\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, \"// fetch single Meta (returns first match)\\nlet response = await ctx.sb.meta(key: String, {\\n    locationId: UUID4, // optional\\n    userId: UUID4, // optional (requires locationId to be set)\\n    sortBy: String, // createdAt|updatedAt\\n    order: String // ASC|DESC (defaults to DESC)\\n})\\n\\nconsole.log(response) // {Meta} or null\\n\\n// fetch many Metas\\nlet response = await ctx.sb.metas({\\n    locationId: UUID4, // optional\\n    userId: UUID4, // optional (requires locationId to be set)\\n    value: *, // optional (can search against key in object)\\n    sortBy: String, // createdAt|updatedAt,\\n    order: String, // ASC|DESC (defaults to DESC)\\n    key: String, // optional\\n    page: Number, // optional (defaults to 0)\\n    limit: Number // optional (defaults to 10, max 200)\\n})\\n\\nconsole.log(response) // [{Meta}, {Meta}, {Meta}] or []\\n\\n// create Meta\\nlet response = await ctx.sb.createMeta(key: String, value: *, {\\n    locationId: UUID4, // optional\\n    userId: UUID4, // optional (requires locationId to be set)\\n})\\n\\nconsole.log(response) // {Meta}\\n\\n// create Meta if matching one does not exist\\nlet response = await ctx.sb.metaOrCreate(key: String, value: *, {\\n    locationId: UUID4, // optional\\n    userId: UUID4, // optional (requires locationId to be set)\\n});\\n\\nconsole.log(response) // {Meta}\\n\\n// create Meta if no match found, update any matches found\\nlet response = await ctx.sb.upsertMeta(key: String, value: *, {\\n    locationId: UUID4, // optional\\n    userId: UUID4, // optional (requires locationId to be set)\\n});\\n\\nconsole.log(response) // {Meta}\\n\\n// delete\\nlet response = await ctx.sb.deleteMeta(id: UUID4)\\n\\nconsole.log(response) // {??}\\n\")), React.createElement(MDXTag, {\n        name: \"h2\",\n        components: components,\n        props: {\n          \"id\": \"mutex-api\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }, \"Mutex API\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, \"Any operations that are prone to race conditions, such as \\\"check if a record exists, if not, create it\\\", need a way to block to ensure 2 simultaneous requests don't create duplicate records.\"), React.createElement(MDXTag, {\n        name: \"pre\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"code\",\n        components: components,\n        parentName: \"pre\",\n        props: {\n          \"className\": \"language-js\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }, \"const waitKey = `long-operation-by-location-${locationId}`;\\n\\ntry {\\n    // stop many requests from causing a race condition\\n    await ctx.sb.wait(waitKey)\\n\\n    ...\\n\\n\\n} catch (err) {\\n    console.error(err)\\n    throw err\\n} finally {\\n    // no matter what, don't forget to stop waiting\\n    ctx.sb.go(waitKey)\\n}\\n\")), React.createElement(MDXTag, {\n        name: \"h1\",\n        components: components,\n        props: {\n          \"id\": \"whats-next\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      }, \"What's next?\"), React.createElement(MDXTag, {\n        name: \"p\",\n        components: components,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      }, \"Now that you've got a good overview of the \", React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"p\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      }, \"api\"), \", lets dive deeper into the \", React.createElement(MDXTag, {\n        name: \"a\",\n        components: components,\n        parentName: \"p\",\n        props: {\n          \"href\": \"user.md\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      }, React.createElement(MDXTag, {\n        name: \"inlineCode\",\n        components: components,\n        parentName: \"a\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      }, \"user\"), \" object\"), \" object.\"));\n    }\n  }, {\n    key: \"__reactstandin__regenerateByEval\",\n    // @ts-ignore\n    value: function __reactstandin__regenerateByEval(key, code) {\n      // @ts-ignore\n      this[key] = eval(code);\n    }\n  }]);\n\n  return MDXContent;\n}(React.Component);\n\nexport { MDXContent as default };\nMDXContent.isMDXComponent = true;\n;\n\n(function () {\n  var reactHotLoader = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).default;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(layoutProps, \"layoutProps\", \"/Users/jeremytinianow/Sites/workspace.sprucebot-skills-kit/docs/spruce-skill/api.md\");\n  reactHotLoader.register(MDXContent, \"MDXContent\", \"/Users/jeremytinianow/Sites/workspace.sprucebot-skills-kit/docs/spruce-skill/api.md\");\n})();\n\n;\n\n(function () {\n  var leaveModule = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).leaveModule;\n  leaveModule && leaveModule(module);\n})();",{"version":3,"sources":["/Users/jeremytinianow/Sites/workspace.sprucebot-skills-kit/docs/spruce-skill/api.md"],"names":["React","MDXTag","layoutProps","MDXContent","props","layout","components","Component","isMDXComponent"],"mappings":"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","sourcesContent":["\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  \n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}><MDXTag name=\"h1\" components={components} props={{\"id\":\"sprucebot-api\"}}>{`Sprucebot API`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This kit uses `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://github.com/sprucelabsai/spruce-node\"}}><MDXTag name=\"inlineCode\" components={components} parentName=\"a\">{`spruce-node`}</MDXTag></MDXTag>{` to communicate with Sprucebot. `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`sb`}</MDXTag>{` is only available on the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`server`}</MDXTag>{` via `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`ctx`}</MDXTag>{`.`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"user-api\"}}>{`User API`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Learn about the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`user`}</MDXTag>{` object `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"user.md\"}}>{`here`}</MDXTag>{`.`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`user`}</MDXTag>{` locationId, userId`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`users`}</MDXTag></MDXTag>\n</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-js\"}}>{`  // USER API\n\n// Fetch a single user\nconst guest = await ctx.sb.user(locationId: UUID4, userId: UUID4)\n\nconsole.log(guest) // {User} or null\n\n// Fetch a bunch of users\nconst teammates = await ctx.sb.users(locationId: UUID4, {\n    role: String, // optional (owner|teammate|guest|ownerteammate)\n    status: String, // optional (online|offline)\n    page: Number, // optional (defaults to 0)\n    limit: Number, // optional (default to 10, max 200)\n})\n\nconsole.log(teammates) // [{User},{User},{User}] or []\n\n// Update a user\nconst guest = await ctx.sb.updateUser(userId: UUID4, {\n    firstName: String\n})\n\nconsole.log(guest) // {User}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"location-api\"}}>{`Location API`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-js\"}}>{`// Fetch a single location\nconst location = await ctx.sb.location(locationId: UUID4)\n\nconsole.log(location) // {} or null\n\n// All locations where this skill is installed\nconst locations = await ctx.sb.locations({\n    page: Number, // optional (defaults to 0)\n    limit: Number // optional (defaults to 10, max 200)\n})\n\nconsole.log(locations) // [{},{}] or []\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"messaging-api\"}}>{`Messaging API`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Good stuff about messaging `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"messages.md\"}}>{`here`}</MDXTag>{`.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-js\"}}>{`// Send a message\nconst message = await ctx.sb.message(locationId: UUID4, userId: UUID4, message:\n String, {\n    linksToWebView: Bool, // optional (true|false)\n    webViewQueryData: Object, // optional (query string sent to skill when user taps it)\n    payload: Object // optional, anything else you want to pass through to the messaging layer\n});\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"meta-api\"}}>{`Meta API`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Learn about the goodness `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"meta.md\"}}>{`here`}</MDXTag>{`.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-js\"}}>{`// fetch single Meta (returns first match)\nlet response = await ctx.sb.meta(key: String, {\n    locationId: UUID4, // optional\n    userId: UUID4, // optional (requires locationId to be set)\n    sortBy: String, // createdAt|updatedAt\n    order: String // ASC|DESC (defaults to DESC)\n})\n\nconsole.log(response) // {Meta} or null\n\n// fetch many Metas\nlet response = await ctx.sb.metas({\n    locationId: UUID4, // optional\n    userId: UUID4, // optional (requires locationId to be set)\n    value: *, // optional (can search against key in object)\n    sortBy: String, // createdAt|updatedAt,\n    order: String, // ASC|DESC (defaults to DESC)\n    key: String, // optional\n    page: Number, // optional (defaults to 0)\n    limit: Number // optional (defaults to 10, max 200)\n})\n\nconsole.log(response) // [{Meta}, {Meta}, {Meta}] or []\n\n// create Meta\nlet response = await ctx.sb.createMeta(key: String, value: *, {\n    locationId: UUID4, // optional\n    userId: UUID4, // optional (requires locationId to be set)\n})\n\nconsole.log(response) // {Meta}\n\n// create Meta if matching one does not exist\nlet response = await ctx.sb.metaOrCreate(key: String, value: *, {\n    locationId: UUID4, // optional\n    userId: UUID4, // optional (requires locationId to be set)\n});\n\nconsole.log(response) // {Meta}\n\n// create Meta if no match found, update any matches found\nlet response = await ctx.sb.upsertMeta(key: String, value: *, {\n    locationId: UUID4, // optional\n    userId: UUID4, // optional (requires locationId to be set)\n});\n\nconsole.log(response) // {Meta}\n\n// delete\nlet response = await ctx.sb.deleteMeta(id: UUID4)\n\nconsole.log(response) // {??}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"mutex-api\"}}>{`Mutex API`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Any operations that are prone to race conditions, such as \"check if a record exists, if not, create it\", need a way to block to ensure 2 simultaneous requests don't create duplicate records.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-js\"}}>{`const waitKey = \\`long-operation-by-location-\\${locationId}\\`;\n\ntry {\n    // stop many requests from causing a race condition\n    await ctx.sb.wait(waitKey)\n\n    ...\n\n\n} catch (err) {\n    console.error(err)\n    throw err\n} finally {\n    // no matter what, don't forget to stop waiting\n    ctx.sb.go(waitKey)\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"whats-next\"}}>{`What's next?`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Now that you've got a good overview of the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`api`}</MDXTag>{`, lets dive deeper into the `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"user.md\"}}><MDXTag name=\"inlineCode\" components={components} parentName=\"a\">{`user`}</MDXTag>{` object`}</MDXTag>{` object.`}</MDXTag>\n           </MDXTag>\n  }\n}\nMDXContent.isMDXComponent = true\n  "]}]}