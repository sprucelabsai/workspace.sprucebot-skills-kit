$breakpoints-map: (
	'small': 500px,
	'medium': 750px,
	'large': 1000px,
	'x-large': 1200px
);

@mixin gt($size) {
	@if map-has-key($breakpoints-map, $size) {
		@media screen and (min-width: map-get($breakpoints-map, $size)) {
			@content;
		}
	} @else {
		@media screen and (min-width: $size) {
			@content;
		}
	}
}

/**
Spacing
*/

$spacing-map: (
	'none': 0,
	'extra-tight': 0.25rem,
	'tight': 0.5rem,
	'base': 1rem,
	'loose': 1.25rem,
	'extra-loose': 2rem
);

@function spacing($size: 'base') {
	@if map-has-key($spacing-map, $size) {
		@return map-get($spacing-map, $size);
	} @else {
		@warn 'This is not a step of the Heartwood Spacing Scale!';
	}
}

/**
Layout Width
*/
$layout-width-map: (
	'primary': (
		min: rem(480),
		max: rem(640)
	),
	'secondary': (
		min: rem(240),
		max: rem(320)
	)
);

@function layout-width($name, $value: null) {
	@if map-has-key(map-get($layout-width-map, $name), $value) {
		@return map-get(map-get($layout-width-map, $name), $value);
	} @else {
		@warn 'This is not a valid Heartwood Layout Width!';
	}
}
