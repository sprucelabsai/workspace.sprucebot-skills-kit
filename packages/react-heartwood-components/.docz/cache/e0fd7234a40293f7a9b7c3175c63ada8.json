{"remainingRequest":"/Users/jerms/Sites/workspace.sprucebot-skills-kit/node_modules/docz/node_modules/babel-loader/lib/index.js?{\"presets\":[\"@babel/preset-env\",\"@babel/preset-react\",\"@babel/preset-flow\",[\"/Users/jerms/Sites/workspace.sprucebot-skills-kit/node_modules/docz/node_modules/babel-preset-docz/dist/index.js\",{\"flow\":true,\"typescript\":false,\"parseProps\":true}]],\"plugins\":[\"@babel/plugin-transform-runtime\",\"@babel/plugin-proposal-object-rest-spread\",\"@babel/plugin-transform-flow-strip-types\",\"@babel/plugin-syntax-dynamic-import\",\"@babel/plugin-syntax-import-meta\",\"@babel/plugin-proposal-class-properties\",\"@babel/plugin-proposal-json-strings\",[\"@babel/plugin-proposal-decorators\",{\"legacy\":true}],\"@babel/plugin-proposal-function-sent\",\"@babel/plugin-proposal-export-namespace-from\",\"@babel/plugin-proposal-numeric-separator\",\"@babel/plugin-proposal-throw-expressions\",\"@babel/plugin-proposal-export-default-from\",\"@babel/plugin-proposal-logical-assignment-operators\",\"@babel/plugin-proposal-optional-chaining\",[\"@babel/plugin-proposal-pipeline-operator\",{\"proposal\":\"minimal\"}],\"@babel/plugin-proposal-nullish-coalescing-operator\",\"@babel/plugin-proposal-do-expressions\",\"@babel/plugin-proposal-function-bind\",[\"inline-react-svg\",{\"svgo\":{\"plugins\":[{\"removeAttrs\":{\"attrs\":[\"stroke\",\"fill\"]}}]}}],[\"/Users/jerms/Sites/workspace.sprucebot-skills-kit/node_modules/docz-utils/lib/named-asset-import.js\",{\"loaderMap\":{\"svg\":{\"ReactComponent\":\"@svgr/webpack?-prettier,-svgo![path]\"}}}],\"/Users/jerms/Sites/workspace.sprucebot-skills-kit/node_modules/docz/node_modules/react-hot-loader/babel.js\"],\"ignore\":[\"node_modules\"],\"babelrc\":false,\"cacheCompression\":false,\"compact\":false}!/Users/jerms/Sites/workspace.sprucebot-skills-kit/packages/react-heartwood-components/src/components/Button/Button.js","dependencies":[{"path":"/Users/jerms/Sites/workspace.sprucebot-skills-kit/packages/react-heartwood-components/src/components/Button/Button.js","mtime":1549758964822},{"path":"/Users/jerms/Sites/workspace.sprucebot-skills-kit/node_modules/docz/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jerms/Sites/workspace.sprucebot-skills-kit/node_modules/docz/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/jerms/Sites/workspace.sprucebot-skills-kit/packages/react-heartwood-components/src/components/Button/Button.js\";\n\n(function () {\n  var enterModule = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).enterModule;\n  enterModule && enterModule(module);\n})();\n\nimport React, { Fragment } from 'react';\nimport cx from 'classnames';\nimport Loader from '../Loader/Loader';\nimport Icon from '../Icon/Icon';\nimport BasicAnchor from '../_utilities/Anchor';\n\nvar Button = function Button(props) {\n  var className = props.className,\n      kind = props.kind,\n      isSmall = props.isSmall,\n      isFullWidth = props.isFullWidth,\n      isLoading = props.isLoading,\n      isIconOnly = props.isIconOnly,\n      text = props.text,\n      href = props.href,\n      icon = props.icon,\n      type = props.type,\n      onClick = props.onClick,\n      _props$AnchorComponen = props.AnchorComponent,\n      AnchorComponent = _props$AnchorComponen === void 0 ? BasicAnchor : _props$AnchorComponen,\n      children = props.children,\n      rest = _objectWithoutProperties(props, [\"className\", \"kind\", \"isSmall\", \"isFullWidth\", \"isLoading\", \"isIconOnly\", \"text\", \"href\", \"icon\", \"type\", \"onClick\", \"AnchorComponent\", \"children\"]);\n\n  var btnClass = cx(className, {\n    btn: true,\n    'btn-primary': kind === 'primary',\n    'btn-secondary': kind === 'secondary',\n    'btn-caution': kind === 'caution',\n    'btn-simple': kind === 'simple',\n    'btn-full-width': isFullWidth,\n    'btn--loading': isLoading,\n    'btn-small': isSmall,\n    'btn-icon-only': !children && !text || isIconOnly\n  });\n  var textClass = cx('btn__text', {\n    'visually-hidden': isIconOnly\n  });\n\n  var handleClick = function handleClick(e) {\n    e.currentTarget.blur();\n\n    if (onClick) {\n      onClick(e, props.payload);\n    }\n  };\n\n  var Inner = function Inner() {\n    return React.createElement(\"span\", {\n      className: \"btn__inner\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, children ? children : React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, icon && (icon.customIcon || icon.name) && React.createElement(\"span\", {\n      className: \"btn__icon-wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      customIcon: icon.customIcon,\n      icon: icon.name,\n      isLineIcon: icon.isLineIcon,\n      className: cx({\n        btn__icon: true,\n        'btn__line-icon': icon.isLineIcon\n      }, icon.className),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    })), text && React.createElement(\"span\", {\n      className: textClass,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, text), isLoading && React.createElement(Loader, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    })));\n  };\n\n  var button = React.createElement(\"button\", Object.assign({\n    className: btnClass,\n    type: type,\n    onClick: handleClick\n  }, rest, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }), React.createElement(Inner, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  }));\n  var anchor = React.createElement(AnchorComponent, Object.assign({\n    href: href,\n    className: btnClass\n  }, rest, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  }), React.createElement(Inner, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }));\n\n  if (!children && !text && !icon) {\n    // TODO: Handle Logging\n    // console.error(\n    // \t'<Button /> must have text, icon, or both. Please check the props your passing.'\n    // )\n    return null;\n  }\n\n  return href ? anchor : button;\n};\n\nButton.defaultProps = {\n  className: '',\n  kind: '',\n  isSmall: false,\n  isFullWidth: false,\n  isLoading: false,\n  isIconOnly: false,\n  text: '',\n  href: '',\n  icon: null,\n  type: 'button',\n  onClick: function onClick() {\n    return null;\n  }\n};\nvar _default = Button;\nexport default _default;\n;\n\n(function () {\n  var reactHotLoader = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).default;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(Button, \"Button\", \"/Users/jerms/Sites/workspace.sprucebot-skills-kit/packages/react-heartwood-components/src/components/Button/Button.js\");\n  reactHotLoader.register(_default, \"default\", \"/Users/jerms/Sites/workspace.sprucebot-skills-kit/packages/react-heartwood-components/src/components/Button/Button.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).leaveModule;\n  leaveModule && leaveModule(module);\n})();\n\nButton.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"Button\",\n  \"props\": {\n    \"className\": {\n      \"defaultValue\": {\n        \"value\": \"''\",\n        \"computed\": false\n      },\n      \"required\": false,\n      \"flowType\": {\n        \"name\": \"string\"\n      },\n      \"description\": \"Optional class to add to the button.\"\n    },\n    \"kind\": {\n      \"defaultValue\": {\n        \"value\": \"''\",\n        \"computed\": false\n      },\n      \"required\": false,\n      \"flowType\": {\n        \"name\": \"string\"\n      },\n      \"description\": \"Sets the visual appearance of the button. May be primary, secondary, simple, or caution.\"\n    },\n    \"isSmall\": {\n      \"defaultValue\": {\n        \"value\": \"false\",\n        \"computed\": false\n      },\n      \"required\": false,\n      \"flowType\": {\n        \"name\": \"boolean\"\n      },\n      \"description\": \"Set true to make the button less tall.\"\n    },\n    \"isFullWidth\": {\n      \"defaultValue\": {\n        \"value\": \"false\",\n        \"computed\": false\n      },\n      \"required\": false,\n      \"flowType\": {\n        \"name\": \"boolean\"\n      },\n      \"description\": \"Set true to make the button fill its parent's width.\"\n    },\n    \"isLoading\": {\n      \"defaultValue\": {\n        \"value\": \"false\",\n        \"computed\": false\n      },\n      \"required\": false,\n      \"flowType\": {\n        \"name\": \"boolean\"\n      },\n      \"description\": \"Set true to hide any text or icon in the button and show a loader instead.\"\n    },\n    \"isIconOnly\": {\n      \"defaultValue\": {\n        \"value\": \"false\",\n        \"computed\": false\n      },\n      \"required\": false,\n      \"flowType\": {\n        \"name\": \"boolean\"\n      },\n      \"description\": \"Set true to hide any text in the button. Text should still be provided for accessibility.\"\n    },\n    \"text\": {\n      \"defaultValue\": {\n        \"value\": \"''\",\n        \"computed\": false\n      },\n      \"required\": false,\n      \"flowType\": {\n        \"name\": \"string\"\n      },\n      \"description\": \"Text for the button.\"\n    },\n    \"href\": {\n      \"defaultValue\": {\n        \"value\": \"''\",\n        \"computed\": false\n      },\n      \"required\": false,\n      \"flowType\": {\n        \"name\": \"string\"\n      },\n      \"description\": \"Will render a link. May be relative or absolute.\"\n    },\n    \"icon\": {\n      \"defaultValue\": {\n        \"value\": \"null\",\n        \"computed\": false\n      },\n      \"required\": false,\n      \"flowType\": {\n        \"name\": \"union\",\n        \"raw\": \"Node | IconProps\",\n        \"elements\": [{\n          \"name\": \"Node\"\n        }, {\n          \"name\": \"IconProps\"\n        }]\n      },\n      \"description\": \"Icon for the button.\"\n    },\n    \"type\": {\n      \"defaultValue\": {\n        \"value\": \"'button'\",\n        \"computed\": false\n      },\n      \"required\": false,\n      \"flowType\": {\n        \"name\": \"string\"\n      },\n      \"description\": \"Type attribute for HTML button element. Defaults to 'button'.\"\n    },\n    \"onClick\": {\n      \"defaultValue\": {\n        \"value\": \"() => null\",\n        \"computed\": false\n      },\n      \"required\": false,\n      \"flowType\": {\n        \"name\": \"Function\"\n      },\n      \"description\": \"Click handler.\"\n    },\n    \"children\": {\n      \"required\": false,\n      \"flowType\": {\n        \"name\": \"Node\"\n      },\n      \"description\": \"Optional children passed into button\"\n    },\n    \"payload\": {\n      \"required\": false,\n      \"flowType\": {\n        \"name\": \"Object\"\n      },\n      \"description\": \"Will be passed back with the on click.\"\n    },\n    \"AnchorComponent\": {\n      \"required\": false,\n      \"flowType\": {\n        \"name\": \"Node\"\n      },\n      \"description\": \"Component used to render anchor\"\n    }\n  }\n};",{"version":3,"sources":["/Users/jerms/Sites/workspace.sprucebot-skills-kit/packages/react-heartwood-components/src/components/Button/Button.js"],"names":["React","Fragment","cx","Loader","Icon","BasicAnchor","Button","props","className","kind","isSmall","isFullWidth","isLoading","isIconOnly","text","href","icon","type","onClick","AnchorComponent","children","rest","btnClass","btn","textClass","handleClick","e","currentTarget","blur","payload","Inner","customIcon","name","isLineIcon","btn__icon","button","anchor","defaultProps"],"mappings":"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","sourcesContent":["// @flow\nimport React, { Fragment } from 'react'\nimport cx from 'classnames'\nimport Loader from '../Loader/Loader'\nimport Icon from '../Icon/Icon'\nimport BasicAnchor from '../_utilities/Anchor'\n\nimport type { Node } from 'react'\nimport type { Props as IconProps } from '../Icon/Icon'\n\nexport type Props = {\n\t/** Optional class to add to the button. */\n\tclassName?: string,\n\n\t/** Optional children passed into button */\n\tchildren?: Node,\n\n\t/** Sets the visual appearance of the button. May be primary, secondary, simple, or caution. */\n\tkind?: string,\n\n\t/** Set true to make the button less tall. */\n\tisSmall?: boolean,\n\n\t/** Set true to make the button fill its parent's width. */\n\tisFullWidth?: boolean,\n\n\t/** Set true to hide any text or icon in the button and show a loader instead. */\n\tisLoading?: boolean,\n\n\t/** Set true to hide any text in the button. Text should still be provided for accessibility. */\n\tisIconOnly?: boolean,\n\n\t/** Text for the button. */\n\ttext?: string,\n\n\t/** Will render a link. May be relative or absolute. */\n\thref?: string,\n\n\t/** Icon for the button. */\n\ticon?: Node | IconProps,\n\n\t/** Type attribute for HTML button element. Defaults to 'button'. */\n\ttype?: string,\n\n\t/** Click handler. */\n\tonClick?: Function,\n\n\t/** Will be passed back with the on click. */\n\tpayload?: Object,\n\n\t/** Component used to render anchor */\n\tAnchorComponent?: Node\n}\n\nconst Button = (props: Props) => {\n\tconst {\n\t\tclassName,\n\t\tkind,\n\t\tisSmall,\n\t\tisFullWidth,\n\t\tisLoading,\n\t\tisIconOnly,\n\t\ttext,\n\t\thref,\n\t\ticon,\n\t\ttype,\n\t\tonClick,\n\t\tAnchorComponent = BasicAnchor,\n\t\tchildren,\n\t\t...rest\n\t} = props\n\tconst btnClass = cx(className, {\n\t\tbtn: true,\n\t\t'btn-primary': kind === 'primary',\n\t\t'btn-secondary': kind === 'secondary',\n\t\t'btn-caution': kind === 'caution',\n\t\t'btn-simple': kind === 'simple',\n\t\t'btn-full-width': isFullWidth,\n\t\t'btn--loading': isLoading,\n\t\t'btn-small': isSmall,\n\t\t'btn-icon-only': (!children && !text) || isIconOnly\n\t})\n\tconst textClass = cx('btn__text', {\n\t\t'visually-hidden': isIconOnly\n\t})\n\n\tconst handleClick = (e: any) => {\n\t\te.currentTarget.blur()\n\t\tif (onClick) {\n\t\t\tonClick(e, props.payload)\n\t\t}\n\t}\n\n\tconst Inner = () => (\n\t\t<span className=\"btn__inner\">\n\t\t\t{children ? (\n\t\t\t\tchildren\n\t\t\t) : (\n\t\t\t\t<Fragment>\n\t\t\t\t\t{icon && (icon.customIcon || icon.name) && (\n\t\t\t\t\t\t<span className=\"btn__icon-wrapper\">\n\t\t\t\t\t\t\t<Icon\n\t\t\t\t\t\t\t\tcustomIcon={icon.customIcon}\n\t\t\t\t\t\t\t\ticon={icon.name}\n\t\t\t\t\t\t\t\tisLineIcon={icon.isLineIcon}\n\t\t\t\t\t\t\t\tclassName={cx(\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tbtn__icon: true,\n\t\t\t\t\t\t\t\t\t\t'btn__line-icon': icon.isLineIcon\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\ticon.className\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</span>\n\t\t\t\t\t)}\n\t\t\t\t\t{text && <span className={textClass}>{text}</span>}\n\t\t\t\t\t{isLoading && <Loader />}\n\t\t\t\t</Fragment>\n\t\t\t)}\n\t\t</span>\n\t)\n\n\tconst button = (\n\t\t<button className={btnClass} type={type} onClick={handleClick} {...rest}>\n\t\t\t<Inner />\n\t\t</button>\n\t)\n\n\tconst anchor = (\n\t\t<AnchorComponent href={href} className={btnClass} {...rest}>\n\t\t\t<Inner />\n\t\t</AnchorComponent>\n\t)\n\n\tif (!children && !text && !icon) {\n\t\t// TODO: Handle Logging\n\t\t// console.error(\n\t\t// \t'<Button /> must have text, icon, or both. Please check the props your passing.'\n\t\t// )\n\t\treturn null\n\t}\n\n\treturn href ? anchor : button\n}\n\nButton.defaultProps = {\n\tclassName: '',\n\tkind: '',\n\tisSmall: false,\n\tisFullWidth: false,\n\tisLoading: false,\n\tisIconOnly: false,\n\ttext: '',\n\thref: '',\n\ticon: null,\n\ttype: 'button',\n\tonClick: () => null\n}\n\nexport default Button\n"]}]}