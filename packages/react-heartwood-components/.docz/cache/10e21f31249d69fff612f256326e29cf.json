{"remainingRequest":"/Users/jerms/Sites/workspace.sprucebot-skills-kit/node_modules/babel-loader/lib/index.js?{\"presets\":[\"@babel/preset-env\",\"@babel/preset-react\",\"@babel/preset-flow\",\"@babel/preset-typescript\",[\"/Users/jerms/Sites/workspace.sprucebot-skills-kit/node_modules/docz/node_modules/babel-preset-docz/dist/index.js\",{\"flow\":true,\"typescript\":false,\"parseProps\":true}]],\"plugins\":[\"@babel/plugin-transform-runtime\",\"@babel/plugin-proposal-object-rest-spread\",\"@babel/plugin-transform-flow-strip-types\",\"@babel/plugin-syntax-dynamic-import\",\"@babel/plugin-syntax-import-meta\",\"@babel/plugin-proposal-class-properties\",\"@babel/plugin-proposal-json-strings\",[\"@babel/plugin-proposal-decorators\",{\"legacy\":true}],\"@babel/plugin-proposal-function-sent\",\"@babel/plugin-proposal-export-namespace-from\",\"@babel/plugin-proposal-numeric-separator\",\"@babel/plugin-proposal-throw-expressions\",\"@babel/plugin-proposal-export-default-from\",\"@babel/plugin-proposal-logical-assignment-operators\",\"@babel/plugin-proposal-optional-chaining\",[\"@babel/plugin-proposal-pipeline-operator\",{\"proposal\":\"minimal\"}],\"@babel/plugin-proposal-nullish-coalescing-operator\",\"@babel/plugin-proposal-do-expressions\",\"@babel/plugin-proposal-function-bind\",[\"inline-react-svg\",{\"svgo\":{\"plugins\":[{\"removeAttrs\":{\"attrs\":[\"stroke\",\"fill\"]}}]}}],[\"/Users/jerms/Sites/workspace.sprucebot-skills-kit/node_modules/docz-utils/lib/named-asset-import.js\",{\"loaderMap\":{\"svg\":{\"ReactComponent\":\"@svgr/webpack?-prettier,-svgo![path]\"}}}],\"/Users/jerms/Sites/workspace.sprucebot-skills-kit/node_modules/docz/node_modules/react-hot-loader/babel.js\"],\"ignore\":[\"node_modules\"],\"babelrc\":false,\"cacheCompression\":false,\"compact\":false}!/Users/jerms/Sites/workspace.sprucebot-skills-kit/packages/react-heartwood-components/src/components/Icon/Icon.js","dependencies":[{"path":"/Users/jerms/Sites/workspace.sprucebot-skills-kit/packages/react-heartwood-components/src/components/Icon/Icon.js","mtime":1561241546210},{"path":"/Users/jerms/Sites/workspace.sprucebot-skills-kit/node_modules/docz/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jerms/Sites/workspace.sprucebot-skills-kit/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/jerms/Sites/workspace.sprucebot-skills-kit/packages/react-heartwood-components/src/components/Icon/Icon.js\";\n\n(function () {\n  var enterModule = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).enterModule;\n  enterModule && enterModule(module);\n})();\n\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal[\"default\"].signature : function (a) {\n  return a;\n};\n\n// TODO(george): Figure out why icons busts this rule.\n\n/* eslint import/namespace: off */\n// NOTE: This component should only include a few of the most commonly\n// used icons for developer convenience\nimport React from 'react';\nimport cx from 'classnames';\nimport * as icons from '../../icons.js';\n\nvar Icon = function Icon(props) {\n  var icon = props.icon,\n      customIcon = props.customIcon,\n      isLineIcon = props.isLineIcon,\n      className = props.className,\n      rest = _objectWithoutProperties(props, [\"icon\", \"customIcon\", \"isLineIcon\", \"className\"]);\n\n  var iconKey = icon && icon.toLowerCase();\n\n  if (!customIcon && (!icon || !icons[iconKey])) {\n    console.warn(\"<Icon /> could not find an icon with key \", icon);\n    return null;\n  }\n\n  var isFillIcon = !customIcon && icons[iconKey] && !icons[iconKey].isLineIcon;\n  var Handler = customIcon || icons[iconKey].icon;\n  return React.createElement(Handler, Object.assign({\n    className: cx(className, 'icon', {\n      'icon--no-fill': typeof isLineIcon !== 'undefined' ? isLineIcon : !isFillIcon,\n      'icon--stroke': typeof isLineIcon !== 'undefined' ? isLineIcon : !isFillIcon\n    })\n  }, rest, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }));\n};\n\nvar _default = Icon;\nexport default _default;\n;\n\n(function () {\n  var reactHotLoader = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).default;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(Icon, \"Icon\", \"/Users/jerms/Sites/workspace.sprucebot-skills-kit/packages/react-heartwood-components/src/components/Icon/Icon.js\");\n  reactHotLoader.register(_default, \"default\", \"/Users/jerms/Sites/workspace.sprucebot-skills-kit/packages/react-heartwood-components/src/components/Icon/Icon.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).leaveModule;\n  leaveModule && leaveModule(module);\n})();\n\nIcon.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"Icon\",\n  \"props\": {\n    \"icon\": {\n      \"required\": false,\n      \"flowType\": {\n        \"name\": \"string\"\n      },\n      \"description\": \"The name of the icon to render. If not found, this will return null.\"\n    },\n    \"isLineIcon\": {\n      \"required\": false,\n      \"flowType\": {\n        \"name\": \"boolean\"\n      },\n      \"description\": \"Set true to render an icon with a stroke, but no fill\"\n    },\n    \"customIcon\": {\n      \"required\": false,\n      \"flowType\": {\n        \"name\": \"any\"\n      },\n      \"description\": \"\"\n    },\n    \"className\": {\n      \"required\": false,\n      \"flowType\": {\n        \"name\": \"string\"\n      },\n      \"description\": \"\"\n    }\n  }\n};",{"version":3,"sources":["/Users/jerms/Sites/workspace.sprucebot-skills-kit/packages/react-heartwood-components/src/components/Icon/Icon.js"],"names":["React","cx","icons","Icon","props","icon","customIcon","isLineIcon","className","rest","iconKey","toLowerCase","console","warn","isFillIcon","Handler"],"mappings":";;;;;;;;;;;;AAAA;;AACA;AAGA;AACA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,EAAP,MAAe,YAAf;AAEA,OAAO,KAAKC,KAAZ,MAAuB,gBAAvB;;AAcA,IAAMC,IAAI,GAAG,SAAPA,IAAO,CAACC,KAAD,EAAkB;AAAA,MACtBC,IADsB,GAC+BD,KAD/B,CACtBC,IADsB;AAAA,MAChBC,UADgB,GAC+BF,KAD/B,CAChBE,UADgB;AAAA,MACJC,UADI,GAC+BH,KAD/B,CACJG,UADI;AAAA,MACQC,SADR,GAC+BJ,KAD/B,CACQI,SADR;AAAA,MACsBC,IADtB,4BAC+BL,KAD/B;;AAG9B,MAAMM,OAAO,GAAGL,IAAI,IAAIA,IAAI,CAACM,WAAL,EAAxB;;AAEA,MAAI,CAACL,UAAD,KAAgB,CAACD,IAAD,IAAS,CAACH,KAAK,CAACQ,OAAD,CAA/B,CAAJ,EAA+C;AAC9CE,IAAAA,OAAO,CAACC,IAAR,8CAA0DR,IAA1D;AACA,WAAO,IAAP;AACA;;AAED,MAAIS,UAAU,GAAG,CAACR,UAAD,IAAeJ,KAAK,CAACQ,OAAD,CAApB,IAAiC,CAACR,KAAK,CAACQ,OAAD,CAAL,CAAeH,UAAlE;AAEA,MAAMQ,OAAO,GAAGT,UAAU,IAAIJ,KAAK,CAACQ,OAAD,CAAL,CAAeL,IAA7C;AAEA,SACC,oBAAC,OAAD;AACC,IAAA,SAAS,EAAEJ,EAAE,CAACO,SAAD,EAAY,MAAZ,EAAoB;AAChC,uBACC,OAAOD,UAAP,KAAsB,WAAtB,GAAoCA,UAApC,GAAiD,CAACO,UAFnB;AAGhC,sBACC,OAAOP,UAAP,KAAsB,WAAtB,GAAoCA,UAApC,GAAiD,CAACO;AAJnB,KAApB;AADd,KAOKL,IAPL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADD;AAWA,CAzBD;;eA2BeN,I;AAAf;;;;;;;;;;0BA3BMA,I","sourcesContent":["// TODO(george): Figure out why icons busts this rule.\n/* eslint import/namespace: off */\n\n// @flow\n// NOTE: This component should only include a few of the most commonly\n// used icons for developer convenience\nimport React from 'react'\nimport cx from 'classnames'\n\nimport * as icons from '../../icons.js'\n\nexport type Props = {\n\t/** The name of the icon to render. If not found, this will return null. */\n\ticon?: string,\n\n\t/** Set true to render an icon with a stroke, but no fill */\n\tisLineIcon?: boolean,\n\n\tcustomIcon?: any,\n\n\tclassName?: string\n}\n\nconst Icon = (props: Props) => {\n\tconst { icon, customIcon, isLineIcon, className, ...rest } = props\n\n\tconst iconKey = icon && icon.toLowerCase()\n\n\tif (!customIcon && (!icon || !icons[iconKey])) {\n\t\tconsole.warn(`<Icon /> could not find an icon with key `, icon)\n\t\treturn null\n\t}\n\n\tlet isFillIcon = !customIcon && icons[iconKey] && !icons[iconKey].isLineIcon\n\n\tconst Handler = customIcon || icons[iconKey].icon\n\n\treturn (\n\t\t<Handler\n\t\t\tclassName={cx(className, 'icon', {\n\t\t\t\t'icon--no-fill':\n\t\t\t\t\ttypeof isLineIcon !== 'undefined' ? isLineIcon : !isFillIcon,\n\t\t\t\t'icon--stroke':\n\t\t\t\t\ttypeof isLineIcon !== 'undefined' ? isLineIcon : !isFillIcon\n\t\t\t})}\n\t\t\t{...rest}\n\t\t/>\n\t)\n}\n\nexport default Icon\n"]}]}