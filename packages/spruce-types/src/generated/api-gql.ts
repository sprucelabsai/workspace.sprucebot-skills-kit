///////////////////////////////////////////////////////////////
// DO NOT EDIT! THIS FILE IS GENERATED BY "yarn generate:<env>"
/* eslint-disable */
export type Maybe<T> = T | null
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
	ID: string
	String: string
	Boolean: boolean
	Int: number
	Float: number
	/** The `JSON` scalar type represents raw JSON as values. */
	SequelizeJSON: any
	/** The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */
	JSON: any
	/** A special custom Scalar type for Dates that converts to a ISO formatted string  */
	Date: any
	/**
	 * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the
	 * `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO
	 * 8601 standard for representation of dates and times using the Gregorian calendar.
	 **/
	DateTime: any
}

/** Inputs for accepting an invite */
export type ICoreGQLAcceptInviteInput = {
	/** The id of the Organization */
	organizationId: Scalars['ID']
	/** The id of the UnconfirmedUser */
	unconfirmedUserId: Scalars['ID']
	/** The code that was sent with the invite */
	confirmationCode: Scalars['String']
}

/** The invite response */
export type ICoreGQLAcceptInviteResponse = {
	__typename?: 'acceptInviteResponse'
	/** If successful, will be "success" */
	status?: Maybe<Scalars['String']>
}

/** An access point */
export type ICoreGQLAccessPoint = {
	__typename?: 'AccessPoint'
	/** The uuid sent from the access point */
	apId?: Maybe<Scalars['String']>
	/** flag to tell us that this ap is being set up */
	firstConnect?: Maybe<Scalars['Boolean']>
	LocationId?: Maybe<Scalars['String']>
	/** Optionally include warnings for values not authorized in this scope */
	warnings?: Maybe<ICoreGQLWarning>
	Location?: Maybe<ICoreGQLLocation>
	AccessPointEvents?: Maybe<
		ICoreGQLAccessPointHasManyAccessPointEventsConnection
	>
	UserLocations?: Maybe<ICoreGQLAccessPointHasManyUserLocationsConnection>
}

/** An access point */
export type ICoreGQLAccessPointLocationArgs = {
	where?: Maybe<Scalars['SequelizeJSON']>
}

/** An access point */
export type ICoreGQLAccessPointAccessPointEventsArgs = {
	limit?: Maybe<Scalars['Int']>
	order?: Maybe<Scalars['String']>
	where?: Maybe<Scalars['SequelizeJSON']>
	offset?: Maybe<Scalars['Int']>
	after?: Maybe<Scalars['String']>
	first?: Maybe<Scalars['Int']>
	before?: Maybe<Scalars['String']>
	last?: Maybe<Scalars['Int']>
}

/** An access point */
export type ICoreGQLAccessPointUserLocationsArgs = {
	limit?: Maybe<Scalars['Int']>
	order?: Maybe<Scalars['String']>
	where?: Maybe<Scalars['SequelizeJSON']>
	offset?: Maybe<Scalars['Int']>
	after?: Maybe<Scalars['String']>
	first?: Maybe<Scalars['Int']>
	before?: Maybe<Scalars['String']>
	last?: Maybe<Scalars['Int']>
}

/** An access point event */
export type ICoreGQLAccessPointEvent = {
	__typename?: 'AccessPointEvent'
	id?: Maybe<Scalars['String']>
	/** The type of event: "didEnter", "didLeave", "didSignup", "apSubscribe" */
	type?: Maybe<Scalars['String']>
	createdAt?: Maybe<Scalars['Date']>
	/** Optionally include warnings for values not authorized in this scope */
	warnings?: Maybe<ICoreGQLWarning>
	AccessPoint?: Maybe<ICoreGQLAccessPoint>
	UserDevice?: Maybe<ICoreGQLUserDevice>
}

/** An access point event */
export type ICoreGQLAccessPointEventAccessPointArgs = {
	where?: Maybe<Scalars['SequelizeJSON']>
}

/** An access point event */
export type ICoreGQLAccessPointEventUserDeviceArgs = {
	where?: Maybe<Scalars['SequelizeJSON']>
}

/** A connection to a list of items. */
export type ICoreGQLAccessPointHasManyAccessPointEventsConnection = {
	__typename?: 'AccessPointHasManyAccessPointEventsConnection'
	/** Information to aid in pagination. */
	pageInfo: ICoreGQLPageInfo
	/** A list of edges. */
	edges?: Maybe<Array<Maybe<ICoreGQLAccessPointHasManyAccessPointEventsEdge>>>
	totalCount?: Maybe<Scalars['Int']>
}

/** An edge in a connection. */
export type ICoreGQLAccessPointHasManyAccessPointEventsEdge = {
	__typename?: 'AccessPointHasManyAccessPointEventsEdge'
	/** The item at the end of the edge */
	node?: Maybe<ICoreGQLAccessPointEvent>
	/** A cursor for use in pagination */
	cursor: Scalars['String']
}

/** A connection to a list of items. */
export type ICoreGQLAccessPointHasManyUserLocationsConnection = {
	__typename?: 'AccessPointHasManyUserLocationsConnection'
	/** Information to aid in pagination. */
	pageInfo: ICoreGQLPageInfo
	/** A list of edges. */
	edges?: Maybe<Array<Maybe<ICoreGQLAccessPointHasManyUserLocationsEdge>>>
	totalCount?: Maybe<Scalars['Int']>
}

/** An edge in a connection. */
export type ICoreGQLAccessPointHasManyUserLocationsEdge = {
	__typename?: 'AccessPointHasManyUserLocationsEdge'
	/** The item at the end of the edge */
	node?: Maybe<ICoreGQLUserLocation>
	/** A cursor for use in pagination */
	cursor: Scalars['String']
}

/** A single acl */
export type ICoreGQLAcl = {
	__typename?: 'Acl'
	/** The slug. Either "core" or the skill slug */
	slug: Scalars['String']
	permissions: Array<Maybe<ICoreGQLPermission>>
}

/** The default acls by role */
export type ICoreGQLAclDefaults = {
	__typename?: 'aclDefaults'
	/** The permission default for groupManager */
	groupManager: Scalars['Boolean']
	/** The permission default for manager */
	manager: Scalars['Boolean']
	/** The permission default for teammate */
	teammate: Scalars['Boolean']
	/** The permission default for guest */
	guest: Scalars['Boolean']
}

export type ICoreGQLAction =
	| ICoreGQLActionCoreRedirect
	| ICoreGQLActionSkillViewRedirect
	| ICoreGQLActionConfirm
	| ICoreGQLActionShowModal
	| ICoreGQLActionEmitEvent
	| ICoreGQLActionBigSearch
	| ICoreGQLActionQuickEditUser
	| ICoreGQLActionDismissComponent
	| ICoreGQLActionCalendarJumpTo

/** Pop up big search */
export type ICoreGQLActionBigSearch = {
	__typename?: 'ActionBigSearch'
	type?: Maybe<ICoreGQLActionTypes>
	payload: ICoreGQLActionBigSearchPayload
	onComplete?: Maybe<ICoreGQLAction>
	onCancel?: Maybe<ICoreGQLAction>
}

/** Bring up big search with the specific roles (teammate, guest, manager, groupManager, owner) */
export type ICoreGQLActionBigSearchPayload = {
	__typename?: 'ActionBigSearchPayload'
	roles?: Maybe<Array<Scalars['String']>>
}

/** Jump to a place on the calendar */
export type ICoreGQLActionCalendarJumpTo = {
	__typename?: 'ActionCalendarJumpTo'
	type?: Maybe<ICoreGQLActionTypes>
	payload: ICoreGQLActionCalendarJumpToPayload
	onComplete?: Maybe<ICoreGQLAction>
	onCancel?: Maybe<ICoreGQLAction>
}

/** control the calendar if you are on a page with a calendar */
export type ICoreGQLActionCalendarJumpToPayload = {
	__typename?: 'ActionCalendarJumpToPayload'
	/** Which day and time to focus */
	dateTime: Scalars['Date']
	/** Make sure the right calendar is selected */
	calendarId: Scalars['String']
	/** Show the selected user */
	userId?: Maybe<Scalars['String']>
}

/** Pop up a confirmation */
export type ICoreGQLActionConfirm = {
	__typename?: 'ActionConfirm'
	type?: Maybe<ICoreGQLActionTypes>
	payload: ICoreGQLConfirmModal
	onComplete?: Maybe<ICoreGQLAction>
	onCancel?: Maybe<ICoreGQLAction>
}

/** Redirect a user in the main viewport (browser or native mobile) */
export type ICoreGQLActionCoreRedirect = {
	__typename?: 'ActionCoreRedirect'
	type?: Maybe<ICoreGQLActionTypes>
	payload: ICoreGQLActionCoreRedirectPayload
	onComplete?: Maybe<ICoreGQLAction>
	onCancel?: Maybe<ICoreGQLAction>
}

/** payload used for core redirect */
export type ICoreGQLActionCoreRedirectPayload = {
	__typename?: 'ActionCoreRedirectPayload'
	/** the destination route */
	route: Scalars['String']
	/** Params for the route, like organizationId or locationId */
	routeParams?: Maybe<Scalars['JSON']>
}

/** Dismiss/hide components on the page whose ID's match. */
export type ICoreGQLActionDismissComponent = {
	__typename?: 'ActionDismissComponent'
	type?: Maybe<ICoreGQLActionTypes>
	payload: ICoreGQLActionDismissComponentPayload
	onComplete?: Maybe<ICoreGQLAction>
	onCancel?: Maybe<ICoreGQLAction>
}

/** Dismiss a component by it's ID */
export type ICoreGQLActionDismissComponentPayload = {
	__typename?: 'ActionDismissComponentPayload'
	/** Ids of the components you want to hide */
	componentIds: Array<Scalars['String']>
}

/** Emit an event to your skill */
export type ICoreGQLActionEmitEvent = {
	__typename?: 'ActionEmitEvent'
	type?: Maybe<ICoreGQLActionTypes>
	payload: ICoreGQLActionEmitEventPayload
	onComplete?: Maybe<ICoreGQLAction>
	onCancel?: Maybe<ICoreGQLAction>
}

export type ICoreGQLActionEmitEventInput = {
	type: Scalars['String']
	payload: ICoreGQLActionEmitEventInputPayload
}

export type ICoreGQLActionEmitEventInputPayload = {
	/** Name of the event, like 'booking:update-appointment' */
	eventName: Scalars['String']
	/** optional location id */
	locationId?: Maybe<Scalars['String']>
	/** optional organizationId */
	organizationId?: Maybe<Scalars['String']>
	/** Arbitrary payload sent with the event */
	payload?: Maybe<Scalars['JSON']>
}

/** Emit an event to your skill when this action is invoked */
export type ICoreGQLActionEmitEventPayload = {
	__typename?: 'ActionEmitEventPayload'
	/** Name of the event, like 'booking:update-appointment' */
	eventName?: Maybe<Scalars['String']>
	/** optional location id */
	locationId?: Maybe<Scalars['String']>
	/** optional organizationId */
	organizationId?: Maybe<Scalars['String']>
	/** Arbitrary payload sent with the event */
	payload?: Maybe<Scalars['JSON']>
}

export type ICoreGQLActionExecutor = {
	action?: Maybe<ICoreGQLAction>
	id: Scalars['ID']
}

/** Pop up dialog to edit the user */
export type ICoreGQLActionQuickEditUser = {
	__typename?: 'ActionQuickEditUser'
	type?: Maybe<ICoreGQLActionTypes>
	payload: ICoreGQLActionQuickEditUserPayload
	onComplete?: Maybe<ICoreGQLAction>
	onCancel?: Maybe<ICoreGQLAction>
}

/**
 * Pop up quick edit to update a user record. You have to have permission and
 * should pass location and organization unelss you are editing yourself
 **/
export type ICoreGQLActionQuickEditUserPayload = {
	__typename?: 'ActionQuickEditUserPayload'
	/** The id of the user */
	userId: Scalars['String']
	/** optional location id */
	locationId?: Maybe<Scalars['String']>
	/** optional organizationId */
	organizationId?: Maybe<Scalars['String']>
}

/** Load a skill view in a modal dialog */
export type ICoreGQLActionShowModal = {
	__typename?: 'ActionShowModal'
	type?: Maybe<ICoreGQLActionTypes>
	payload: ICoreGQLActionShowModalPayload
	onComplete?: Maybe<ICoreGQLAction>
	onCancel?: Maybe<ICoreGQLAction>
}

/** Props passed to a modal you want to pop up when invoking this action */
export type ICoreGQLActionShowModalPayload = {
	__typename?: 'ActionShowModalPayload'
	/** the destination route */
	route: Scalars['String']
	/** Params for the route, like organizationId or locationId */
	routeParams?: Maybe<Scalars['JSON']>
	/** Title of the dialog */
	title: Scalars['String']
	/** Drop a primary action button into the footer */
	footerPrimaryActionText?: Maybe<Scalars['String']>
	/** Drop in a secondary action into the footer, only works if primary action is also set */
	footerSecondaryActionText?: Maybe<Scalars['String']>
	/** Does the primary action button start off disabled? */
	isDialogFooterPrimaryActionDisabled?: Maybe<Scalars['Boolean']>
	/** Does the secondary action button start off disabled? */
	isDialogFooterSecondaryActionDisabled?: Maybe<Scalars['Boolean']>
	/** How does the dialog size itself width wise? */
	size?: Maybe<ICoreGQLModalSize>
	/** Does the dialog fill the screen vertically? */
	isFullHeight?: Maybe<Scalars['Boolean']>
}

/** Redirect inside of a skill view */
export type ICoreGQLActionSkillViewRedirect = {
	__typename?: 'ActionSkillViewRedirect'
	type?: Maybe<ICoreGQLActionTypes>
	payload: ICoreGQLActionSkillViewRedirectPayload
	onComplete?: Maybe<ICoreGQLAction>
	onCancel?: Maybe<ICoreGQLAction>
}

/** payload used when redirecting a skill view */
export type ICoreGQLActionSkillViewRedirectPayload = {
	__typename?: 'ActionSkillViewRedirectPayload'
	/** the skill slug to redirect to */
	slug: Scalars['String']
	/** the destination route */
	route: Scalars['String']
	/** Params for the route, like organizationId or locationId */
	routeParams?: Maybe<Scalars['JSON']>
}

export enum ICoreGQLActionTypes {
	CoreRedirect = 'CoreRedirect',
	SkillViewRedirect = 'SkillViewRedirect',
	Confirm = 'Confirm',
	ShowModal = 'ShowModal',
	EmitEvent = 'EmitEvent',
	BigSearch = 'BigSearch',
	QuickEditUser = 'QuickEditUser',
	DismissComponent = 'DismissComponent',
	CalendarJumpTo = 'CalendarJumpTo'
}

/** values needed to add a dashboard card */
export type ICoreGQLAddDashboardCardInput = {
	/** The skillCardId */
	skillCardId: Scalars['String']
	/** The page the card will show on. */
	page: Scalars['String']
	/** The order of the card in it's group. */
	order: Scalars['Int']
	/** The slug of the skill the card belongs too. */
	skillSlug: Scalars['String']
}

/** Status will be  */
export type ICoreGQLAddDashboardCardResponse = {
	__typename?: 'addDashboardCardResponse'
	/** Whether the dashboard card was added successfully */
	success?: Maybe<Scalars['Boolean']>
	/** Errors and the reason the dashboard card could not be added */
	errors?: Maybe<Scalars['JSON']>
}

/** An object representing roles to add for a user */
export type ICoreGQLAddRolesType = {
	/** The Job id to assign the user */
	jobId?: Maybe<Scalars['ID']>
	/**
	 * If jobId is omitted, "role" may be used to assign the default role to the user
	 * instead. Valid roles are: "owner", "groupManager", "manager", "teammate", "guest"
	 **/
	role?: Maybe<Scalars['String']>
	/** Must be specified if this job is assigned at the Location level */
	locationId?: Maybe<Scalars['ID']>
	/** Must be specified if this job is assigned at the Group level */
	groupId?: Maybe<Scalars['ID']>
}

/** Inputs for adding a user to roles */
export type ICoreGQLAddUserToRolesInput = {
	/** The id of the Organization */
	organizationId: Scalars['ID']
	/** The id of the User */
	userId: Scalars['ID']
	/** Array of roles that should be assigned to the user */
	rolesToAdd: Array<Maybe<ICoreGQLAddRolesType>>
}

/** The response */
export type ICoreGQLAddUserToRolesResponse = {
	__typename?: 'addUserToRolesResponse'
	/** If successful, will be "success" */
	status?: Maybe<Scalars['String']>
}

/** An app token */
export type ICoreGQLAppToken = {
	__typename?: 'AppToken'
	token?: Maybe<Scalars['String']>
	name?: Maybe<Scalars['String']>
	/** Optionally include warnings for values not authorized in this scope */
	warnings?: Maybe<ICoreGQLWarning>
	User?: Maybe<ICoreGQLUser>
	Location?: Maybe<ICoreGQLLocation>
}

/** An app token */
export type ICoreGQLAppTokenUserArgs = {
	where?: Maybe<Scalars['SequelizeJSON']>
}

/** An app token */
export type ICoreGQLAppTokenLocationArgs = {
	where?: Maybe<Scalars['SequelizeJSON']>
}

/** An audit log entry */
export type ICoreGQLAudit = {
	__typename?: 'Audit'
	id?: Maybe<Scalars['String']>
	/** The type of audit log.  This can be used to group similar audit types together */
	type?: Maybe<Scalars['String']>
	/** A short description of the action that was taken */
	action?: Maybe<Scalars['String']>
	/** A long description with more detail about the action that was taken */
	description?: Maybe<Scalars['String']>
	/** The IP of address of the user when this action occurred */
	ip?: Maybe<Scalars['String']>
	/** Additional key/value info that will allow for deep linking to where this change was made and/or can be reviewed. */
	meta?: Maybe<Scalars['SequelizeJSON']>
	createdAt?: Maybe<Scalars['Date']>
	updatedAt?: Maybe<Scalars['Date']>
	UserId?: Maybe<Scalars['String']>
	SkillId?: Maybe<Scalars['String']>
	LocationId?: Maybe<Scalars['String']>
	OrganizationId?: Maybe<Scalars['String']>
	/** Optionally include warnings for values not authorized in this scope */
	warnings?: Maybe<ICoreGQLWarning>
	User?: Maybe<ICoreGQLUser>
	Skill?: Maybe<ICoreGQLSkill>
	Location?: Maybe<ICoreGQLLocation>
	Organization?: Maybe<ICoreGQLOrganization>
}

/** An audit log entry */
export type ICoreGQLAuditUserArgs = {
	where?: Maybe<Scalars['SequelizeJSON']>
}

/** An audit log entry */
export type ICoreGQLAuditSkillArgs = {
	where?: Maybe<Scalars['SequelizeJSON']>
}

/** An audit log entry */
export type ICoreGQLAuditLocationArgs = {
	where?: Maybe<Scalars['SequelizeJSON']>
}

/** An audit log entry */
export type ICoreGQLAuditOrganizationArgs = {
	where?: Maybe<Scalars['SequelizeJSON']>
}

/** Responds with audit logs */
export type ICoreGQLAuditStreamResponse = {
	__typename?: 'AuditStreamResponse'
	/** Audit logs */
	Audits?: Maybe<Array<Maybe<ICoreGQLAudit>>>
}

/** A single acl */
export type ICoreGQLAvailableAcl = {
	__typename?: 'AvailableAcl'
	/** The permission name */
	permission: Scalars['String']
	/** A short, friendly description of the permission */
	label: Scalars['String']
	/** A full (longer) description of the permission */
	description: Scalars['String']
	/** The permission type */
	type: Scalars['String']
	/** The default values assigned for this acl */
	defaults: ICoreGQLAclDefaults
}

/** ACLs grouped by slug */
export type ICoreGQLAvailableAclGroup = {
	__typename?: 'AvailableAclGroup'
	/** A friendly name that can be displayed to the user */
	name: Scalars['String']
	/** The slug for the permission. Either "core" or the skill slug */
	slug: Scalars['String']
	/** The acls */
	acls?: Maybe<Array<Maybe<ICoreGQLAvailableAcl>>>
}

export enum ICoreGQLBigSearchObjectType {
	Any = 'any',
	User = 'user',
	Location = 'location',
	Group = 'group'
}

export type ICoreGQLBigSearchResultSectionResultEdge = {
	__typename?: 'BigSearchResultSectionResultEdge'
	/** A single BigSearch result for this section. */
	node: ICoreGQLBigSearchResultsRecord
	/** A cursor for use in pagination */
	cursor: Scalars['String']
}

/** A single section of search results for BigSearch */
export type ICoreGQLBigSearchResultSectionType = {
	__typename?: 'BigSearchResultSectionType'
	/** The title of this section. Rendered as a tab. */
	title: Scalars['String']
	/** A unique identifier for this section. Similar to a slug. */
	section: Scalars['String']
	/** Search results for this section */
	results: ICoreGQLBigSearchSectionResults
}

/** A single search result */
export type ICoreGQLBigSearchResultsRecord = {
	__typename?: 'BigSearchResultsRecord'
	/** Arbitrary id of this result. Core always returns a UUID, skills may return something else */
	id: Scalars['String']
	/** The title of the list item */
	title: Scalars['String']
	/** The subtitle of the list item */
	subtitle?: Maybe<Scalars['String']>
	/** The image rendered on the left of the list item */
	image?: Maybe<Scalars['String']>
	/** How we're going to handle selecting a result */
	action: ICoreGQLBigSearchResultsRecordAction
}

/** Define what to do if someone selects this search result */
export type ICoreGQLBigSearchResultsRecordAction = {
	__typename?: 'BigSearchResultsRecordAction'
	/** The type of action we want to take, currently supports coreRedirect and import. */
	type: ICoreGQLBigSearchResultsRecordActionType
	/** If the action type is coreRedirect, this is the page we send them to */
	page?: Maybe<Scalars['String']>
	/** Any arbitrary object that passed to the page, things like "organizationId" and "locationId". */
	routeParams?: Maybe<Scalars['JSON']>
}

export enum ICoreGQLBigSearchResultsRecordActionType {
	CoreRedirect = 'coreRedirect',
	Import = 'import'
}

/** A single search result in a section */
export type ICoreGQLBigSearchSectionResults = {
	__typename?: 'BigSearchSectionResults'
	/** Total results for this section */
	totalCount: Scalars['Int']
	edges?: Maybe<Array<Maybe<ICoreGQLBigSearchResultSectionResultEdge>>>
	pageInfo?: Maybe<ICoreGQLBigSearchSectionResultsPageInfo>
}

export type ICoreGQLBigSearchSectionResultsPageInfo = {
	__typename?: 'BigSearchSectionResultsPageInfo'
	/** When paginating forwards, are there more items? */
	hasNextPage: Scalars['Boolean']
	/** When paginating backwards, are there more items? */
	hasPreviousPage: Scalars['Boolean']
	/** When paginating backwards, the cursor to continue. */
	startCursor?: Maybe<Scalars['String']>
	/** When paginating forwards, the cursor to continue. */
	endCursor?: Maybe<Scalars['String']>
}

export type ICoreGQLButton = ICoreGQLActionExecutor & {
	__typename?: 'Button'
	/** Unique ID for rendering in lists */
	id: Scalars['ID']
	/** Sets the visual appearance of the button. May be primary, secondary, simple, or caution. */
	kind?: Maybe<ICoreGQLButtonKinds>
	/** Set true to make the button less tall. */
	isSmall?: Maybe<Scalars['Boolean']>
	/** Set true to make the button fill its parent's width. */
	isFullWidth?: Maybe<Scalars['Boolean']>
	/** Set true to hide any text or icon in the button and show a loader instead. */
	isLoading?: Maybe<Scalars['Boolean']>
	/** Set true to hide any text in the button. Text should still be provided for accessibility. */
	isIconOnly?: Maybe<Scalars['Boolean']>
	/** Text for the button. */
	text?: Maybe<Scalars['String']>
	/** Will render a link. May be relative or absolute. */
	href?: Maybe<Scalars['String']>
	/** Icon for the button. */
	icon?: Maybe<ICoreGQLIcon>
	/** Type attribute for HTML button element. Defaults to 'button'. */
	type?: Maybe<ICoreGQLButtonTypes>
	/** Set true to disable the button */
	isDisabled?: Maybe<Scalars['Boolean']>
	/** Optional action to invoke when tapped */
	action?: Maybe<ICoreGQLAction>
}

export type ICoreGQLButtonGroup = {
	__typename?: 'ButtonGroup'
	/** Array of actions to render the group's buttons. */
	actions?: Maybe<Array<ICoreGQLButton>>
	/** Visual appearance of the group. */
	kind?: Maybe<ICoreGQLButtonGroupKind>
	/** Set true to fill parent width */
	isFullWidth?: Maybe<Scalars['Boolean']>
	/** Optional: Index of the button that is currently highlighted, e.g. by arrow keys */
	highlightedIndex?: Maybe<Scalars['Int']>
}

export enum ICoreGQLButtonGroupKind {
	Default = 'default',
	Segmented = 'segmented',
	Floating = 'floating'
}

/** How an action is rendered is impacted by the kind of action it is */
export enum ICoreGQLButtonKinds {
	Primary = 'primary',
	Secondary = 'secondary',
	Simple = 'simple',
	Caution = 'caution'
}

/** Type of button */
export enum ICoreGQLButtonTypes {
	Button = 'button',
	Submit = 'submit',
	Reset = 'reset'
}

/** A Calendar */
export type ICoreGQLCalendar = {
	__typename?: 'Calendar'
	/** The unique identifier for a Calendar */
	id: Scalars['ID']
	/** The name of the calendar (i.e. appointments) */
	name: Scalars['String']
	/** Optionally a calendar can have actions to create new events */
	createActions?: Maybe<Array<ICoreGQLCreateCalendarAction>>
}

/** An event that is rendered on the calendar. */
export type ICoreGQLCalendarEvent = {
	__typename?: 'CalendarEvent'
	/** Id of the calendar event */
	id: Scalars['ID']
	/** When the event starts ISO */
	startAt: Scalars['DateTime']
	/**
	 * A way to arbitarily bundle appointments. Events with the same collection are
	 * all highlighted at the same time in the calendar
	 **/
	collection?: Maybe<Scalars['String']>
	/** Can this event be resized on the calendar? */
	isResizable?: Maybe<Scalars['Boolean']>
	/** The kind on an event impacts its color */
	kind?: Maybe<ICoreGQLCalendarEventKind>
	/** A calendar is comprised of blocks of time. You need at least 1 block to have a valid event. */
	blocks: Array<ICoreGQLCalendarEventBlock>
	/** Additioal details shown after someone taps on an event */
	details?: Maybe<ICoreGQLCalendarEventDetails>
	/** The ID of the user this event will render under */
	userId: Scalars['ID']
	/** If this is a draft event (meaning it's not booked, but being setup) */
	isDraft?: Maybe<Scalars['Boolean']>
	/** Should I render a border for this event? */
	hasBorder?: Maybe<Scalars['Boolean']>
}

/** A block of time that comprises a calendar. */
export type ICoreGQLCalendarEventBlock = {
	__typename?: 'CalendarEventBlock'
	/** An optional identifier for this block */
	id?: Maybe<Scalars['ID']>
	/** Any title rendered on the event */
	title?: Maybe<Scalars['String']>
	/** Displayed right under the title */
	subtitle?: Maybe<Scalars['String']>
	/** How long this block is for, in seconds */
	durationSec: Scalars['Int']
	/** An array of icons show on the left of the calendar event */
	leftIcons?: Maybe<Array<ICoreGQLIcon>>
	/** An array of icons shown on the right of the calendar event */
	rightIcons?: Maybe<Array<ICoreGQLIcon>>
	/** Is the person tied to this event busy during this time? */
	isBusy?: Maybe<Scalars['Boolean']>
}

/** The additional details attached to an event. Rendered after someone taps on an event in the calendar */
export type ICoreGQLCalendarEventDetails = {
	__typename?: 'CalendarEventDetails'
	items: Array<ICoreGQLCalendarEventDetailsItem>
}

/** Control the rendering of the list item */
export type ICoreGQLCalendarEventDetailsItem = {
	__typename?: 'CalendarEventDetailsItem'
	/** How the view should be rendered */
	type: ICoreGQLCalendarEventDetailsItemType
	/** The data fed into the view to configure it. */
	viewModel: ICoreGQLCalendarEventDetailsItemViewModel
}

export enum ICoreGQLCalendarEventDetailsItemType {
	List = 'list',
	Button = 'button',
	SplitButton = 'splitButton',
	CardBuilder = 'cardBuilder',
	Toast = 'toast',
	Text = 'text',
	Markdown = 'markdown'
}

export type ICoreGQLCalendarEventDetailsItemViewModel =
	| ICoreGQLList
	| ICoreGQLButton
	| ICoreGQLCardBuilder
	| ICoreGQLToast
	| ICoreGQLText
	| ICoreGQLMarkdown
	| ICoreGQLSplitButton

/** How an event will be rendered in the calendar. Each time represents a standard state of an event. */
export enum ICoreGQLCalendarEventKind {
	/** How a calendar event renders by default. */
	Default = 'default',
	/** If an event is not confirmed. */
	Tentative = 'tentative',
	/** When an event is happening right now */
	Active = 'active',
	/** If the event represents a time when the person is not available for additional events (usually matches isBusy) */
	Unavailable = 'unavailable',
	/** If the event represents a time where the user us unavailable (break or block) */
	Blocked = 'blocked',
	/** The event is ready to go, everyone has confirmed, it just hasn't happened yet */
	Upcoming = 'upcoming',
	/** If the event is in the past */
	Past = 'past',
	/** The user should pay attention to this event (maybe the event is unconfirmed and starting in 30 minutes!) */
	Warn = 'warn',
	/** Renders the event in red (the event could have already started but attendees have not confirmed) */
	Critical = 'critical'
}

export type ICoreGQLCalendarEventStreamResponse = {
	__typename?: 'CalendarEventStreamResponse'
	type?: Maybe<ICoreGQLCalendarEventStreamType>
	CalendarEvent?: Maybe<ICoreGQLCalendarEvent>
}

export enum ICoreGQLCalendarEventStreamType {
	Create = 'Create',
	Update = 'Update',
	Delete = 'Delete'
}

/** The builder for all things cards */
export type ICoreGQLCardBuilder = {
	__typename?: 'CardBuilder'
	/** The id of the used for view caching */
	id: Scalars['ID']
	/** Card Header props */
	header?: Maybe<ICoreGQLCardHeader>
	/** optionally pass props to an image tag to be rendered in the header */
	headerImage?: Maybe<ICoreGQLImage>
	/** all onboarding props */
	onboarding?: Maybe<ICoreGQLOnboardingCard>
	/** Card Body props */
	body?: Maybe<ICoreGQLCardBuilderBody>
	/** The footer of the card */
	footer?: Maybe<ICoreGQLCardFooter>
}

/** The body of the card builder */
export type ICoreGQLCardBuilderBody = {
	__typename?: 'CardBuilderBody'
	/** Children to show in the Card */
	items: Array<ICoreGQLCardBuilderBodyItem>
	/** Whether to wrap children in CardSection */
	isSectioned?: Maybe<Scalars['Boolean']>
	/** Set true to display line separators between CardSection components */
	areSectionSeparatorsVisible?: Maybe<Scalars['Boolean']>
	/** Does card include top padding */
	hasTopPadding?: Maybe<Scalars['Boolean']>
	/** Does card include bottom padding */
	hasBottomPadding?: Maybe<Scalars['Boolean']>
	/** Set to true to remove horizontal padding */
	isFullBleed?: Maybe<Scalars['Boolean']>
}

export type ICoreGQLCardBuilderBodyItem = {
	__typename?: 'CardBuilderBodyItem'
	/** The type of ui component to use */
	type: ICoreGQLCardBuilderBodyItemType
	/** The view model that renders the UI */
	viewModel: ICoreGQLCardBuilderBodyItemViewModel
}

export enum ICoreGQLCardBuilderBodyItemType {
	Button = 'button',
	Image = 'image',
	Heading = 'heading',
	Text = 'text',
	ScoreCard = 'scoreCard',
	Toast = 'toast',
	List = 'list'
}

export type ICoreGQLCardBuilderBodyItemViewModel =
	| ICoreGQLButton
	| ICoreGQLImage
	| ICoreGQLHeading
	| ICoreGQLText
	| ICoreGQLScoreCard
	| ICoreGQLToast
	| ICoreGQLList

/** The footer of the card */
export type ICoreGQLCardBuilderFooter = {
	__typename?: 'CardBuilderFooter'
	/** Render buttons in the Card Footer */
	buttonGroup?: Maybe<ICoreGQLButtonGroup>
	/** Helper for the footer */
	helper?: Maybe<Scalars['String']>
}

/** The footer component of a card */
export type ICoreGQLCardFooter = {
	__typename?: 'CardFooter'
	/** Button group that is can be rendered in the footer */
	buttonGroup?: Maybe<ICoreGQLButtonGroup>
	/** Any help text you'd like rendered in the footer */
	helper?: Maybe<Scalars['String']>
}

/** Header of a card */
export type ICoreGQLCardHeader = {
	__typename?: 'CardHeader'
	/** Title for the card */
	title?: Maybe<Scalars['String']>
	/** Optional label to show above title */
	labelText?: Maybe<Scalars['String']>
	/** Optional icon to show above the title and before the label */
	labelIcon?: Maybe<ICoreGQLIcon>
	/** Render buttons in the Card Header */
	actions?: Maybe<Array<ICoreGQLButton>>
	/** Renders a Context Menu in the Card Header */
	contextMenu?: Maybe<ICoreGQLContextMenu>
}

export type ICoreGQLCardResponse = {
	__typename?: 'CardResponse'
	/** Unique id per skill for this card */
	id: Scalars['ID']
	/** The title of this card for rendering card Drawer */
	title?: Maybe<Scalars['String']>
	/** The page this card wants to rendered on */
	page: Scalars['String']
	/** A description rendered in the card Drawer */
	description: Scalars['String']
	/** Temporary cards are always rendered at the top */
	isTemporary?: Maybe<Scalars['Boolean']>
	/** Is this card dismissable by the user? */
	canDismiss?: Maybe<Scalars['Boolean']>
	/** The card build view model */
	cardBuilder?: Maybe<ICoreGQLCardBuilder>
}

/** A category */
export type ICoreGQLCategory = {
	__typename?: 'Category'
	id?: Maybe<Scalars['String']>
	/** The category name */
	name?: Maybe<Scalars['String']>
	/** The category icon */
	icon?: Maybe<Scalars['String']>
	/** Optionally include warnings for values not authorized in this scope */
	warnings?: Maybe<ICoreGQLWarning>
	Organizations?: Maybe<ICoreGQLCategoryBelongsToManyOrganizationsConnection>
}

/** A category */
export type ICoreGQLCategoryOrganizationsArgs = {
	limit?: Maybe<Scalars['Int']>
	order?: Maybe<Scalars['String']>
	where?: Maybe<Scalars['SequelizeJSON']>
	offset?: Maybe<Scalars['Int']>
	after?: Maybe<Scalars['String']>
	first?: Maybe<Scalars['Int']>
	before?: Maybe<Scalars['String']>
	last?: Maybe<Scalars['Int']>
}

/** A connection to a list of items. */
export type ICoreGQLCategoryBelongsToManyOrganizationsConnection = {
	__typename?: 'CategoryBelongsToManyOrganizationsConnection'
	/** Information to aid in pagination. */
	pageInfo: ICoreGQLPageInfo
	/** A list of edges. */
	edges?: Maybe<Array<Maybe<ICoreGQLCategoryBelongsToManyOrganizationsEdge>>>
	totalCount?: Maybe<Scalars['Int']>
}

/** An edge in a connection. */
export type ICoreGQLCategoryBelongsToManyOrganizationsEdge = {
	__typename?: 'CategoryBelongsToManyOrganizationsEdge'
	/** The item at the end of the edge */
	node?: Maybe<ICoreGQLOrganization>
	/** A cursor for use in pagination */
	cursor: Scalars['String']
}

export type ICoreGQLCheckbox = ICoreGQLActionExecutor & {
	__typename?: 'Checkbox'
	/** Unique identifier */
	id: Scalars['ID']
	/** A name attached to this checkbox */
	name?: Maybe<Scalars['String']>
	/** Input label and text after checkbox icon */
	label?: Maybe<Scalars['String']>
	/** Optional text to show below the label */
	postText?: Maybe<Scalars['String']>
	/** is this checkbox disabled */
	isDisabled?: Maybe<Scalars['Boolean']>
	/** Set true if the checkbox is indeterminate */
	isIndeterminate: Scalars['Boolean']
	/** is this checkbox checked? */
	isChecked?: Maybe<Scalars['Boolean']>
	/** Optional action to invoke when tapped */
	action?: Maybe<ICoreGQLAction>
}

/** Returns "isAvailable" boolean to indicate if the slug is available */
export type ICoreGQLCheckSlugResponse = {
	__typename?: 'checkSlugResponse'
	/** Whether the requested slug is available */
	isAvailable: Scalars['Boolean']
	/**
	 * The slug that was checked. This might be different than the requested slug
	 * because the requested slug is "slugified" before checking.
	 **/
	slug: Scalars['String']
}

/** Returns "isAvailable" boolean to indicate if the store num is available */
export type ICoreGQLCheckStoreNumResponse = {
	__typename?: 'checkStoreNumResponse'
	/** Whether the requested store num is available */
	isAvailable: Scalars['Boolean']
	/** The store num that was checked. */
	storeNum: Scalars['String']
}

/** a confirmation dialog */
export type ICoreGQLConfirmModal = {
	/** Title of the confirmation dialog */
	title?: Maybe<Scalars['String']>
	/** Text shown in the dialog */
	text?: Maybe<Scalars['String']>
	/** Context used to populate the text if the text contains {{handlebars}} */
	context?: Maybe<Scalars['JSON']>
	/** Do we require the person to type confirmInputValidString to be able to confirm */
	doesRequireConfirmation?: Maybe<Scalars['Boolean']>
	/** Label next to the confirmation input (if doesRequireConfirmation is true} */
	confirmInputLabel?: Maybe<Scalars['String']>
	/** The words they have to type if doesRequireConfirmation is true */
	confirmInputValidString?: Maybe<Scalars['String']>
	/** Does typing the confirmation message match case */
	confirmInputIgnoreCase?: Maybe<Scalars['Boolean']>
	/** What is the text on the cancel button? Defaults to 'Cancel' */
	cancelButtonText?: Maybe<Scalars['String']>
	/** What is the text on the confirm button? Defaults to 'Confirm' */
	confirmButtonText?: Maybe<Scalars['String']>
	/** If true, the confirm button will be red */
	isDestructive?: Maybe<Scalars['Boolean']>
}

export type ICoreGQLContextMenu = {
	__typename?: 'ContextMenu'
	/** The actions to be shown on tap/click */
	actions: Array<ICoreGQLButton>
	/** Set the width of the menu. Helpful for longer text in buttons */
	size?: Maybe<ICoreGQLContextMenuSize>
	/** Adds text to the collapsed menu */
	text?: Maybe<Scalars['String']>
	/** Overrides the default icon */
	icon?: Maybe<ICoreGQLIcon>
	/** Set true to make the button blue */
	isSimple?: Maybe<Scalars['Boolean']>
	/** Set true to make the button smaller */
	isSmall?: Maybe<Scalars['Boolean']>
	/** Set to true makes the menu close when any action is selected */
	closeOnSelectAction?: Maybe<Scalars['Boolean']>
	/** Hide the icon entirely */
	isTextOnly?: Maybe<Scalars['Boolean']>
}

export enum ICoreGQLContextMenuSize {
	Medium = 'medium',
	Large = 'large'
}

/** A create action is presented to the user when they try to create an event on the calendar. */
export type ICoreGQLCreateCalendarAction = {
	__typename?: 'CreateCalendarAction'
	/** The label for the create action */
	label: Scalars['String']
	/** The base url to load the skill view */
	host: Scalars['String']
	/** The skill view slug */
	path: Scalars['String']
	/** The CTA title */
	cta: Scalars['String']
	/** The skill jwt used as a query string when loading the skill view */
	jwt: Scalars['String']
}

/** Creates a new Group for an Organization */
export type ICoreGQLCreateGroupInput = {
	/** The id of the organization under which to create the new Group */
	organizationId: Scalars['ID']
	/** The new group's name */
	name: Scalars['String']
	/** Optionally add locations to the new group */
	locationIds?: Maybe<Array<Maybe<Scalars['ID']>>>
}

/** Returns the new "Group" */
export type ICoreGQLCreateGroupResponse = {
	__typename?: 'createGroupResponse'
	/** The new Group */
	Group?: Maybe<ICoreGQLGroup>
}

/** Input for creating a new Job */
export type ICoreGQLCreateJobInput = {
	/** The id of the organization under which to create the new Job */
	organizationId: Scalars['ID']
	/** The new jobs's name */
	name: Scalars['String']
	/**
	 * The base role for this job. May be: "groupManager", "manager", or "teammate".
	 * If "acl" is omitted, the permissions will be inherited from the default role.
	 **/
	role: Scalars['String']
	/** A key/value pair of ACLs for this Job */
	acl?: Maybe<Scalars['JSON']>
	/** A key/value pair of ACLs that require the user to be online */
	inStoreAcl?: Maybe<Scalars['JSON']>
}

/** Returns the new "Job" */
export type ICoreGQLCreateJobResponse = {
	__typename?: 'createJobResponse'
	/** The new Job */
	Job?: Maybe<ICoreGQLJob>
}

/** Creates a new Location for an Organization */
export type ICoreGQLCreateLocationInput = {
	/** The id of the organization under which to create the new Location */
	organizationId: Scalars['ID']
	/** The new location's name */
	name: Scalars['String']
	/** The new location's slug. If not passed, will attempt to use the slugified location name. */
	slug?: Maybe<Scalars['String']>
	/** Address line 1 */
	addressLine1: Scalars['String']
	/** Address line 2 */
	addressLine2?: Maybe<Scalars['String']>
	/** The name of the city */
	addressCity: Scalars['String']
	/** The state abbreviation */
	addressState: Scalars['String']
	/** The zip code */
	addressZip: Scalars['String']
	/** The country */
	addressCountry: Scalars['String']
	/** The main phone number for the Location */
	phoneNumber?: Maybe<Scalars['String']>
	/**
	 * The timezone (https://en.wikipedia.org/wiki/List_of_tz_database_time_zones).
	 * If "timezone", "lat", or "lng" are omitted, a geocode lookup will be done to
	 * fill these fields.
	 **/
	timezone?: Maybe<Scalars['String']>
	/** The lat of the Location. If "timezone", "lat", or "lng" are omitted, a geocode lookup will be done to fill these fields. */
	lat?: Maybe<Scalars['String']>
	/** The lng of the Location. If "timezone", "lat", or "lng" are omitted, a geocode lookup will be done to fill these fields. */
	lng?: Maybe<Scalars['String']>
	/** List of skill slugs to immediately enable at the Location */
	installSlugs?: Maybe<Array<Maybe<Scalars['String']>>>
	/** The Organization's Location number or unique identifier */
	storeNum?: Maybe<Scalars['String']>
}

/** Returns the new "Location" */
export type ICoreGQLCreateLocationResponse = {
	__typename?: 'createLocationResponse'
	/** The new Location */
	Location?: Maybe<ICoreGQLLocation>
}

/** Returns the status of the seed */
export type ICoreGQLCreateOrganizationSeedResponse = {
	__typename?: 'createOrganizationSeedResponse'
	/** The status of the seeding an org */
	status?: Maybe<Scalars['String']>
}

/** Returns the status of the seed */
export type ICoreGQLCreateSkillSeedResponse = {
	__typename?: 'createSkillSeedResponse'
	/** The status of emitting seeding to the skills */
	payload?: Maybe<Scalars['JSON']>
	/** The skill that responded */
	Skill?: Maybe<ICoreGQLSkill>
	/** The error from emitting seeding to the skills */
	error?: Maybe<Scalars['JSON']>
}

/** A dashboard card */
export type ICoreGQLDashboardCard = {
	__typename?: 'DashboardCard'
	id?: Maybe<Scalars['String']>
	/** The page in a skill the DashboardCard goes with. */
	page?: Maybe<Scalars['String']>
	/** The id from a Skill's card the DashboardCard goes with. */
	skillCardId?: Maybe<Scalars['String']>
	/** The DashboardCards order on a page for this grouping */
	order?: Maybe<Scalars['Int']>
	/** Whether this DashboardCard was dismissed by the user */
	isDismissed?: Maybe<Scalars['Boolean']>
	/** Whether this DashboardCard was dismissed by the user */
	isTemporary?: Maybe<Scalars['Boolean']>
	createdAt?: Maybe<Scalars['Date']>
	updatedAt?: Maybe<Scalars['Date']>
	deletedAt?: Maybe<Scalars['Date']>
	UserId?: Maybe<Scalars['String']>
	SkillId?: Maybe<Scalars['String']>
	/** Optionally include warnings for values not authorized in this scope */
	warnings?: Maybe<ICoreGQLWarning>
	User?: Maybe<ICoreGQLUser>
	Skill?: Maybe<ICoreGQLSkill>
}

/** A dashboard card */
export type ICoreGQLDashboardCardUserArgs = {
	where?: Maybe<Scalars['SequelizeJSON']>
}

/** A dashboard card */
export type ICoreGQLDashboardCardSkillArgs = {
	where?: Maybe<Scalars['SequelizeJSON']>
}

/** The response for debugGetUserJwts */
export type ICoreGQLDebugGetUserJwtsResponse = {
	__typename?: 'debugGetUserJwtsResponse'
	/** Array of the user responses */
	users: Array<Maybe<ICoreGQLDebugGetUserJwtsUserJwt>>
}

/** A single user with authentication info */
export type ICoreGQLDebugGetUserJwtsUserJwt = {
	__typename?: 'debugGetUserJwtsUserJwt'
	/** The user */
	User: ICoreGQLUser
	/** The jwt */
	jwt: Scalars['String']
	/** The login link w/ jwt */
	link: Scalars['String']
	/** The UserLocation for this record */
	UserLocations?: Maybe<Array<Maybe<ICoreGQLUserLocation>>>
}

/** Details of the event to trigger */
export type ICoreGQLDebugTriggerEventInput = {
	eventType: Scalars['String']
	/** The organization for this event */
	organizationId?: Maybe<Scalars['ID']>
	/** The location for this event */
	locationId?: Maybe<Scalars['ID']>
	/** The user to trigger this event as */
	userId?: Maybe<Scalars['ID']>
	/** Only send to these skills */
	toSkillIds?: Maybe<Array<Maybe<Scalars['ID']>>>
	/** Optionally add locations to the new group */
	timeout?: Maybe<Scalars['Int']>
	/** The payload in JSON format */
	payload?: Maybe<Scalars['JSON']>
	/**
	 * The payload in JSON format but in a string. This is to get around the GraphQL
	 * limitation of not allowing quoted keys. This OR payload can be passed, but not both
	 **/
	payloadJSONAsString?: Maybe<Scalars['String']>
}

/** The response for debugTriggerEventJwts */
export type ICoreGQLDebugTriggerEventResponse = {
	__typename?: 'debugTriggerEventResponse'
	/** Array of the responses */
	responses?: Maybe<Scalars['JSON']>
}

/** Input for deleting file items */
export type ICoreGQLDeleteFileItemsInput = {
	/** The file item ids to delete */
	fileItemIds: Array<Maybe<Scalars['ID']>>
}

/** Returns the status */
export type ICoreGQLDeleteFileItemsResponse = {
	__typename?: 'deleteFileItemsResponse'
	/** Will be "success" */
	status?: Maybe<Scalars['String']>
}

/** Input for delete a Group for an Organization */
export type ICoreGQLDeleteGroupInput = {
	/** The id of the group */
	id: Scalars['ID']
}

/** Returns status=success */
export type ICoreGQLDeleteGroupResponse = {
	__typename?: 'deleteGroupResponse'
	/** Will be "success" */
	status?: Maybe<Scalars['String']>
}

/** Input for delete a Job */
export type ICoreGQLDeleteJobInput = {
	/** The id of the job */
	id: Scalars['ID']
}

/** Returns status=success */
export type ICoreGQLDeleteJobResponse = {
	__typename?: 'deleteJobResponse'
	/** Will be "success" */
	status?: Maybe<Scalars['String']>
}

/** Delete a Location */
export type ICoreGQLDeleteLocationInput = {
	/** The id of the Location to delete */
	id: Scalars['ID']
}

/** Returns a status=success if the operation succeeded */
export type ICoreGQLDeleteLocationResponse = {
	__typename?: 'deleteLocationResponse'
	/** Will be "success" */
	status?: Maybe<Scalars['String']>
}

/** Returns the status of the seed deletion */
export type ICoreGQLDeleteSkillSeedResponse = {
	__typename?: 'deleteSkillSeedResponse'
	/** The status of emitting seeding to the skills */
	payload?: Maybe<Scalars['JSON']>
	/** The skill that responded */
	Skill?: Maybe<ICoreGQLSkill>
	/** The error from emitting seeding to the skills */
	error?: Maybe<Scalars['JSON']>
}

/** Input for disabling a skill at a location */
export type ICoreGQLDisableSkillsInput = {
	/** The id of the location to enable the skills at */
	locationId: Scalars['ID']
	/** Array of skill ids to enable */
	skillIds: Array<Maybe<Scalars['ID']>>
}

/** Returns the status */
export type ICoreGQLDisableSkillsResponse = {
	__typename?: 'disableSkillsResponse'
	/** Will be "success" */
	status?: Maybe<Scalars['String']>
}

/** Input for enabling a skill at an organization */
export type ICoreGQLEnableSkillsInput = {
	/** The id of the location to enable the skills at */
	locationId: Scalars['ID']
	/** Array of skill ids to enable */
	skillIds: Array<Maybe<Scalars['ID']>>
}

/** Returns the status */
export type ICoreGQLEnableSkillsResponse = {
	__typename?: 'enableSkillsResponse'
	/** Will be "success" */
	status?: Maybe<Scalars['String']>
}

/** An event error. */
export type ICoreGQLEventError = {
	__typename?: 'EventError'
	/** An http code */
	code: Scalars['Int']
	/** A name that can be used to identify this error. INVALID_PARAMETERS for example */
	name: Scalars['String']
	/** A description of the error that will be useful to a developer */
	reason: Scalars['String']
	/** A description of the error that can be displayed to the user */
	friendlyReason: Scalars['String']
	/** The status */
	status: Scalars['String']
}

/** An event warning. */
export type ICoreGQLEventWarning = {
	__typename?: 'EventWarning'
	/** A name that can be used to identify this warning. INVALID_PARAMETERS for example */
	name: Scalars['String']
	/** A description of the warning that will be useful to a developer */
	reason: Scalars['String']
	/** A description of the warning that can be displayed to the user */
	friendlyReason: Scalars['String']
}

/** An example item with randomly generated data */
export type ICoreGQLExampleStreamItem = {
	__typename?: 'ExampleStreamItem'
	/** A random message that will be fired every 10 seconds */
	message?: Maybe<Scalars['String']>
	/** A timestamp for when this message is generated */
	sentAt?: Maybe<Scalars['String']>
}

export type ICoreGQLExecuteActionEmitInput = {
	/** The action to emit. This can be passed straight through from the FE. */
	action: ICoreGQLActionEmitEventInput
}

export type ICoreGQLExecuteActionEmitResponse = {
	__typename?: 'ExecuteActionEmitResponse'
	/** The skill that responded to this event */
	Skill: ICoreGQLSkill
	/** [PLACEHOLDER - NOT IMPLEMENTED] The updated cards after this event */
	cardBuilder?: Maybe<ICoreGQLCardBuilder>
	/** The updated calendar events after this event */
	calendarEvents?: Maybe<Array<Maybe<ICoreGQLCalendarEvent>>>
	/** Details if an error occurs */
	error?: Maybe<ICoreGQLEventError>
	/** Assuming the action was successful but with warnings, this array will be populated with those warnings. */
	warnings?: Maybe<Array<Maybe<ICoreGQLEventWarning>>>
}

/** Wraps a standard list or list item and makes it collapsable */
export type ICoreGQLExpandableListItem = {
	__typename?: 'ExpandableListItem'
	/** Unique id for UI caching */
	id: Scalars['ID']
	/** Base list item props */
	item: ICoreGQLListItem
	/** Optional; adds a nested list */
	list?: Maybe<ICoreGQLList>
	/** Optional; adds multiple lists nested at the same level */
	lists?: Maybe<Array<ICoreGQLList>>
	/** Optional icon for collapsed state */
	collapsedIconName?: Maybe<Scalars['String']>
	/** Optional icon for expanded state */
	expandedIconName?: Maybe<Scalars['String']>
}

/** A single feed item */
export type ICoreGQLFeedItem = {
	__typename?: 'FeedItem'
	id?: Maybe<Scalars['String']>
	/** The feed item body */
	body?: Maybe<Scalars['SequelizeJSON']>
	createdAt?: Maybe<Scalars['Date']>
	updatedAt?: Maybe<Scalars['Date']>
	SkillId?: Maybe<Scalars['String']>
	LocationId?: Maybe<Scalars['String']>
	OrganizationId?: Maybe<Scalars['String']>
	ToUserId?: Maybe<Scalars['String']>
	FromUserId?: Maybe<Scalars['String']>
	/** Optionally include warnings for values not authorized in this scope */
	warnings?: Maybe<ICoreGQLWarning>
	Skill?: Maybe<ICoreGQLSkill>
	Location?: Maybe<ICoreGQLLocation>
	Organization?: Maybe<ICoreGQLOrganization>
	Message?: Maybe<ICoreGQLMessage>
	ToUser?: Maybe<ICoreGQLUser>
	FromUser?: Maybe<ICoreGQLUser>
}

/** A single feed item */
export type ICoreGQLFeedItemSkillArgs = {
	where?: Maybe<Scalars['SequelizeJSON']>
}

/** A single feed item */
export type ICoreGQLFeedItemLocationArgs = {
	where?: Maybe<Scalars['SequelizeJSON']>
}

/** A single feed item */
export type ICoreGQLFeedItemOrganizationArgs = {
	where?: Maybe<Scalars['SequelizeJSON']>
}

/** A single feed item */
export type ICoreGQLFeedItemMessageArgs = {
	where?: Maybe<Scalars['SequelizeJSON']>
}

/** A single feed item */
export type ICoreGQLFeedItemToUserArgs = {
	where?: Maybe<Scalars['SequelizeJSON']>
}

/** A single feed item */
export type ICoreGQLFeedItemFromUserArgs = {
	where?: Maybe<Scalars['SequelizeJSON']>
}

/** A connection to a list of items. */
export type ICoreGQLFeedItemConnection = {
	__typename?: 'FeedItemConnection'
	/** Information to aid in pagination. */
	pageInfo: ICoreGQLPageInfo
	/** A list of edges. */
	edges?: Maybe<Array<Maybe<ICoreGQLFeedItemEdge>>>
	totalCount?: Maybe<Scalars['Int']>
}

/** An edge in a connection. */
export type ICoreGQLFeedItemEdge = {
	__typename?: 'FeedItemEdge'
	/** The item at the end of the edge */
	node?: Maybe<ICoreGQLFeedItem>
	/** A cursor for use in pagination */
	cursor: Scalars['String']
}

/** Responds with a FeedItem */
export type ICoreGQLFeedItemStreamResponse = {
	__typename?: 'FeedItemStreamResponse'
	/** A feed item */
	FeedItem?: Maybe<ICoreGQLFeedItem>
}

/** A single file */
export type ICoreGQLFileItem = {
	__typename?: 'FileItem'
	id?: Maybe<Scalars['String']>
	/** The File name */
	name?: Maybe<Scalars['String']>
	/** The File type */
	mimeType?: Maybe<Scalars['String']>
	/** The File extension */
	ext?: Maybe<Scalars['String']>
	/** "image", "video", or "other" */
	type?: Maybe<Scalars['String']>
	/** The size of the file in bytes */
	sizeBytes?: Maybe<Scalars['String']>
	/** The width (if an image or video) */
	width?: Maybe<Scalars['Int']>
	/** The height (if an image or video) */
	height?: Maybe<Scalars['Int']>
	/** A reference id that can be used to associate this file to a model within a skill that is using skill db. */
	refId?: Maybe<Scalars['String']>
	createdAt?: Maybe<Scalars['Date']>
	updatedAt?: Maybe<Scalars['Date']>
	deletedAt?: Maybe<Scalars['Date']>
	SkillId?: Maybe<Scalars['String']>
	LocationId?: Maybe<Scalars['String']>
	OrganizationId?: Maybe<Scalars['String']>
	GuestId?: Maybe<Scalars['String']>
	TeammateId?: Maybe<Scalars['String']>
	/** Optionally include warnings for values not authorized in this scope */
	warnings?: Maybe<ICoreGQLWarning>
	Skill?: Maybe<ICoreGQLSkill>
	Location?: Maybe<ICoreGQLLocation>
	Organization?: Maybe<ICoreGQLOrganization>
	Guest?: Maybe<ICoreGQLUser>
	Teammate?: Maybe<ICoreGQLUser>
	/** Additional info about the file */
	meta?: Maybe<Scalars['JSON']>
	/** The signed url to access the file */
	urls?: Maybe<Array<Maybe<ICoreGQLFileItemUrl>>>
}

/** A single file */
export type ICoreGQLFileItemSkillArgs = {
	where?: Maybe<Scalars['SequelizeJSON']>
}

/** A single file */
export type ICoreGQLFileItemLocationArgs = {
	where?: Maybe<Scalars['SequelizeJSON']>
}

/** A single file */
export type ICoreGQLFileItemOrganizationArgs = {
	where?: Maybe<Scalars['SequelizeJSON']>
}

/** A single file */
export type ICoreGQLFileItemGuestArgs = {
	where?: Maybe<Scalars['SequelizeJSON']>
}

/** A single file */
export type ICoreGQLFileItemTeammateArgs = {
	where?: Maybe<Scalars['SequelizeJSON']>
}

/** A connection to a list of items. */
export type ICoreGQLFileItemConnection = {
	__typename?: 'FileItemConnection'
	/** Information to aid in pagination. */
	pageInfo: ICoreGQLPageInfo
	/** A list of edges. */
	edges?: Maybe<Array<Maybe<ICoreGQLFileItemEdge>>>
	totalCount?: Maybe<Scalars['Int']>
}

/** An edge in a connection. */
export type ICoreGQLFileItemEdge = {
	__typename?: 'FileItemEdge'
	/** The item at the end of the edge */
	node?: Maybe<ICoreGQLFileItem>
	/** A cursor for use in pagination */
	cursor: Scalars['String']
}

/** An object with information about the file */
export type ICoreGQLFileItemUrl = {
	__typename?: 'FileItemUrl'
	/** Either "original" or "resized". A FileItem should always have an orignal at minimum */
	type: Scalars['String']
	/** URL to access the file */
	signedUrl: Scalars['String']
	/** The filename */
	filename: Scalars['String']
	/** The file extension */
	ext?: Maybe<Scalars['String']>
	/** The width in pixels (for images and videos) */
	width?: Maybe<Scalars['Int']>
	/** The height in pixels (for images and videos) */
	height?: Maybe<Scalars['Int']>
	/** The file mime type */
	mimeType?: Maybe<Scalars['String']>
	/** The requested image size name used to build the filename. */
	imageSize?: Maybe<Scalars['String']>
	/** The filesize */
	sizeBytes?: Maybe<Scalars['Int']>
}

/** The requested settings */
export type ICoreGQLGetSettingsResponse = {
	__typename?: 'GetSettingsResponse'
	/** The settings */
	settings?: Maybe<Scalars['JSON']>
}

export type ICoreGQLGetSkillConnectionSettingsResponse = {
	__typename?: 'GetSkillConnectionSettingsResponse'
	/** A JWT token that can be used to load a skill for the user */
	token: Scalars['String']
	/** The base url for the skill. Use this to build the URL with the 'route' and 'routeParams' */
	host: Scalars['String']
}

/** A group */
export type ICoreGQLGroup = {
	__typename?: 'Group'
	id?: Maybe<Scalars['String']>
	/** The group name */
	name?: Maybe<Scalars['String']>
	/** Whether this is a default group. Default groups may not be deleted */
	isDefault?: Maybe<Scalars['Boolean']>
	OrganizationId?: Maybe<Scalars['String']>
	/** Optionally include warnings for values not authorized in this scope */
	warnings?: Maybe<ICoreGQLWarning>
	Organization?: Maybe<ICoreGQLOrganization>
	LocationGroups?: Maybe<ICoreGQLGroupHasManyLocationGroupsConnection>
	UserGroups?: Maybe<ICoreGQLGroupHasManyUserGroupsConnection>
	Locations?: Maybe<ICoreGQLGroupBelongsToManyLocationsConnection>
	Users?: Maybe<ICoreGQLGroupBelongsToManyUsersConnection>
}

/** A group */
export type ICoreGQLGroupOrganizationArgs = {
	where?: Maybe<Scalars['SequelizeJSON']>
}

/** A group */
export type ICoreGQLGroupLocationGroupsArgs = {
	limit?: Maybe<Scalars['Int']>
	order?: Maybe<Scalars['String']>
	where?: Maybe<Scalars['SequelizeJSON']>
	offset?: Maybe<Scalars['Int']>
	after?: Maybe<Scalars['String']>
	first?: Maybe<Scalars['Int']>
	before?: Maybe<Scalars['String']>
	last?: Maybe<Scalars['Int']>
}

/** A group */
export type ICoreGQLGroupUserGroupsArgs = {
	limit?: Maybe<Scalars['Int']>
	order?: Maybe<Scalars['String']>
	where?: Maybe<Scalars['SequelizeJSON']>
	offset?: Maybe<Scalars['Int']>
	after?: Maybe<Scalars['String']>
	first?: Maybe<Scalars['Int']>
	before?: Maybe<Scalars['String']>
	last?: Maybe<Scalars['Int']>
}

/** A group */
export type ICoreGQLGroupLocationsArgs = {
	limit?: Maybe<Scalars['Int']>
	order?: Maybe<Scalars['String']>
	where?: Maybe<Scalars['SequelizeJSON']>
	offset?: Maybe<Scalars['Int']>
	after?: Maybe<Scalars['String']>
	first?: Maybe<Scalars['Int']>
	before?: Maybe<Scalars['String']>
	last?: Maybe<Scalars['Int']>
}

/** A group */
export type ICoreGQLGroupUsersArgs = {
	limit?: Maybe<Scalars['Int']>
	order?: Maybe<Scalars['String']>
	where?: Maybe<Scalars['SequelizeJSON']>
	offset?: Maybe<Scalars['Int']>
	after?: Maybe<Scalars['String']>
	first?: Maybe<Scalars['Int']>
	before?: Maybe<Scalars['String']>
	last?: Maybe<Scalars['Int']>
}

/** A connection to a list of items. */
export type ICoreGQLGroupBelongsToManyLocationsConnection = {
	__typename?: 'GroupBelongsToManyLocationsConnection'
	/** Information to aid in pagination. */
	pageInfo: ICoreGQLPageInfo
	/** A list of edges. */
	edges?: Maybe<Array<Maybe<ICoreGQLGroupBelongsToManyLocationsEdge>>>
	totalCount?: Maybe<Scalars['Int']>
}

/** An edge in a connection. */
export type ICoreGQLGroupBelongsToManyLocationsEdge = {
	__typename?: 'GroupBelongsToManyLocationsEdge'
	/** The item at the end of the edge */
	node?: Maybe<ICoreGQLLocation>
	/** A cursor for use in pagination */
	cursor: Scalars['String']
}

/** A connection to a list of items. */
export type ICoreGQLGroupBelongsToManyUsersConnection = {
	__typename?: 'GroupBelongsToManyUsersConnection'
	/** Information to aid in pagination. */
	pageInfo: ICoreGQLPageInfo
	/** A list of edges. */
	edges?: Maybe<Array<Maybe<ICoreGQLGroupBelongsToManyUsersEdge>>>
	totalCount?: Maybe<Scalars['Int']>
}

/** An edge in a connection. */
export type ICoreGQLGroupBelongsToManyUsersEdge = {
	__typename?: 'GroupBelongsToManyUsersEdge'
	/** The item at the end of the edge */
	node?: Maybe<ICoreGQLUser>
	/** A cursor for use in pagination */
	cursor: Scalars['String']
}

/** A connection to a list of items. */
export type ICoreGQLGroupConnection = {
	__typename?: 'GroupConnection'
	/** Information to aid in pagination. */
	pageInfo: ICoreGQLPageInfo
	/** A list of edges. */
	edges?: Maybe<Array<Maybe<ICoreGQLGroupEdge>>>
	totalCount?: Maybe<Scalars['Int']>
}

/** An edge in a connection. */
export type ICoreGQLGroupEdge = {
	__typename?: 'GroupEdge'
	/** The item at the end of the edge */
	node?: Maybe<ICoreGQLGroup>
	/** A cursor for use in pagination */
	cursor: Scalars['String']
}

/** A connection to a list of items. */
export type ICoreGQLGroupHasManyLocationGroupsConnection = {
	__typename?: 'GroupHasManyLocationGroupsConnection'
	/** Information to aid in pagination. */
	pageInfo: ICoreGQLPageInfo
	/** A list of edges. */
	edges?: Maybe<Array<Maybe<ICoreGQLGroupHasManyLocationGroupsEdge>>>
	totalCount?: Maybe<Scalars['Int']>
}

/** An edge in a connection. */
export type ICoreGQLGroupHasManyLocationGroupsEdge = {
	__typename?: 'GroupHasManyLocationGroupsEdge'
	/** The item at the end of the edge */
	node?: Maybe<ICoreGQLLocationGroup>
	/** A cursor for use in pagination */
	cursor: Scalars['String']
}

/** A connection to a list of items. */
export type ICoreGQLGroupHasManyUserGroupsConnection = {
	__typename?: 'GroupHasManyUserGroupsConnection'
	/** Information to aid in pagination. */
	pageInfo: ICoreGQLPageInfo
	/** A list of edges. */
	edges?: Maybe<Array<Maybe<ICoreGQLGroupHasManyUserGroupsEdge>>>
	totalCount?: Maybe<Scalars['Int']>
}

/** An edge in a connection. */
export type ICoreGQLGroupHasManyUserGroupsEdge = {
	__typename?: 'GroupHasManyUserGroupsEdge'
	/** The item at the end of the edge */
	node?: Maybe<ICoreGQLUserGroup>
	/** A cursor for use in pagination */
	cursor: Scalars['String']
}

export type ICoreGQLHeading = {
	__typename?: 'Heading'
	/** Id for view caching */
	id: Scalars['ID']
	/** HTML rendered directly */
	html?: Maybe<Scalars['String']>
	/** Text rendered in the header */
	text?: Maybe<Scalars['String']>
	/** The weight of the heading, H1 and beyond */
	weight?: Maybe<ICoreGQLHeadingWeight>
}

export enum ICoreGQLHeadingWeight {
	H1 = 'h1',
	H2 = 'h2',
	H3 = 'h3',
	H4 = 'h4',
	H5 = 'h5',
	H6 = 'h6',
	P = 'p'
}

export type ICoreGQLIcon = {
	__typename?: 'Icon'
	/** Id for ui caching */
	id: Scalars['ID']
	/** The name of the icon to render. If not found, this will return null. */
	name?: Maybe<Scalars['String']>
	/** Set true to render an icon with a stroke, but no fill */
	isLineIcon?: Maybe<Scalars['Boolean']>
}

/** A basic image tag */
export type ICoreGQLImage = {
	__typename?: 'Image'
	/** For UI caching */
	id: Scalars['ID']
	/** Where to pull the image from */
	src: Scalars['String']
	/** Rendered as the alt tag for hovers */
	alt?: Maybe<Scalars['String']>
}

/** List of possible matches found in core */
export type ICoreGQLImportBigSearchMatch = {
	__typename?: 'importBigSearchMatch'
	/** The UUID of the match */
	id: Scalars['String']
	/** Text to render in the title of the list item */
	title: Scalars['String']
	/** Text to render as the subtitle of the list item */
	subtitle?: Maybe<Scalars['String']>
	/** Url to the image to show for this record */
	image?: Maybe<Scalars['String']>
}

export type ICoreGQLImportBigSearchMatchGroup = {
	__typename?: 'importBigSearchMatchGroup'
	/**
	 * The title to show at the top of merge component. Make sure it describes the
	 * action the human is about to take. Something like, "Merge users?"
	 **/
	matchGroupTitle: Scalars['String']
	/** Your chance to give the human handling the merge a little more details about what is happening. */
	matchGroupDescription?: Maybe<Scalars['String']>
	/** The label shown above the matches you found in the platform. Could be "Existing User". */
	matchingRecordLabel: Scalars['String']
	/**
	 * The label show above the record the user selected from search that is now
	 * being considered for import. Example: "Imported User"
	 **/
	importingRecordLabel: Scalars['String']
	/** A list of possible matches the user can choose to merge to */
	matches: Array<ICoreGQLImportBigSearchMatch>
}

/** Response to the Big Search import action */
export type ICoreGQLImportBigSearchResult = {
	__typename?: 'importBigSearchResult'
	/** If the import was successful, this is where the resulting record will be */
	successfulImport?: Maybe<ICoreGQLBigSearchResultsRecord>
	/** If the import resulted in a possible match (that requires human intervention), it'll show here. */
	matchGroup?: Maybe<ICoreGQLImportBigSearchMatchGroup>
}

/** Import a Big Search result */
export type ICoreGQLImportBigSearchResultInput = {
	/** The section this record was selectod from */
	section: Scalars['String']
	/** An arbitrary id for the selected record */
	id: Scalars['String']
	/** ID of the current organization */
	organizationId: Scalars['ID']
	/** ID of the location you want to import to */
	locationId?: Maybe<Scalars['ID']>
	/** The UUID of the match the user selected and wants to merge into */
	matchId?: Maybe<Scalars['ID']>
}

/** Input for installing a skill at an organization */
export type ICoreGQLInstallSkillsInput = {
	/** The id of the organization under which to create the new Job */
	organizationId: Scalars['ID']
	/** Array of skill ids to install */
	skillIds: Array<Maybe<Scalars['ID']>>
	/** Array of locationIds to enable the skill */
	enableAtLocationIds?: Maybe<Array<Maybe<Scalars['ID']>>>
}

/** Returns the status */
export type ICoreGQLInstallSkillsResponse = {
	__typename?: 'installSkillsResponse'
	/** Will be "success" */
	status?: Maybe<Scalars['String']>
}

/** Inputs for inviting a user */
export type ICoreGQLInviteUserInput = {
	/** The id of the organization */
	organizationId: Scalars['ID']
	/** The phone number of the user to invite */
	phoneNumber: Scalars['String']
	/** The first name of the user to invite */
	firstName?: Maybe<Scalars['String']>
	/** The last name of the user to invite */
	lastName?: Maybe<Scalars['String']>
	/** Array of roles to invite the user to */
	inviteRoles: Array<Maybe<ICoreGQLAddRolesType>>
}

/** The invite response */
export type ICoreGQLInviteUserResponse = {
	__typename?: 'inviteUserResponse'
	/** If successful, will be "success" */
	status?: Maybe<Scalars['String']>
}

/** A job */
export type ICoreGQLJob = {
	__typename?: 'Job'
	id?: Maybe<Scalars['String']>
	/** Whether this is a default job. Default jobs may not be changed or have their ACLs updated */
	isDefault?: Maybe<Scalars['Boolean']>
	/**
	 * The base role for this job. Will initially inherit the default values for this
	 * role but (if it is not a default Job) may have custom permissions set after
	 * creation. Will be one of: "owner", "groupManager", "manager", "teammate", "guest"
	 **/
	role?: Maybe<Scalars['String']>
	/** The Job name. This should be a user-facing friendly name */
	name?: Maybe<Scalars['String']>
	/** Custom ACL list of permissions. This will be ignored if isDefault=true. */
	acl?: Maybe<Scalars['SequelizeJSON']>
	/** Custom ACL list of permission overrides requiring a user to be online. This will be ignored if isDefault=true. */
	inStoreAcl?: Maybe<Scalars['SequelizeJSON']>
	createdAt?: Maybe<Scalars['Date']>
	OrganizationId?: Maybe<Scalars['String']>
	/** Optionally include warnings for values not authorized in this scope */
	warnings?: Maybe<ICoreGQLWarning>
	Organization?: Maybe<ICoreGQLOrganization>
	UserLocations?: Maybe<ICoreGQLJobHasManyUserLocationsConnection>
	UserGroups?: Maybe<ICoreGQLJobHasManyUserGroupsConnection>
	/** A list of all permissions for this Job. Includes whether this job can perform a certain action in store / out of store. */
	jobPermissions?: Maybe<Array<Maybe<ICoreGQLJobPermission>>>
	/** The number of users that are assigned to this job */
	userCount: Scalars['Int']
}

/** A job */
export type ICoreGQLJobOrganizationArgs = {
	where?: Maybe<Scalars['SequelizeJSON']>
}

/** A job */
export type ICoreGQLJobUserLocationsArgs = {
	limit?: Maybe<Scalars['Int']>
	order?: Maybe<Scalars['String']>
	where?: Maybe<Scalars['SequelizeJSON']>
	offset?: Maybe<Scalars['Int']>
	after?: Maybe<Scalars['String']>
	first?: Maybe<Scalars['Int']>
	before?: Maybe<Scalars['String']>
	last?: Maybe<Scalars['Int']>
}

/** A job */
export type ICoreGQLJobUserGroupsArgs = {
	limit?: Maybe<Scalars['Int']>
	order?: Maybe<Scalars['String']>
	where?: Maybe<Scalars['SequelizeJSON']>
	offset?: Maybe<Scalars['Int']>
	after?: Maybe<Scalars['String']>
	first?: Maybe<Scalars['Int']>
	before?: Maybe<Scalars['String']>
	last?: Maybe<Scalars['Int']>
}

/** A connection to a list of items. */
export type ICoreGQLJobConnection = {
	__typename?: 'JobConnection'
	/** Information to aid in pagination. */
	pageInfo: ICoreGQLPageInfo
	/** A list of edges. */
	edges?: Maybe<Array<Maybe<ICoreGQLJobEdge>>>
	totalCount?: Maybe<Scalars['Int']>
}

/** An edge in a connection. */
export type ICoreGQLJobEdge = {
	__typename?: 'JobEdge'
	/** The item at the end of the edge */
	node?: Maybe<ICoreGQLJob>
	/** A cursor for use in pagination */
	cursor: Scalars['String']
}

/** A connection to a list of items. */
export type ICoreGQLJobHasManyUserGroupsConnection = {
	__typename?: 'JobHasManyUserGroupsConnection'
	/** Information to aid in pagination. */
	pageInfo: ICoreGQLPageInfo
	/** A list of edges. */
	edges?: Maybe<Array<Maybe<ICoreGQLJobHasManyUserGroupsEdge>>>
	totalCount?: Maybe<Scalars['Int']>
}

/** An edge in a connection. */
export type ICoreGQLJobHasManyUserGroupsEdge = {
	__typename?: 'JobHasManyUserGroupsEdge'
	/** The item at the end of the edge */
	node?: Maybe<ICoreGQLUserGroup>
	/** A cursor for use in pagination */
	cursor: Scalars['String']
}

/** A connection to a list of items. */
export type ICoreGQLJobHasManyUserLocationsConnection = {
	__typename?: 'JobHasManyUserLocationsConnection'
	/** Information to aid in pagination. */
	pageInfo: ICoreGQLPageInfo
	/** A list of edges. */
	edges?: Maybe<Array<Maybe<ICoreGQLJobHasManyUserLocationsEdge>>>
	totalCount?: Maybe<Scalars['Int']>
}

/** An edge in a connection. */
export type ICoreGQLJobHasManyUserLocationsEdge = {
	__typename?: 'JobHasManyUserLocationsEdge'
	/** The item at the end of the edge */
	node?: Maybe<ICoreGQLUserLocation>
	/** A cursor for use in pagination */
	cursor: Scalars['String']
}

/** A representation of a job acl permissions */
export type ICoreGQLJobPermission = {
	__typename?: 'JobPermission'
	/** The name of where these permissions come from. "Booking" for example. */
	name: Scalars['String']
	/** The slug for where these permissions come from. "booking" for example. */
	slug: Scalars['String']
	/** A list of the individual acls */
	acls: Array<Maybe<ICoreGQLJobPermissionAcl>>
}

/** A single acl */
export type ICoreGQLJobPermissionAcl = {
	__typename?: 'JobPermissionAcl'
	/** The permission string for this acl */
	permission: Scalars['String']
	/** A friendly, short description of the permission */
	label: Scalars['String']
	/** A longer description of the permission */
	description?: Maybe<Scalars['String']>
	/** The type of permission. Either "location" or "organization" */
	type: Scalars['String']
	/** The default permissions by role */
	defaults?: Maybe<ICoreGQLJobPermissionAclDefault>
	/** The current value for this Job whether it has permission or not */
	aclValue: Scalars['Boolean']
	/** The current value for this Job whether it has permission in store or not */
	inStoreAclValue: Scalars['Boolean']
}

/** The defaults of an acl */
export type ICoreGQLJobPermissionAclDefault = {
	__typename?: 'JobPermissionAclDefault'
	/** The default permission for a groupManager role. This may be overridden on a Job. */
	groupManager?: Maybe<Scalars['Boolean']>
	/** The default permission for a manager role. This may be overridden on a Job. */
	manager?: Maybe<Scalars['Boolean']>
	/** The default permission for a teammate role. This may be overridden on a Job. */
	teammate?: Maybe<Scalars['Boolean']>
}

/** A list of list items */
export type ICoreGQLList = {
	__typename?: 'List'
	/** Unique id for UI caching */
	id: Scalars['ID']
	/** List Header */
	header?: Maybe<ICoreGQLListHeader>
	/** List items */
	items?: Maybe<Array<ICoreGQLListItemTypes>>
	/** Set true to make the list smaller */
	isSmall?: Maybe<Scalars['Boolean']>
	/** Set to true to show separators between list items */
	areSeparatorsVisible?: Maybe<Scalars['Boolean']>
	/** Optional: set whether to use checkbox or radio for selectable list items */
	selectableType?: Maybe<ICoreGQLListItemSelectableType>
}

export type ICoreGQLListHeader = {
	__typename?: 'ListHeader'
	/** Title to render in the header */
	title: Scalars['String']
	/** Optional subtitle text */
	subtitle?: Maybe<Scalars['String']>
	/** Set true for small lists */
	isSmall?: Maybe<Scalars['Boolean']>
	/** Buttons to associate with the list header */
	actions?: Maybe<Array<ICoreGQLButton>>
}

/** A List is made up of ListItems */
export type ICoreGQLListItem = {
	__typename?: 'ListItem'
	/** Unique id for UI caching */
	id: Scalars['ID']
	/** Title text */
	title: Scalars['String']
	/** Optional subtitle text */
	subtitle?: Maybe<Scalars['String']>
	/** Optional note text */
	note?: Maybe<Scalars['String']>
	/** Can render this item as expandable */
	isExpandable?: Maybe<Scalars['Boolean']>
	/** URL to show a user avatar */
	avatar?: Maybe<Scalars['String']>
	/** URL to show an image */
	image?: Maybe<Scalars['String']>
	/** Inline svg icon */
	icon?: Maybe<ICoreGQLIcon>
	/** Optional; visually hides the icon without removing it */
	isIconHidden?: Maybe<Scalars['Boolean']>
	/** Set true to add left spacing. useful in aligning with other list items that have icons or images */
	isLeftIndented?: Maybe<Scalars['Boolean']>
	/** Set true when the list can be reordered */
	isDraggable?: Maybe<Scalars['Boolean']>
	/** Set true when the list can be reordered */
	isDisabled?: Maybe<Scalars['Boolean']>
	/** Makes the list item a setting */
	toggleId?: Maybe<Scalars['String']>
	/** Props passed to the toggle if toggleId is set */
	toggleProps?: Maybe<ICoreGQLToggle>
	/** A primary action that turns the entire list item into a clickable action */
	primaryAction?: Maybe<ICoreGQLButton>
	/** Actions associated with the list item */
	actions?: Maybe<Array<Maybe<ICoreGQLButton>>>
	/** Context Menu associated with the list it */
	contextMenu?: Maybe<ICoreGQLContextMenu>
	/** Set to true to show separator for this list item if followed by another list item. */
	isSeparatorVisible?: Maybe<Scalars['Boolean']>
	/** Optional class name for list item */
	className?: Maybe<Scalars['String']>
	/** Optional: set whether to use checkbox or radio for selectable list items */
	selectableType?: Maybe<ICoreGQLListItemSelectableType>
	/** Any props you want sent down to the selectable component being rendered */
	selectableProps?: Maybe<ICoreGQLListItemSelectablePropsType>
	/** Highlight title, subtitle, note with warning colors */
	warnings?: Maybe<ICoreGQLListItemWarningConfig>
	/** Optional; adds a nested list */
	list?: Maybe<ICoreGQLList>
	/** Optional; adds multiple lists nested at the same level */
	lists?: Maybe<Array<ICoreGQLList>>
}

export type ICoreGQLListItemSelectablePropsType =
	| ICoreGQLCheckbox
	| ICoreGQLRadio

export enum ICoreGQLListItemSelectableType {
	Checkbox = 'checkbox',
	Radio = 'radio'
}

export type ICoreGQLListItemTypes =
	| ICoreGQLListItem
	| ICoreGQLExpandableListItem

/** Which parts should be highlighted in red */
export type ICoreGQLListItemWarningConfig = {
	__typename?: 'ListItemWarningConfig'
	title?: Maybe<Scalars['Boolean']>
	subtitle?: Maybe<Scalars['Boolean']>
	note?: Maybe<Scalars['Boolean']>
}

/** A location */
export type ICoreGQLLocation = {
	__typename?: 'Location'
	id?: Maybe<Scalars['String']>
	/** The location name */
	name?: Maybe<Scalars['String']>
	/** The timezone */
	timezone?: Maybe<Scalars['String']>
	/** Address line 1 */
	addressLine1?: Maybe<Scalars['String']>
	/** Address line 2 */
	addressLine2?: Maybe<Scalars['String']>
	/** City */
	addressCity?: Maybe<Scalars['String']>
	/** State / Province / Region */
	addressState?: Maybe<Scalars['String']>
	/** Zip / Postal Code */
	addressZip?: Maybe<Scalars['String']>
	/** The country */
	addressCountry?: Maybe<Scalars['String']>
	/** The user profile images. If profileImageUUID is null this will return default images */
	profileImages?: Maybe<Scalars['String']>
	/** Is this location visible to the world? */
	isPublic?: Maybe<Scalars['Boolean']>
	/** Does this location exist anymore? */
	archived?: Maybe<Scalars['Boolean']>
	/** Enable the lock screen functionality on web. */
	enableLockScreen?: Maybe<Scalars['Boolean']>
	/** The main phone number to get in contact w/ the Location */
	phoneNumber?: Maybe<Scalars['String']>
	/** The location slug. Must be unique. */
	slug?: Maybe<Scalars['String']>
	/** Location store num */
	storeNum?: Maybe<Scalars['String']>
	OrganizationId?: Maybe<Scalars['String']>
	/** Optionally include warnings for values not authorized in this scope */
	warnings?: Maybe<ICoreGQLWarning>
	Organization?: Maybe<ICoreGQLOrganization>
	Skills?: Maybe<ICoreGQLLocationBelongsToManySkillsConnection>
	Groups?: Maybe<ICoreGQLLocationBelongsToManyGroupsConnection>
	Messages?: Maybe<ICoreGQLLocationHasManyMessagesConnection>
	Visits?: Maybe<ICoreGQLLocationHasManyVisitsConnection>
	AccessPoints?: Maybe<ICoreGQLLocationHasManyAccessPointsConnection>
	UserLocations?: Maybe<ICoreGQLLocationHasManyUserLocationsConnection>
	UnconfirmedUsers?: Maybe<ICoreGQLLocationHasManyUnconfirmedUsersConnection>
	AppTokens?: Maybe<ICoreGQLLocationHasManyAppTokensConnection>
	Metadata?: Maybe<ICoreGQLLocationHasManyMetadataConnection>
	Users?: Maybe<ICoreGQLLocationBelongsToManyUsersConnection>
	LocationSkills?: Maybe<ICoreGQLLocationHasManyLocationSkillsConnection>
	geo?: Maybe<Scalars['JSON']>
}

/** A location */
export type ICoreGQLLocationOrganizationArgs = {
	where?: Maybe<Scalars['SequelizeJSON']>
}

/** A location */
export type ICoreGQLLocationSkillsArgs = {
	limit?: Maybe<Scalars['Int']>
	order?: Maybe<Scalars['String']>
	where?: Maybe<Scalars['SequelizeJSON']>
	offset?: Maybe<Scalars['Int']>
	after?: Maybe<Scalars['String']>
	first?: Maybe<Scalars['Int']>
	before?: Maybe<Scalars['String']>
	last?: Maybe<Scalars['Int']>
}

/** A location */
export type ICoreGQLLocationGroupsArgs = {
	limit?: Maybe<Scalars['Int']>
	order?: Maybe<Scalars['String']>
	where?: Maybe<Scalars['SequelizeJSON']>
	offset?: Maybe<Scalars['Int']>
	after?: Maybe<Scalars['String']>
	first?: Maybe<Scalars['Int']>
	before?: Maybe<Scalars['String']>
	last?: Maybe<Scalars['Int']>
}

/** A location */
export type ICoreGQLLocationMessagesArgs = {
	limit?: Maybe<Scalars['Int']>
	order?: Maybe<Scalars['String']>
	where?: Maybe<Scalars['SequelizeJSON']>
	offset?: Maybe<Scalars['Int']>
	after?: Maybe<Scalars['String']>
	first?: Maybe<Scalars['Int']>
	before?: Maybe<Scalars['String']>
	last?: Maybe<Scalars['Int']>
}

/** A location */
export type ICoreGQLLocationVisitsArgs = {
	limit?: Maybe<Scalars['Int']>
	order?: Maybe<Scalars['String']>
	where?: Maybe<Scalars['SequelizeJSON']>
	offset?: Maybe<Scalars['Int']>
	after?: Maybe<Scalars['String']>
	first?: Maybe<Scalars['Int']>
	before?: Maybe<Scalars['String']>
	last?: Maybe<Scalars['Int']>
}

/** A location */
export type ICoreGQLLocationAccessPointsArgs = {
	limit?: Maybe<Scalars['Int']>
	order?: Maybe<Scalars['String']>
	where?: Maybe<Scalars['SequelizeJSON']>
	offset?: Maybe<Scalars['Int']>
	after?: Maybe<Scalars['String']>
	first?: Maybe<Scalars['Int']>
	before?: Maybe<Scalars['String']>
	last?: Maybe<Scalars['Int']>
}

/** A location */
export type ICoreGQLLocationUserLocationsArgs = {
	limit?: Maybe<Scalars['Int']>
	order?: Maybe<Scalars['String']>
	where?: Maybe<Scalars['SequelizeJSON']>
	offset?: Maybe<Scalars['Int']>
	after?: Maybe<Scalars['String']>
	first?: Maybe<Scalars['Int']>
	before?: Maybe<Scalars['String']>
	last?: Maybe<Scalars['Int']>
}

/** A location */
export type ICoreGQLLocationUnconfirmedUsersArgs = {
	limit?: Maybe<Scalars['Int']>
	order?: Maybe<Scalars['String']>
	where?: Maybe<Scalars['SequelizeJSON']>
	offset?: Maybe<Scalars['Int']>
	after?: Maybe<Scalars['String']>
	first?: Maybe<Scalars['Int']>
	before?: Maybe<Scalars['String']>
	last?: Maybe<Scalars['Int']>
}

/** A location */
export type ICoreGQLLocationAppTokensArgs = {
	limit?: Maybe<Scalars['Int']>
	order?: Maybe<Scalars['String']>
	where?: Maybe<Scalars['SequelizeJSON']>
	offset?: Maybe<Scalars['Int']>
	after?: Maybe<Scalars['String']>
	first?: Maybe<Scalars['Int']>
	before?: Maybe<Scalars['String']>
	last?: Maybe<Scalars['Int']>
}

/** A location */
export type ICoreGQLLocationMetadataArgs = {
	limit?: Maybe<Scalars['Int']>
	order?: Maybe<Scalars['String']>
	where?: Maybe<Scalars['SequelizeJSON']>
	offset?: Maybe<Scalars['Int']>
	after?: Maybe<Scalars['String']>
	first?: Maybe<Scalars['Int']>
	before?: Maybe<Scalars['String']>
	last?: Maybe<Scalars['Int']>
}

/** A location */
export type ICoreGQLLocationUsersArgs = {
	limit?: Maybe<Scalars['Int']>
	order?: Maybe<Scalars['String']>
	where?: Maybe<Scalars['SequelizeJSON']>
	offset?: Maybe<Scalars['Int']>
	after?: Maybe<Scalars['String']>
	first?: Maybe<Scalars['Int']>
	before?: Maybe<Scalars['String']>
	last?: Maybe<Scalars['Int']>
}

/** A location */
export type ICoreGQLLocationLocationSkillsArgs = {
	limit?: Maybe<Scalars['Int']>
	order?: Maybe<Scalars['String']>
	where?: Maybe<Scalars['SequelizeJSON']>
	offset?: Maybe<Scalars['Int']>
	after?: Maybe<Scalars['String']>
	first?: Maybe<Scalars['Int']>
	before?: Maybe<Scalars['String']>
	last?: Maybe<Scalars['Int']>
}

/** A connection to a list of items. */
export type ICoreGQLLocationBelongsToManyGroupsConnection = {
	__typename?: 'LocationBelongsToManyGroupsConnection'
	/** Information to aid in pagination. */
	pageInfo: ICoreGQLPageInfo
	/** A list of edges. */
	edges?: Maybe<Array<Maybe<ICoreGQLLocationBelongsToManyGroupsEdge>>>
	totalCount?: Maybe<Scalars['Int']>
}

/** An edge in a connection. */
export type ICoreGQLLocationBelongsToManyGroupsEdge = {
	__typename?: 'LocationBelongsToManyGroupsEdge'
	/** The item at the end of the edge */
	node?: Maybe<ICoreGQLGroup>
	/** A cursor for use in pagination */
	cursor: Scalars['String']
}

/** A connection to a list of items. */
export type ICoreGQLLocationBelongsToManySkillsConnection = {
	__typename?: 'LocationBelongsToManySkillsConnection'
	/** Information to aid in pagination. */
	pageInfo: ICoreGQLPageInfo
	/** A list of edges. */
	edges?: Maybe<Array<Maybe<ICoreGQLLocationBelongsToManySkillsEdge>>>
	totalCount?: Maybe<Scalars['Int']>
}

/** An edge in a connection. */
export type ICoreGQLLocationBelongsToManySkillsEdge = {
	__typename?: 'LocationBelongsToManySkillsEdge'
	/** The item at the end of the edge */
	node?: Maybe<ICoreGQLSkill>
	/** A cursor for use in pagination */
	cursor: Scalars['String']
}

/** A connection to a list of items. */
export type ICoreGQLLocationBelongsToManyUsersConnection = {
	__typename?: 'LocationBelongsToManyUsersConnection'
	/** Information to aid in pagination. */
	pageInfo: ICoreGQLPageInfo
	/** A list of edges. */
	edges?: Maybe<Array<Maybe<ICoreGQLLocationBelongsToManyUsersEdge>>>
	totalCount?: Maybe<Scalars['Int']>
}

/** An edge in a connection. */
export type ICoreGQLLocationBelongsToManyUsersEdge = {
	__typename?: 'LocationBelongsToManyUsersEdge'
	/** The item at the end of the edge */
	node?: Maybe<ICoreGQLUser>
	/** A cursor for use in pagination */
	cursor: Scalars['String']
}

/** A connection to a list of items. */
export type ICoreGQLLocationConnection = {
	__typename?: 'LocationConnection'
	/** Information to aid in pagination. */
	pageInfo: ICoreGQLPageInfo
	/** A list of edges. */
	edges?: Maybe<Array<Maybe<ICoreGQLLocationEdge>>>
	totalCount?: Maybe<Scalars['Int']>
}

/** An edge in a connection. */
export type ICoreGQLLocationEdge = {
	__typename?: 'LocationEdge'
	/** The item at the end of the edge */
	node?: Maybe<ICoreGQLLocation>
	/** A cursor for use in pagination */
	cursor: Scalars['String']
}

/** A location group */
export type ICoreGQLLocationGroup = {
	__typename?: 'LocationGroup'
	id?: Maybe<Scalars['String']>
	GroupId?: Maybe<Scalars['String']>
	LocationId?: Maybe<Scalars['String']>
	/** Optionally include warnings for values not authorized in this scope */
	warnings?: Maybe<ICoreGQLWarning>
	Location?: Maybe<ICoreGQLLocation>
	Group?: Maybe<ICoreGQLGroup>
}

/** A location group */
export type ICoreGQLLocationGroupLocationArgs = {
	where?: Maybe<Scalars['SequelizeJSON']>
}

/** A location group */
export type ICoreGQLLocationGroupGroupArgs = {
	where?: Maybe<Scalars['SequelizeJSON']>
}

/** A connection to a list of items. */
export type ICoreGQLLocationHasManyAccessPointsConnection = {
	__typename?: 'LocationHasManyAccessPointsConnection'
	/** Information to aid in pagination. */
	pageInfo: ICoreGQLPageInfo
	/** A list of edges. */
	edges?: Maybe<Array<Maybe<ICoreGQLLocationHasManyAccessPointsEdge>>>
	totalCount?: Maybe<Scalars['Int']>
}

/** An edge in a connection. */
export type ICoreGQLLocationHasManyAccessPointsEdge = {
	__typename?: 'LocationHasManyAccessPointsEdge'
	/** The item at the end of the edge */
	node?: Maybe<ICoreGQLAccessPoint>
	/** A cursor for use in pagination */
	cursor: Scalars['String']
}

/** A connection to a list of items. */
export type ICoreGQLLocationHasManyAppTokensConnection = {
	__typename?: 'LocationHasManyAppTokensConnection'
	/** Information to aid in pagination. */
	pageInfo: ICoreGQLPageInfo
	/** A list of edges. */
	edges?: Maybe<Array<Maybe<ICoreGQLLocationHasManyAppTokensEdge>>>
	totalCount?: Maybe<Scalars['Int']>
}

/** An edge in a connection. */
export type ICoreGQLLocationHasManyAppTokensEdge = {
	__typename?: 'LocationHasManyAppTokensEdge'
	/** The item at the end of the edge */
	node?: Maybe<ICoreGQLAppToken>
	/** A cursor for use in pagination */
	cursor: Scalars['String']
}

/** A connection to a list of items. */
export type ICoreGQLLocationHasManyLocationSkillsConnection = {
	__typename?: 'LocationHasManyLocationSkillsConnection'
	/** Information to aid in pagination. */
	pageInfo: ICoreGQLPageInfo
	/** A list of edges. */
	edges?: Maybe<Array<Maybe<ICoreGQLLocationHasManyLocationSkillsEdge>>>
	totalCount?: Maybe<Scalars['Int']>
}

/** An edge in a connection. */
export type ICoreGQLLocationHasManyLocationSkillsEdge = {
	__typename?: 'LocationHasManyLocationSkillsEdge'
	/** The item at the end of the edge */
	node?: Maybe<ICoreGQLLocationSkill>
	/** A cursor for use in pagination */
	cursor: Scalars['String']
}

/** A connection to a list of items. */
export type ICoreGQLLocationHasManyMessagesConnection = {
	__typename?: 'LocationHasManyMessagesConnection'
	/** Information to aid in pagination. */
	pageInfo: ICoreGQLPageInfo
	/** A list of edges. */
	edges?: Maybe<Array<Maybe<ICoreGQLLocationHasManyMessagesEdge>>>
	totalCount?: Maybe<Scalars['Int']>
}

/** An edge in a connection. */
export type ICoreGQLLocationHasManyMessagesEdge = {
	__typename?: 'LocationHasManyMessagesEdge'
	/** The item at the end of the edge */
	node?: Maybe<ICoreGQLMessage>
	/** A cursor for use in pagination */
	cursor: Scalars['String']
}

/** A connection to a list of items. */
export type ICoreGQLLocationHasManyMetadataConnection = {
	__typename?: 'LocationHasManyMetadataConnection'
	/** Information to aid in pagination. */
	pageInfo: ICoreGQLPageInfo
	/** A list of edges. */
	edges?: Maybe<Array<Maybe<ICoreGQLLocationHasManyMetadataEdge>>>
	totalCount?: Maybe<Scalars['Int']>
}

/** An edge in a connection. */
export type ICoreGQLLocationHasManyMetadataEdge = {
	__typename?: 'LocationHasManyMetadataEdge'
	/** The item at the end of the edge */
	node?: Maybe<ICoreGQLMetadata>
	/** A cursor for use in pagination */
	cursor: Scalars['String']
}

/** A connection to a list of items. */
export type ICoreGQLLocationHasManyUnconfirmedUsersConnection = {
	__typename?: 'LocationHasManyUnconfirmedUsersConnection'
	/** Information to aid in pagination. */
	pageInfo: ICoreGQLPageInfo
	/** A list of edges. */
	edges?: Maybe<Array<Maybe<ICoreGQLLocationHasManyUnconfirmedUsersEdge>>>
	totalCount?: Maybe<Scalars['Int']>
}

/** An edge in a connection. */
export type ICoreGQLLocationHasManyUnconfirmedUsersEdge = {
	__typename?: 'LocationHasManyUnconfirmedUsersEdge'
	/** The item at the end of the edge */
	node?: Maybe<ICoreGQLUnconfirmedUser>
	/** A cursor for use in pagination */
	cursor: Scalars['String']
}

/** A connection to a list of items. */
export type ICoreGQLLocationHasManyUserLocationsConnection = {
	__typename?: 'LocationHasManyUserLocationsConnection'
	/** Information to aid in pagination. */
	pageInfo: ICoreGQLPageInfo
	/** A list of edges. */
	edges?: Maybe<Array<Maybe<ICoreGQLLocationHasManyUserLocationsEdge>>>
	totalCount?: Maybe<Scalars['Int']>
}

/** An edge in a connection. */
export type ICoreGQLLocationHasManyUserLocationsEdge = {
	__typename?: 'LocationHasManyUserLocationsEdge'
	/** The item at the end of the edge */
	node?: Maybe<ICoreGQLUserLocation>
	/** A cursor for use in pagination */
	cursor: Scalars['String']
}

/** A connection to a list of items. */
export type ICoreGQLLocationHasManyVisitsConnection = {
	__typename?: 'LocationHasManyVisitsConnection'
	/** Information to aid in pagination. */
	pageInfo: ICoreGQLPageInfo
	/** A list of edges. */
	edges?: Maybe<Array<Maybe<ICoreGQLLocationHasManyVisitsEdge>>>
	totalCount?: Maybe<Scalars['Int']>
}

/** An edge in a connection. */
export type ICoreGQLLocationHasManyVisitsEdge = {
	__typename?: 'LocationHasManyVisitsEdge'
	/** The item at the end of the edge */
	node?: Maybe<ICoreGQLVisit>
	/** A cursor for use in pagination */
	cursor: Scalars['String']
}

/** A Location Schedule */
export type ICoreGQLLocationSchedule = {
	__typename?: 'LocationSchedule'
	/** The skill providing the location schedule */
	Skill: ICoreGQLSkill
	/** The specific details about the location schedule */
	details?: Maybe<Array<Maybe<ICoreGQLLocationScheduleDetails>>>
}

/** A Location Schedule details */
export type ICoreGQLLocationScheduleDetails = {
	__typename?: 'LocationScheduleDetails'
	/** The date for the schedule (YYYY-MM-DD) */
	date: Scalars['String']
	/** Array of start/end times for the date */
	schedule: Array<Maybe<ICoreGQLLocationScheduleDetailsTimes>>
}

/** A Location Schedule date times */
export type ICoreGQLLocationScheduleDetailsTimes = {
	__typename?: 'LocationScheduleDetailsTimes'
	/** The start of the open time for a location schedule */
	startTime: Scalars['String']
	/** The end of the open time for a location schedule */
	endTime: Scalars['String']
}

/** A connection to a list of items. */
export type ICoreGQLLocationsForUserLocationConnectionConnection = {
	__typename?: 'LocationsForUserLocationConnectionConnection'
	/** Information to aid in pagination. */
	pageInfo: ICoreGQLPageInfo
	/** A list of edges. */
	edges?: Maybe<Array<Maybe<ICoreGQLLocationsForUserLocationConnectionEdge>>>
	totalCount?: Maybe<Scalars['Int']>
}

/** An edge in a connection. */
export type ICoreGQLLocationsForUserLocationConnectionEdge = {
	__typename?: 'LocationsForUserLocationConnectionEdge'
	/** The item at the end of the edge */
	node?: Maybe<ICoreGQLLocation>
	/** A cursor for use in pagination */
	cursor: Scalars['String']
}

/** A location skill mapping */
export type ICoreGQLLocationSkill = {
	__typename?: 'LocationSkill'
	id?: Maybe<Scalars['String']>
	LocationId?: Maybe<Scalars['String']>
	SkillId?: Maybe<Scalars['String']>
	/** Optionally include warnings for values not authorized in this scope */
	warnings?: Maybe<ICoreGQLWarning>
	Skill?: Maybe<ICoreGQLSkill>
	Location?: Maybe<ICoreGQLLocation>
}

/** A location skill mapping */
export type ICoreGQLLocationSkillSkillArgs = {
	where?: Maybe<Scalars['SequelizeJSON']>
}

/** A location skill mapping */
export type ICoreGQLLocationSkillLocationArgs = {
	where?: Maybe<Scalars['SequelizeJSON']>
}

/** A connection to a list of items. */
export type ICoreGQLLocationUserByJobConnection = {
	__typename?: 'LocationUserByJobConnection'
	/** Information to aid in pagination. */
	pageInfo: ICoreGQLPageInfo
	/** A list of edges. */
	edges?: Maybe<Array<Maybe<ICoreGQLLocationUserByJobEdge>>>
	totalCount?: Maybe<Scalars['Int']>
}

/** An edge in a connection. */
export type ICoreGQLLocationUserByJobEdge = {
	__typename?: 'LocationUserByJobEdge'
	/** The item at the end of the edge */
	node?: Maybe<ICoreGQLUser>
	/** A cursor for use in pagination */
	cursor: Scalars['String']
}

/** A connection to a list of items. */
export type ICoreGQLLocationUserConnection = {
	__typename?: 'LocationUserConnection'
	/** Information to aid in pagination. */
	pageInfo: ICoreGQLPageInfo
	/** A list of edges. */
	edges?: Maybe<Array<Maybe<ICoreGQLLocationUserEdge>>>
	totalCount?: Maybe<Scalars['Int']>
}

/** An edge in a connection. */
export type ICoreGQLLocationUserEdge = {
	__typename?: 'LocationUserEdge'
	/** The item at the end of the edge */
	node?: Maybe<ICoreGQLUser>
	/** A cursor for use in pagination */
	cursor: Scalars['String']
}

/** Returns the list of LocationUsersByJob" */
export type ICoreGQLLocationUsersByJobResponse = {
	__typename?: 'LocationUsersByJobResponse'
	/** The list of location Users filtered by Job */
	Users?: Maybe<ICoreGQLLocationUserByJobConnection>
}

/** Returns the list of LocationUsersByJob" */
export type ICoreGQLLocationUsersByJobResponseUsersArgs = {
	limit?: Maybe<Scalars['Int']>
	order?: Maybe<Scalars['String']>
	where?: Maybe<Scalars['SequelizeJSON']>
	offset?: Maybe<Scalars['Int']>
	after?: Maybe<Scalars['String']>
	first?: Maybe<Scalars['Int']>
	before?: Maybe<Scalars['String']>
	last?: Maybe<Scalars['Int']>
	locationId: Scalars['ID']
	jobId: Scalars['ID']
}

/** [FILTERED] Returns the list of LocationUsers" */
export type ICoreGQLLocationUsersResponse = {
	__typename?: 'LocationUsersResponse'
	/** The list of location Users */
	Users?: Maybe<ICoreGQLLocationUserConnection>
}

/** [FILTERED] Returns the list of LocationUsers" */
export type ICoreGQLLocationUsersResponseUsersArgs = {
	limit?: Maybe<Scalars['Int']>
	order?: Maybe<Array<Maybe<Array<Maybe<Scalars['String']>>>>>
	where?: Maybe<Scalars['SequelizeJSON']>
	offset?: Maybe<Scalars['Int']>
	after?: Maybe<Scalars['String']>
	first?: Maybe<Scalars['Int']>
	before?: Maybe<Scalars['String']>
	last?: Maybe<Scalars['Int']>
	locationId: Scalars['ID']
	jobIds?: Maybe<Array<Maybe<Scalars['ID']>>>
	roles?: Maybe<Array<Maybe<Scalars['String']>>>
	notInJobIds?: Maybe<Array<Maybe<Scalars['ID']>>>
	notInRoles?: Maybe<Array<Maybe<Scalars['String']>>>
	search?: Maybe<Scalars['String']>
}

/** Log in via code or magic hash and get back a JWT and the User. "code" or "magicHash" is required. */
export type ICoreGQLLoginInput = {
	/** The phone number of the user */
	phoneNumber: Scalars['String']
	/** The code that was sent to the user when login was requested */
	code?: Maybe<Scalars['String']>
	/** The hash of the magiclink */
	magicHash?: Maybe<Scalars['String']>
	/** Optionally set the number of seconds the JWT should be valid for. Maximum: 15780000 */
	expiresIn?: Maybe<Scalars['Int']>
}

/** Returns a "redirectUrl" in the case of partner login or the "jwt" and "User" */
export type ICoreGQLLoginResponse = {
	__typename?: 'loginResponse'
	/** The URL to a partner login. If set, "jwt" and "User" will be null. */
	redirectUrl?: Maybe<Scalars['String']>
	/** The JWT which is used to authenticate the User during future requests */
	jwt?: Maybe<Scalars['String']>
	/** The User that has logged in */
	User?: Maybe<ICoreGQLUser>
}

/** Logs out the user and dispatches logout events */
export type ICoreGQLLogout = {
	/** id of the user to register a device for */
	userId: Scalars['ID']
	/** id of the `UserDevice` User is logging out from */
	userDeviceId?: Maybe<Scalars['String']>
}

/** Returns the status of the request */
export type ICoreGQLLogoutResponse = {
	__typename?: 'logoutResponse'
	/** Will be "success". On failure, check errors */
	status: Scalars['String']
}

/** A magic link */
export type ICoreGQLMagicLink = {
	__typename?: 'MagicLink'
	id?: Maybe<Scalars['String']>
	/** The magic link token that can be used to log in */
	token?: Maybe<Scalars['String']>
	/** Optionally include warnings for values not authorized in this scope */
	warnings?: Maybe<ICoreGQLWarning>
	UnconfirmedUser?: Maybe<ICoreGQLUnconfirmedUser>
}

/** A magic link */
export type ICoreGQLMagicLinkUnconfirmedUserArgs = {
	where?: Maybe<Scalars['SequelizeJSON']>
}

/** Render markdown beautifully */
export type ICoreGQLMarkdown = {
	__typename?: 'Markdown'
	/** Unique ID for view caching. */
	id: Scalars['ID']
	/** Markdown text to be rendered */
	source: Scalars['String']
}

/** A message */
export type ICoreGQLMessage = {
	__typename?: 'Message'
	id?: Maybe<Scalars['String']>
	sender?: Maybe<Scalars['String']>
	/**
	 * The current status of the message. May be one of: "scheduled", "accepted",
	 * "queued", "sending", "sent", "failed", "delivered", "undelivered",
	 * "receiving", "received"
	 **/
	status?: Maybe<Scalars['String']>
	/** The content of the message */
	body?: Maybe<Scalars['String']>
	/** If set, will not send the message until the specified time. If null will send immediately */
	sendAt?: Maybe<Scalars['Date']>
	/** If linksToWebView=true, additional data that is passed when the link is followed to allow for deep linking */
	webViewQueryData?: Maybe<Scalars['SequelizeJSON']>
	/** Whether to include a link with the message. Can be used in conjunction with webViewQueryData to deep link. */
	linksToWebView?: Maybe<Scalars['Boolean']>
	/** The push notification content of the message */
	push?: Maybe<Scalars['SequelizeJSON']>
	LocationId?: Maybe<Scalars['String']>
	UserId?: Maybe<Scalars['String']>
	SkillId?: Maybe<Scalars['String']>
	/** Optionally include warnings for values not authorized in this scope */
	warnings?: Maybe<ICoreGQLWarning>
	User?: Maybe<ICoreGQLUser>
	Location?: Maybe<ICoreGQLLocation>
	Skill?: Maybe<ICoreGQLSkill>
}

/** A message */
export type ICoreGQLMessageUserArgs = {
	where?: Maybe<Scalars['SequelizeJSON']>
}

/** A message */
export type ICoreGQLMessageLocationArgs = {
	where?: Maybe<Scalars['SequelizeJSON']>
}

/** A message */
export type ICoreGQLMessageSkillArgs = {
	where?: Maybe<Scalars['SequelizeJSON']>
}

/** Metadata entry */
export type ICoreGQLMetadata = {
	__typename?: 'Metadata'
	/** The piece of data key. This must be unique (when combined with associated models). */
	key?: Maybe<Scalars['String']>
	/** The piece of data value. */
	val?: Maybe<Scalars['SequelizeJSON']>
	createdAt?: Maybe<Scalars['Date']>
	updatedAt?: Maybe<Scalars['Date']>
	LocationId?: Maybe<Scalars['String']>
	UserId?: Maybe<Scalars['String']>
	SkillId?: Maybe<Scalars['String']>
	OrganizationId?: Maybe<Scalars['String']>
	/** Optionally include warnings for values not authorized in this scope */
	warnings?: Maybe<ICoreGQLWarning>
	Location?: Maybe<ICoreGQLLocation>
	User?: Maybe<ICoreGQLUser>
	Skill?: Maybe<ICoreGQLSkill>
	Organization?: Maybe<ICoreGQLOrganization>
	UnconfirmedUser?: Maybe<ICoreGQLUnconfirmedUser>
}

/** Metadata entry */
export type ICoreGQLMetadataLocationArgs = {
	where?: Maybe<Scalars['SequelizeJSON']>
}

/** Metadata entry */
export type ICoreGQLMetadataUserArgs = {
	where?: Maybe<Scalars['SequelizeJSON']>
}

/** Metadata entry */
export type ICoreGQLMetadataSkillArgs = {
	where?: Maybe<Scalars['SequelizeJSON']>
}

/** Metadata entry */
export type ICoreGQLMetadataOrganizationArgs = {
	where?: Maybe<Scalars['SequelizeJSON']>
}

/** Metadata entry */
export type ICoreGQLMetadataUnconfirmedUserArgs = {
	where?: Maybe<Scalars['SequelizeJSON']>
}

export enum ICoreGQLModalSize {
	Small = 'small',
	Medium = 'medium',
	FullWidth = 'fullWidth'
}

/** Lets us respond with a user or a loction */
export type ICoreGQLModel = ICoreGQLUser | ICoreGQLLocation

export type ICoreGQLMutation = {
	__typename?: 'Mutation'
	/** Import a Big Search result from a skill or another location */
	importBigSearchResult?: Maybe<ICoreGQLImportBigSearchResult>
	/** Adds a dashboard card to a dashboard page */
	addDashboardCard?: Maybe<ICoreGQLAddDashboardCardResponse>
	/** Removes a dashboard card */
	removeDashboardCard?: Maybe<ICoreGQLRemoveDashboardCardResponse>
	/** [DEBUG ONLY] Triggers an event */
	debugTriggerEvent?: Maybe<ICoreGQLDebugTriggerEventResponse>
	/** [Skill Only] Delete FileItems */
	deleteFileItems?: Maybe<ICoreGQLDeleteFileItemsResponse>
	/** Create a new group under an organization */
	createGroup?: Maybe<ICoreGQLCreateGroupResponse>
	/** Deletes a group under an organization */
	deleteGroup?: Maybe<ICoreGQLDeleteGroupResponse>
	/** Updates a Group under an Organization */
	updateGroup?: Maybe<ICoreGQLUpdateGroupResponse>
	/** Create a new job under an organization */
	createJob?: Maybe<ICoreGQLCreateJobResponse>
	/** Deletes a job */
	deleteJob?: Maybe<ICoreGQLDeleteJobResponse>
	/** Update a job under an organization */
	updateJob?: Maybe<ICoreGQLUpdateJobResponse>
	/** Create a new Location under an organization */
	createLocation?: Maybe<ICoreGQLCreateLocationResponse>
	/** Delete a Location */
	deleteLocation?: Maybe<ICoreGQLDeleteLocationResponse>
	/** Updates a Location */
	updateLocation?: Maybe<ICoreGQLUpdateLocationResponse>
	/** Updates organization details */
	updateOrganization?: Maybe<ICoreGQLUpdateOrganizationResponse>
	/** Saves preferences */
	savePreferences?: Maybe<ICoreGQLSavePreferencesResponse>
	/** Quickly add a user (guest only right now). */
	quickAddUser?: Maybe<ICoreGQLQuickAddUserResponse>
	/** Accepts an invite */
	acceptInvite?: Maybe<ICoreGQLAcceptInviteResponse>
	/** Add a user to role(s) for the Organization or Locations within the Organization */
	addUserToRoles?: Maybe<ICoreGQLAddUserToRolesResponse>
	/** Invites a user to role(s) for an Organization */
	inviteUser?: Maybe<ICoreGQLInviteUserResponse>
	/** Remove a user from role(s) for the Organization or Locations within the Organization */
	removeUserFromRoles?: Maybe<ICoreGQLRemoveUserFromRolesResponse>
	/** Resends an invitation */
	resendInvite?: Maybe<ICoreGQLResendInviteResponse>
	/** Revoke an invitation */
	revokeInvite?: Maybe<ICoreGQLRevokeInviteResponse>
	/** What the name of the new organization is. */
	createOrganizationSeed?: Maybe<ICoreGQLCreateOrganizationSeedResponse>
	/** What the name of the new organization is. */
	createSkillSeeds?: Maybe<Array<Maybe<ICoreGQLCreateSkillSeedResponse>>>
	/** Delete a previously seeded org and its associated data. */
	deleteOrganizationSeed?: Maybe<ICoreGQLOrganizationSeedDeleteResponse>
	/** What skill data you'd like to delete */
	deleteSkillSeeds?: Maybe<Array<Maybe<ICoreGQLDeleteSkillSeedResponse>>>
	/** Saves skill settings */
	saveSettings?: Maybe<ICoreGQLSaveSettingsResponse>
	/** Saves skill settings */
	validateSettings?: Maybe<ICoreGQLValidateSettingsResponse>
	/** Enable skills at a location. Requires that the skills have been installed at the Organization */
	disableSkills?: Maybe<ICoreGQLDisableSkillsResponse>
	/** Enable skills at a location. Requires that the skills have been installed at the Organization */
	enableSkills?: Maybe<ICoreGQLEnableSkillsResponse>
	/** Install skills for an organization. If skills are already installed/enabled this operation will still succeed. */
	installSkills?: Maybe<ICoreGQLInstallSkillsResponse>
	/** [SKILL ONLY] Called when a skill boots to sync settings, updates information, provision dbs, etc. */
	syncSkill?: Maybe<ICoreGQLSyncSkillResponse>
	/** Uninstall skills for an organization. Will also remove any LocationSkill entries. */
	uninstallSkills?: Maybe<ICoreGQLUninstallSkillsResponse>
	/** Logs a user in */
	login?: Maybe<ICoreGQLLoginResponse>
	/** Logs out the user and dispatches logout events */
	logout?: Maybe<ICoreGQLLogoutResponse>
	/** Refresh a JWT token */
	refreshToken?: Maybe<ICoreGQLRefreshTokenResponse>
	/** Initiates login for a user */
	requestLogin?: Maybe<ICoreGQLRequestLoginResponse>
	/** Update date when user last accepted Mobile T&Cs and Privacy Policy */
	updateAcceptedMobileTerms?: Maybe<ICoreGQLUpdateAcceptedMobileTermsResponse>
	/** Update a user in an organization */
	updateGuest?: Maybe<ICoreGQLUpdateGuestResponse>
	/** Update the currently logged in user */
	updateUser?: Maybe<ICoreGQLUpdateUserResponse>
	/** Register a new user device. */
	registerDevice?: Maybe<ICoreGQLRegisterDeviceResponse>
	/** Testing a user update */
	updateUserTest?: Maybe<ICoreGQLUser>
	/** Execute the emit action */
	executeActionEmit?: Maybe<ICoreGQLExecuteActionEmitResponse>
	/** Reschedule calendar event */
	rescheduleCalendarEvent?: Maybe<ICoreGQLRescheduleCalendarEventResponse>
}

export type ICoreGQLMutationImportBigSearchResultArgs = {
	input: ICoreGQLImportBigSearchResultInput
}

export type ICoreGQLMutationAddDashboardCardArgs = {
	input: ICoreGQLAddDashboardCardInput
}

export type ICoreGQLMutationRemoveDashboardCardArgs = {
	input: ICoreGQLRemoveDashboardCardInput
}

export type ICoreGQLMutationDebugTriggerEventArgs = {
	input: ICoreGQLDebugTriggerEventInput
}

export type ICoreGQLMutationDeleteFileItemsArgs = {
	input: ICoreGQLDeleteFileItemsInput
}

export type ICoreGQLMutationCreateGroupArgs = {
	input: ICoreGQLCreateGroupInput
}

export type ICoreGQLMutationDeleteGroupArgs = {
	input: ICoreGQLDeleteGroupInput
}

export type ICoreGQLMutationUpdateGroupArgs = {
	input: ICoreGQLUpdateGroupInput
}

export type ICoreGQLMutationCreateJobArgs = {
	input: ICoreGQLCreateJobInput
}

export type ICoreGQLMutationDeleteJobArgs = {
	input: ICoreGQLDeleteJobInput
}

export type ICoreGQLMutationUpdateJobArgs = {
	input: ICoreGQLUpdateJobInput
}

export type ICoreGQLMutationCreateLocationArgs = {
	input: ICoreGQLCreateLocationInput
}

export type ICoreGQLMutationDeleteLocationArgs = {
	input: ICoreGQLDeleteLocationInput
}

export type ICoreGQLMutationUpdateLocationArgs = {
	input: ICoreGQLUpdateLocationInput
}

export type ICoreGQLMutationUpdateOrganizationArgs = {
	input: ICoreGQLUpdateOrganizationInput
}

export type ICoreGQLMutationSavePreferencesArgs = {
	input: ICoreGQLSavePreferencesInput
}

export type ICoreGQLMutationQuickAddUserArgs = {
	input: ICoreGQLQuickAddUser
}

export type ICoreGQLMutationAcceptInviteArgs = {
	input: ICoreGQLAcceptInviteInput
}

export type ICoreGQLMutationAddUserToRolesArgs = {
	input: ICoreGQLAddUserToRolesInput
}

export type ICoreGQLMutationInviteUserArgs = {
	input: ICoreGQLInviteUserInput
}

export type ICoreGQLMutationRemoveUserFromRolesArgs = {
	input: ICoreGQLRemoveUserFromRolesInput
}

export type ICoreGQLMutationResendInviteArgs = {
	input: ICoreGQLResendInviteInput
}

export type ICoreGQLMutationRevokeInviteArgs = {
	input: ICoreGQLRevokeInviteInput
}

export type ICoreGQLMutationCreateOrganizationSeedArgs = {
	input: ICoreGQLOrganizationSeedInput
}

export type ICoreGQLMutationCreateSkillSeedsArgs = {
	input: ICoreGQLSkillSeedCreateArgs
}

export type ICoreGQLMutationDeleteOrganizationSeedArgs = {
	input: ICoreGQLOrganizationSeedDeleteInput
}

export type ICoreGQLMutationDeleteSkillSeedsArgs = {
	input: ICoreGQLSkillSeedDeleteArgs
}

export type ICoreGQLMutationSaveSettingsArgs = {
	input: ICoreGQLSaveSettingsInput
}

export type ICoreGQLMutationValidateSettingsArgs = {
	input: ICoreGQLValidateSettingsInput
}

export type ICoreGQLMutationDisableSkillsArgs = {
	input: ICoreGQLDisableSkillsInput
}

export type ICoreGQLMutationEnableSkillsArgs = {
	input: ICoreGQLEnableSkillsInput
}

export type ICoreGQLMutationInstallSkillsArgs = {
	input: ICoreGQLInstallSkillsInput
}

export type ICoreGQLMutationSyncSkillArgs = {
	input: ICoreGQLSyncSkillInput
}

export type ICoreGQLMutationUninstallSkillsArgs = {
	input: ICoreGQLUninstallSkillsInput
}

export type ICoreGQLMutationLoginArgs = {
	input: ICoreGQLLoginInput
}

export type ICoreGQLMutationLogoutArgs = {
	input: ICoreGQLLogout
}

export type ICoreGQLMutationRefreshTokenArgs = {
	input: ICoreGQLRefreshTokenInput
}

export type ICoreGQLMutationRequestLoginArgs = {
	input: ICoreGQLRequestLogin
}

export type ICoreGQLMutationUpdateAcceptedMobileTermsArgs = {
	input: ICoreGQLUpdateAcceptedMobileTerms
}

export type ICoreGQLMutationUpdateGuestArgs = {
	input: ICoreGQLUpdateGuestInput
}

export type ICoreGQLMutationUpdateUserArgs = {
	input: ICoreGQLUpdateUserInput
}

export type ICoreGQLMutationRegisterDeviceArgs = {
	input: ICoreGQLRegisterDevice
}

export type ICoreGQLMutationUpdateUserTestArgs = {
	input: ICoreGQLUpdateUserInput
}

export type ICoreGQLMutationExecuteActionEmitArgs = {
	input: ICoreGQLExecuteActionEmitInput
}

export type ICoreGQLMutationRescheduleCalendarEventArgs = {
	input: ICoreGQLRescheduleCalendarEventInput
}

/** An awesome card for onboarding people! */
export type ICoreGQLOnboardingCard = {
	__typename?: 'OnboardingCard'
	/** Title of the entire card */
	title?: Maybe<Scalars['String']>
	/** Steps for onboarding */
	steps: Array<ICoreGQLOnboardingCardStep>
}

/** One step in the onboarding process */
export type ICoreGQLOnboardingCardStep = {
	__typename?: 'OnboardingCardStep'
	/** Unique identifier */
	id: Scalars['ID']
	/** Title that shows in the tab */
	tabTitle: Scalars['String']
	/** Icon for the tab */
	tabIcon?: Maybe<ICoreGQLIcon>
	/** Title that shows in the panel */
	panelTitle: Scalars['String']
	/** Copy describing the step in the card's body */
	panelCopy: Scalars['String']
	/** Primary CTA of this step */
	panelCTA?: Maybe<ICoreGQLButton>
	/** Is this step complete? */
	isComplete?: Maybe<Scalars['Boolean']>
}

/** An organization */
export type ICoreGQLOrganization = {
	__typename?: 'Organization'
	id?: Maybe<Scalars['String']>
	/** The organization name */
	name?: Maybe<Scalars['String']>
	/** Everything is free? */
	billingEnabled?: Maybe<Scalars['Boolean']>
	/** Is this org paying to enable white labelling? */
	allowWhiteLabelling?: Maybe<Scalars['Boolean']>
	/** External stylesheet URL */
	whiteLabellingStylesheetUrl?: Maybe<Scalars['String']>
	/** The organization slug. Must be unique. */
	slug?: Maybe<Scalars['String']>
	/** Optionally include warnings for values not authorized in this scope */
	warnings?: Maybe<ICoreGQLWarning>
	Locations?: Maybe<ICoreGQLOrganizationHasManyLocationsConnection>
	Groups?: Maybe<ICoreGQLOrganizationHasManyGroupsConnection>
	Users?: Maybe<ICoreGQLOrganizationBelongsToManyUsersConnection>
	Categories?: Maybe<ICoreGQLOrganizationBelongsToManyCategoriesConnection>
	Skills?: Maybe<ICoreGQLOrganizationBelongsToManySkillsConnection>
	Metadata?: Maybe<ICoreGQLOrganizationHasManyMetadataConnection>
	/** The number of locations that are in this organization */
	locationCount: Scalars['Int']
}

/** An organization */
export type ICoreGQLOrganizationLocationsArgs = {
	limit?: Maybe<Scalars['Int']>
	order?: Maybe<Scalars['String']>
	where?: Maybe<Scalars['SequelizeJSON']>
	offset?: Maybe<Scalars['Int']>
	after?: Maybe<Scalars['String']>
	first?: Maybe<Scalars['Int']>
	before?: Maybe<Scalars['String']>
	last?: Maybe<Scalars['Int']>
}

/** An organization */
export type ICoreGQLOrganizationGroupsArgs = {
	limit?: Maybe<Scalars['Int']>
	order?: Maybe<Scalars['String']>
	where?: Maybe<Scalars['SequelizeJSON']>
	offset?: Maybe<Scalars['Int']>
	after?: Maybe<Scalars['String']>
	first?: Maybe<Scalars['Int']>
	before?: Maybe<Scalars['String']>
	last?: Maybe<Scalars['Int']>
}

/** An organization */
export type ICoreGQLOrganizationUsersArgs = {
	limit?: Maybe<Scalars['Int']>
	order?: Maybe<Scalars['String']>
	where?: Maybe<Scalars['SequelizeJSON']>
	offset?: Maybe<Scalars['Int']>
	after?: Maybe<Scalars['String']>
	first?: Maybe<Scalars['Int']>
	before?: Maybe<Scalars['String']>
	last?: Maybe<Scalars['Int']>
}

/** An organization */
export type ICoreGQLOrganizationCategoriesArgs = {
	limit?: Maybe<Scalars['Int']>
	order?: Maybe<Scalars['String']>
	where?: Maybe<Scalars['SequelizeJSON']>
	offset?: Maybe<Scalars['Int']>
	after?: Maybe<Scalars['String']>
	first?: Maybe<Scalars['Int']>
	before?: Maybe<Scalars['String']>
	last?: Maybe<Scalars['Int']>
}

/** An organization */
export type ICoreGQLOrganizationSkillsArgs = {
	limit?: Maybe<Scalars['Int']>
	order?: Maybe<Scalars['String']>
	where?: Maybe<Scalars['SequelizeJSON']>
	offset?: Maybe<Scalars['Int']>
	after?: Maybe<Scalars['String']>
	first?: Maybe<Scalars['Int']>
	before?: Maybe<Scalars['String']>
	last?: Maybe<Scalars['Int']>
}

/** An organization */
export type ICoreGQLOrganizationMetadataArgs = {
	limit?: Maybe<Scalars['Int']>
	order?: Maybe<Scalars['String']>
	where?: Maybe<Scalars['SequelizeJSON']>
	offset?: Maybe<Scalars['Int']>
	after?: Maybe<Scalars['String']>
	first?: Maybe<Scalars['Int']>
	before?: Maybe<Scalars['String']>
	last?: Maybe<Scalars['Int']>
}

/** A connection to a list of items. */
export type ICoreGQLOrganizationBelongsToManyCategoriesConnection = {
	__typename?: 'OrganizationBelongsToManyCategoriesConnection'
	/** Information to aid in pagination. */
	pageInfo: ICoreGQLPageInfo
	/** A list of edges. */
	edges?: Maybe<Array<Maybe<ICoreGQLOrganizationBelongsToManyCategoriesEdge>>>
	totalCount?: Maybe<Scalars['Int']>
}

/** An edge in a connection. */
export type ICoreGQLOrganizationBelongsToManyCategoriesEdge = {
	__typename?: 'OrganizationBelongsToManyCategoriesEdge'
	/** The item at the end of the edge */
	node?: Maybe<ICoreGQLCategory>
	/** A cursor for use in pagination */
	cursor: Scalars['String']
}

/** A connection to a list of items. */
export type ICoreGQLOrganizationBelongsToManySkillsConnection = {
	__typename?: 'OrganizationBelongsToManySkillsConnection'
	/** Information to aid in pagination. */
	pageInfo: ICoreGQLPageInfo
	/** A list of edges. */
	edges?: Maybe<Array<Maybe<ICoreGQLOrganizationBelongsToManySkillsEdge>>>
	totalCount?: Maybe<Scalars['Int']>
}

/** An edge in a connection. */
export type ICoreGQLOrganizationBelongsToManySkillsEdge = {
	__typename?: 'OrganizationBelongsToManySkillsEdge'
	/** The item at the end of the edge */
	node?: Maybe<ICoreGQLSkill>
	/** A cursor for use in pagination */
	cursor: Scalars['String']
}

/** A connection to a list of items. */
export type ICoreGQLOrganizationBelongsToManyUsersConnection = {
	__typename?: 'OrganizationBelongsToManyUsersConnection'
	/** Information to aid in pagination. */
	pageInfo: ICoreGQLPageInfo
	/** A list of edges. */
	edges?: Maybe<Array<Maybe<ICoreGQLOrganizationBelongsToManyUsersEdge>>>
	totalCount?: Maybe<Scalars['Int']>
}

/** An edge in a connection. */
export type ICoreGQLOrganizationBelongsToManyUsersEdge = {
	__typename?: 'OrganizationBelongsToManyUsersEdge'
	/** The item at the end of the edge */
	node?: Maybe<ICoreGQLUser>
	/** A cursor for use in pagination */
	cursor: Scalars['String']
}

/** A connection to a list of items. */
export type ICoreGQLOrganizationConnection = {
	__typename?: 'OrganizationConnection'
	/** Information to aid in pagination. */
	pageInfo: ICoreGQLPageInfo
	/** A list of edges. */
	edges?: Maybe<Array<Maybe<ICoreGQLOrganizationEdge>>>
	totalCount?: Maybe<Scalars['Int']>
}

/** An edge in a connection. */
export type ICoreGQLOrganizationEdge = {
	__typename?: 'OrganizationEdge'
	/** The item at the end of the edge */
	node?: Maybe<ICoreGQLOrganization>
	/** A cursor for use in pagination */
	cursor: Scalars['String']
}

/** A connection to a list of items. */
export type ICoreGQLOrganizationHasManyGroupsConnection = {
	__typename?: 'OrganizationHasManyGroupsConnection'
	/** Information to aid in pagination. */
	pageInfo: ICoreGQLPageInfo
	/** A list of edges. */
	edges?: Maybe<Array<Maybe<ICoreGQLOrganizationHasManyGroupsEdge>>>
	totalCount?: Maybe<Scalars['Int']>
}

/** An edge in a connection. */
export type ICoreGQLOrganizationHasManyGroupsEdge = {
	__typename?: 'OrganizationHasManyGroupsEdge'
	/** The item at the end of the edge */
	node?: Maybe<ICoreGQLGroup>
	/** A cursor for use in pagination */
	cursor: Scalars['String']
}

/** A connection to a list of items. */
export type ICoreGQLOrganizationHasManyLocationsConnection = {
	__typename?: 'OrganizationHasManyLocationsConnection'
	/** Information to aid in pagination. */
	pageInfo: ICoreGQLPageInfo
	/** A list of edges. */
	edges?: Maybe<Array<Maybe<ICoreGQLOrganizationHasManyLocationsEdge>>>
	totalCount?: Maybe<Scalars['Int']>
}

/** An edge in a connection. */
export type ICoreGQLOrganizationHasManyLocationsEdge = {
	__typename?: 'OrganizationHasManyLocationsEdge'
	/** The item at the end of the edge */
	node?: Maybe<ICoreGQLLocation>
	/** A cursor for use in pagination */
	cursor: Scalars['String']
}

/** A connection to a list of items. */
export type ICoreGQLOrganizationHasManyMetadataConnection = {
	__typename?: 'OrganizationHasManyMetadataConnection'
	/** Information to aid in pagination. */
	pageInfo: ICoreGQLPageInfo
	/** A list of edges. */
	edges?: Maybe<Array<Maybe<ICoreGQLOrganizationHasManyMetadataEdge>>>
	totalCount?: Maybe<Scalars['Int']>
}

/** An edge in a connection. */
export type ICoreGQLOrganizationHasManyMetadataEdge = {
	__typename?: 'OrganizationHasManyMetadataEdge'
	/** The item at the end of the edge */
	node?: Maybe<ICoreGQLMetadata>
	/** A cursor for use in pagination */
	cursor: Scalars['String']
}

/** The data for deleting and organization */
export type ICoreGQLOrganizationSeedDeleteInput = {
	/** The id of the previously seeded organization to delete. */
	organizationId: Scalars['ID']
}

/** Returns the status of deleting the seed */
export type ICoreGQLOrganizationSeedDeleteResponse = {
	__typename?: 'OrganizationSeedDeleteResponse'
	/** The status of deleting the seeded org */
	status?: Maybe<Scalars['String']>
}

/** Input for creating teammates and jobs when seeding an org */
export type ICoreGQLOrganizationSeedGroupInput = {
	/** The minimum number of group managers to seed for this location group */
	minGroupManagers?: Maybe<Scalars['Int']>
	/** The minimum number of group managers to seed for this location group */
	maxGroupManagers?: Maybe<Scalars['Int']>
	/** The name of the location group to seed at the organization. */
	name?: Maybe<Scalars['String']>
	/** Weather or not to randomly assign locations to this group */
	autoAssignLocations?: Maybe<Scalars['Boolean']>
}

/** Input for creating guests when seeding an org */
export type ICoreGQLOrganizationSeedGuestsInput = {
	/** The minimum number of guests to seed for each location */
	min?: Maybe<Scalars['Int']>
	/** The maximum number of guests to seed for each location */
	max?: Maybe<Scalars['Int']>
	/** The maximum number of guest visits for each location */
	visitsMax?: Maybe<Scalars['Int']>
}

/** The configuration for seeing a NEW organization */
export type ICoreGQLOrganizationSeedInput = {
	/** What the name of the new organization is. */
	name: Scalars['String']
	/** Options for seeding owners in an org */
	owners?: Maybe<ICoreGQLOrganizationSeedOwnersInput>
	/** The location data to seed for the organization */
	locations?: Maybe<ICoreGQLOrganizationSeedLocationsInput>
	/**  The teammate data to see for each location */
	teammates?: Maybe<Array<Maybe<ICoreGQLOrganizationSeedTeammateJobsInput>>>
	/**  The group data to see for the organization */
	groups?: Maybe<Array<Maybe<ICoreGQLOrganizationSeedGroupInput>>>
	/** An array of the skill slugs to install for the organization */
	skills?: Maybe<Array<Maybe<Scalars['String']>>>
}

/** Input for seeding location data */
export type ICoreGQLOrganizationSeedLocationsInput = {
	/** The number of locations to seed */
	total?: Maybe<Scalars['Int']>
	/** The guest data to seed for each location */
	guests?: Maybe<ICoreGQLOrganizationSeedGuestsInput>
	/** The manager data to seed for each location */
	managers?: Maybe<ICoreGQLOrganizationSeedManagersInput>
}

/** Input for seeding managers per location */
export type ICoreGQLOrganizationSeedManagersInput = {
	/** The min number of managers to generate per location */
	min?: Maybe<Scalars['Int']>
	/** The max number of managers to generate per location */
	max?: Maybe<Scalars['Int']>
}

/** Input for creating owners when seeding an org */
export type ICoreGQLOrganizationSeedOwnersInput = {
	/** The number of owners to generate at random */
	total?: Maybe<Scalars['Int']>
}

/** Input for creating teammates and jobs when seeding an org */
export type ICoreGQLOrganizationSeedTeammateJobsInput = {
	/** The minimum number of teammates to seed for each job at a location */
	min?: Maybe<Scalars['Int']>
	/** The minimum number of teammates to seed for each job at a location */
	max?: Maybe<Scalars['Int']>
	/** The name of the job to seed at each location. */
	job?: Maybe<Scalars['String']>
}

/** An organization skill mapping */
export type ICoreGQLOrganizationSkill = {
	__typename?: 'OrganizationSkill'
	id?: Maybe<Scalars['String']>
	OrganizationId?: Maybe<Scalars['String']>
	SkillId?: Maybe<Scalars['String']>
	/** Optionally include warnings for values not authorized in this scope */
	warnings?: Maybe<ICoreGQLWarning>
	Skill?: Maybe<ICoreGQLSkill>
	Organization?: Maybe<ICoreGQLOrganization>
}

/** An organization skill mapping */
export type ICoreGQLOrganizationSkillSkillArgs = {
	where?: Maybe<Scalars['SequelizeJSON']>
}

/** An organization skill mapping */
export type ICoreGQLOrganizationSkillOrganizationArgs = {
	where?: Maybe<Scalars['SequelizeJSON']>
}

/** A connection to a list of items. */
export type ICoreGQLOrganizationUserConnection = {
	__typename?: 'OrganizationUserConnection'
	/** Information to aid in pagination. */
	pageInfo: ICoreGQLPageInfo
	/** A list of edges. */
	edges?: Maybe<Array<Maybe<ICoreGQLOrganizationUserEdge>>>
	totalCount?: Maybe<Scalars['Int']>
}

/** An edge in a connection. */
export type ICoreGQLOrganizationUserEdge = {
	__typename?: 'OrganizationUserEdge'
	/** The item at the end of the edge */
	node?: Maybe<ICoreGQLUser>
	/** A cursor for use in pagination */
	cursor: Scalars['String']
}

/** A connection to a list of items. */
export type ICoreGQLOrganizationUsersFilteredByLocationAndJobsConnection = {
	__typename?: 'OrganizationUsersFilteredByLocationAndJobsConnection'
	/** Information to aid in pagination. */
	pageInfo: ICoreGQLPageInfo
	/** A list of edges. */
	edges?: Maybe<
		Array<Maybe<ICoreGQLOrganizationUsersFilteredByLocationAndJobsEdge>>
	>
	totalCount?: Maybe<Scalars['Int']>
}

/** An edge in a connection. */
export type ICoreGQLOrganizationUsersFilteredByLocationAndJobsEdge = {
	__typename?: 'OrganizationUsersFilteredByLocationAndJobsEdge'
	/** The item at the end of the edge */
	node?: Maybe<ICoreGQLUser>
	/** A cursor for use in pagination */
	cursor: Scalars['String']
}

/** [FILTERED] Returns the list of OrganizationUsersFilteredByLocationAndJobs" */
export type ICoreGQLOrganizationUsersFilteredByLocationAndJobsResponse = {
	__typename?: 'OrganizationUsersFilteredByLocationAndJobsResponse'
	/** The list of location Users */
	Users?: Maybe<ICoreGQLOrganizationUsersFilteredByLocationAndJobsConnection>
}

/** [FILTERED] Returns the list of OrganizationUsersFilteredByLocationAndJobs" */
export type ICoreGQLOrganizationUsersFilteredByLocationAndJobsResponseUsersArgs = {
	limit?: Maybe<Scalars['Int']>
	order?: Maybe<Scalars['String']>
	where?: Maybe<Scalars['SequelizeJSON']>
	offset?: Maybe<Scalars['Int']>
	after?: Maybe<Scalars['String']>
	first?: Maybe<Scalars['Int']>
	before?: Maybe<Scalars['String']>
	last?: Maybe<Scalars['Int']>
	organizationId: Scalars['ID']
	locationId: Scalars['ID']
	notInJobIds: Array<Maybe<Scalars['ID']>>
}

/** [FILTERED] Returns the list of OrganizationUsers" */
export type ICoreGQLOrganizationUsersResponse = {
	__typename?: 'OrganizationUsersResponse'
	/** The list of location Users */
	Users?: Maybe<ICoreGQLOrganizationUserConnection>
}

/** [FILTERED] Returns the list of OrganizationUsers" */
export type ICoreGQLOrganizationUsersResponseUsersArgs = {
	limit?: Maybe<Scalars['Int']>
	order?: Maybe<Scalars['String']>
	where?: Maybe<Scalars['SequelizeJSON']>
	offset?: Maybe<Scalars['Int']>
	after?: Maybe<Scalars['String']>
	first?: Maybe<Scalars['Int']>
	before?: Maybe<Scalars['String']>
	last?: Maybe<Scalars['Int']>
	organizationId: Scalars['ID']
	groupIds?: Maybe<Array<Maybe<Scalars['ID']>>>
	notInGroupIds?: Maybe<Array<Maybe<Scalars['ID']>>>
	jobIds?: Maybe<Array<Maybe<Scalars['ID']>>>
	roles?: Maybe<Array<Maybe<Scalars['String']>>>
	notInJobIds?: Maybe<Array<Maybe<Scalars['ID']>>>
	notInRoles?: Maybe<Array<Maybe<Scalars['String']>>>
	search?: Maybe<Scalars['String']>
}

/** Information about pagination in a connection. */
export type ICoreGQLPageInfo = {
	__typename?: 'PageInfo'
	/** When paginating forwards, are there more items? */
	hasNextPage: Scalars['Boolean']
	/** When paginating backwards, are there more items? */
	hasPreviousPage: Scalars['Boolean']
	/** When paginating backwards, the cursor to continue. */
	startCursor?: Maybe<Scalars['String']>
	/** When paginating forwards, the cursor to continue. */
	endCursor?: Maybe<Scalars['String']>
}

/** A partner */
export type ICoreGQLPartner = {
	__typename?: 'Partner'
	id?: Maybe<Scalars['String']>
	/** The name of the partner company */
	name?: Maybe<Scalars['String']>
	/** Optionally include warnings for values not authorized in this scope */
	warnings?: Maybe<ICoreGQLWarning>
	Skills?: Maybe<ICoreGQLPartnerBelongsToManySkillsConnection>
}

/** A partner */
export type ICoreGQLPartnerSkillsArgs = {
	limit?: Maybe<Scalars['Int']>
	order?: Maybe<Scalars['String']>
	where?: Maybe<Scalars['SequelizeJSON']>
	offset?: Maybe<Scalars['Int']>
	after?: Maybe<Scalars['String']>
	first?: Maybe<Scalars['Int']>
	before?: Maybe<Scalars['String']>
	last?: Maybe<Scalars['Int']>
}

/** A connection to a list of items. */
export type ICoreGQLPartnerBelongsToManySkillsConnection = {
	__typename?: 'PartnerBelongsToManySkillsConnection'
	/** Information to aid in pagination. */
	pageInfo: ICoreGQLPageInfo
	/** A list of edges. */
	edges?: Maybe<Array<Maybe<ICoreGQLPartnerBelongsToManySkillsEdge>>>
	totalCount?: Maybe<Scalars['Int']>
}

/** An edge in a connection. */
export type ICoreGQLPartnerBelongsToManySkillsEdge = {
	__typename?: 'PartnerBelongsToManySkillsEdge'
	/** The item at the end of the edge */
	node?: Maybe<ICoreGQLSkill>
	/** A cursor for use in pagination */
	cursor: Scalars['String']
}

/** The permission item */
export type ICoreGQLPermission = {
	__typename?: 'permission'
	/** The permission name */
	name?: Maybe<Scalars['String']>
	/** The permission value */
	value?: Maybe<Scalars['Boolean']>
}

/** A plan */
export type ICoreGQLPlan = {
	__typename?: 'Plan'
	id?: Maybe<Scalars['String']>
	/** Optionally include warnings for values not authorized in this scope */
	warnings?: Maybe<ICoreGQLWarning>
	Skills?: Maybe<ICoreGQLPlanBelongsToManySkillsConnection>
}

/** A plan */
export type ICoreGQLPlanSkillsArgs = {
	limit?: Maybe<Scalars['Int']>
	order?: Maybe<Scalars['String']>
	where?: Maybe<Scalars['SequelizeJSON']>
	offset?: Maybe<Scalars['Int']>
	after?: Maybe<Scalars['String']>
	first?: Maybe<Scalars['Int']>
	before?: Maybe<Scalars['String']>
	last?: Maybe<Scalars['Int']>
}

/** A connection to a list of items. */
export type ICoreGQLPlanBelongsToManySkillsConnection = {
	__typename?: 'PlanBelongsToManySkillsConnection'
	/** Information to aid in pagination. */
	pageInfo: ICoreGQLPageInfo
	/** A list of edges. */
	edges?: Maybe<Array<Maybe<ICoreGQLPlanBelongsToManySkillsEdge>>>
	totalCount?: Maybe<Scalars['Int']>
}

/** An edge in a connection. */
export type ICoreGQLPlanBelongsToManySkillsEdge = {
	__typename?: 'PlanBelongsToManySkillsEdge'
	/** The item at the end of the edge */
	node?: Maybe<ICoreGQLSkill>
	/** A cursor for use in pagination */
	cursor: Scalars['String']
}

/** A preference */
export type ICoreGQLPreference = {
	__typename?: 'Preference'
	id?: Maybe<Scalars['String']>
	key?: Maybe<Scalars['String']>
	/** The Preferences */
	val?: Maybe<Scalars['SequelizeJSON']>
	createdAt?: Maybe<Scalars['Date']>
	updatedAt?: Maybe<Scalars['Date']>
	OrganizationId?: Maybe<Scalars['String']>
	LocationId?: Maybe<Scalars['String']>
	UserId?: Maybe<Scalars['String']>
	/** Optionally include warnings for values not authorized in this scope */
	warnings?: Maybe<ICoreGQLWarning>
	Organization?: Maybe<ICoreGQLOrganization>
	Location?: Maybe<ICoreGQLLocation>
	User?: Maybe<ICoreGQLUser>
}

/** A preference */
export type ICoreGQLPreferenceOrganizationArgs = {
	where?: Maybe<Scalars['SequelizeJSON']>
}

/** A preference */
export type ICoreGQLPreferenceLocationArgs = {
	where?: Maybe<Scalars['SequelizeJSON']>
}

/** A preference */
export type ICoreGQLPreferenceUserArgs = {
	where?: Maybe<Scalars['SequelizeJSON']>
}

/** A connection to a list of items. */
export type ICoreGQLPreferenceConnection = {
	__typename?: 'PreferenceConnection'
	/** Information to aid in pagination. */
	pageInfo: ICoreGQLPageInfo
	/** A list of edges. */
	edges?: Maybe<Array<Maybe<ICoreGQLPreferenceEdge>>>
	totalCount?: Maybe<Scalars['Int']>
}

/** An edge in a connection. */
export type ICoreGQLPreferenceEdge = {
	__typename?: 'PreferenceEdge'
	/** The item at the end of the edge */
	node?: Maybe<ICoreGQLPreference>
	/** A cursor for use in pagination */
	cursor: Scalars['String']
}

export type ICoreGQLQuery = {
	__typename?: 'Query'
	/** Get info about an access point */
	AccessPoint?: Maybe<ICoreGQLAccessPoint>
	/** Get requested acls */
	Acls?: Maybe<Array<Maybe<ICoreGQLAcl>>>
	/**
	 * Get available acls that may be set on Jobs. This will be a combination of core
	 * acls and skill acls installed for the Organization
	 **/
	AvailableAcls?: Maybe<Array<Maybe<ICoreGQLAvailableAclGroup>>>
	/** Get all acls for a user based on slug(s) */
	UserAcls?: Maybe<ICoreGQLUserAclsResponse>
	/** Get audit logs for an organization. Max/default limit is 200. */
	Audits?: Maybe<Array<Maybe<ICoreGQLAudit>>>
	/** Search big in the platform. Users, locations, skills, you name it, we searrch it! */
	BigSearch?: Maybe<Array<Maybe<ICoreGQLBigSearchResultSectionType>>>
	/** Gets information about a single Calendar. Depending on user permissions, additional information may be available. */
	Calendar?: Maybe<ICoreGQLCalendar>
	/**
	 * Gets all of the page Calendar's register by a skill. Depending on user
	 * permissions, additional information may be available.
	 **/
	Calendars?: Maybe<Array<Maybe<ICoreGQLCalendar>>>
	/** Gets all DashboardCards from a Skill for a user or the page user. */
	DashboardCards?: Maybe<Array<Maybe<Scalars['String']>>>
	/** Gets jwts and login urls for users to allow logging in as a different user for debugging purposes. Limit is 50 */
	debugGetUserJwts?: Maybe<ICoreGQLDebugGetUserJwtsResponse>
	/** Get feed items. Max/default limit is 200. */
	FeedItems?: Maybe<ICoreGQLFeedItemConnection>
	/** [Skill Only] Get files */
	FileItems?: Maybe<ICoreGQLFileItemConnection>
	/** Get Group */
	Group?: Maybe<ICoreGQLGroup>
	/** Get Groups for an organization */
	Groups?: Maybe<ICoreGQLGroupConnection>
	/** Get job by id for an Organization. */
	Job?: Maybe<ICoreGQLJob>
	/** Gets Jobs for an Organization. Max/default limit 50. */
	Jobs?: Maybe<ICoreGQLJobConnection>
	/** Get public or team scoped (if "can_view_teammate_roles") information about a single location. */
	Location?: Maybe<ICoreGQLLocation>
	/** Get public information about locations. Max/default limit 50. */
	Locations?: Maybe<ICoreGQLLocationConnection>
	/** Get Locations the current user is connected to as a teammate (or above). Max/default limit 50. */
	LocationsForUser?: Maybe<ICoreGQLLocationsForUserLocationConnectionConnection>
	/** Check if a location slug is available. */
	checkLocationSlug?: Maybe<ICoreGQLCheckSlugResponse>
	/** Check if a store num is available. */
	checkStoreNum?: Maybe<ICoreGQLCheckStoreNumResponse>
	/** Gets Location schedule. Requires that a skill is installed that responds to the "get-location-schedule" event. */
	LocationSchedule?: Maybe<ICoreGQLLocationSchedule>
	/** Search for users in a location. Max/default limit 50. */
	LocationUsers?: Maybe<ICoreGQLLocationUsersResponse>
	/** Search for users in a location by job. Max/default limit 50. */
	LocationUsersByJob?: Maybe<ICoreGQLLocationUsersByJobResponse>
	/** Gets information about a single organization. Depending on user permissions, additional information may be available. */
	Organization?: Maybe<ICoreGQLOrganization>
	/**
	 * Gets public information about organizations.
	 *
	 * Max/default limit 50
	 **/
	Organizations?: Maybe<ICoreGQLOrganizationConnection>
	/** Search for users in a location. Max/default limit 50. */
	OrganizationUsers?: Maybe<ICoreGQLOrganizationUsersResponse>
	/** Search for users in an organization. Max/default limit 50. */
	OrganizationUsersFilteredByLocationAndJobs?: Maybe<
		ICoreGQLOrganizationUsersFilteredByLocationAndJobsResponse
	>
	/**
	 * Gets preferences.
	 *
	 * Max/default limit 50
	 **/
	Preferences?: Maybe<ICoreGQLPreferenceConnection>
	/** Lets you search for a person by phone */
	QuickAddSearch?: Maybe<ICoreGQLQuickAddSearchResult>
	/** Gets teammate schedules at a location */
	TeammateSchedules?: Maybe<Array<Maybe<ICoreGQLTeammateSchedule>>>
	/** Search for information across the product. */
	Search?: Maybe<ICoreGQLSearchResponse>
	/** Get settings for a page */
	Settings?: Maybe<Array<Maybe<ICoreGQLSetting>>>
	/** [Skill Only] Get settings for a skill */
	GetSettings?: Maybe<ICoreGQLGetSettingsResponse>
	/** Get information about a single skill. If requesting as an authenticated skill, may have access to additional information. */
	Skill?: Maybe<ICoreGQLSkill>
	/** Get available (published) skills. Max/default limit 50 */
	Skills?: Maybe<Array<Maybe<ICoreGQLSkill>>>
	/** Get information about a single skill. If requesting as an authenticated skill, may have access to additional information. */
	SkillViews?: Maybe<Array<Maybe<ICoreGQLSkillView>>>
	/** Get unconfirmed users (invited users) */
	UnconfirmedUsers?: Maybe<ICoreGQLUnconfirmedUserConnection>
	/**
	 * Get information about a single user. If organizationId or locationId is passed
	 * and the requesting user has elevated org/location permissions, additional info
	 * about the user may be available. By default will return public information about user.
	 **/
	User?: Maybe<ICoreGQLUser>
	UserLocations?: Maybe<ICoreGQLUserLocationConnection>
	UserOrganizations?: Maybe<ICoreGQLUserOrganizationConnection>
	/** Gets information about a user's visits */
	Visits?: Maybe<ICoreGQLVisitConnection>
	/** Test a simple query */
	testSimpleQuery: Array<Maybe<ICoreGQLTestType>>
	/** Test returning a single Sequelize User Model */
	getFirstUser?: Maybe<ICoreGQLUser>
	/** Test using relay and using advanced resolver with selected fields */
	loadFirstLocations?: Maybe<ICoreGQLLocationConnection>
	/** Test of union resolution */
	loadUserOrLocation?: Maybe<ICoreGQLModel>
	/**
	 * Get a skill token and other info for the currently logged in user. This info
	 * can be used to load a skill view or redirect the user.
	 **/
	getSkillConnectionSettings?: Maybe<ICoreGQLGetSkillConnectionSettingsResponse>
	/** Get all the calendar events for a specific calendar */
	CalendarEvents?: Maybe<Array<Maybe<ICoreGQLCalendarEvent>>>
	/** Pull cards for a particular view */
	Cards?: Maybe<Array<Maybe<ICoreGQLCardResponse>>>
}

export type ICoreGQLQueryAccessPointArgs = {
	apId?: Maybe<Scalars['ID']>
	nodeMac?: Maybe<Scalars['String']>
}

export type ICoreGQLQueryAclsArgs = {
	userId?: Maybe<Scalars['ID']>
	permissions: Scalars['JSON']
	locationId?: Maybe<Scalars['ID']>
	organizationId: Scalars['ID']
}

export type ICoreGQLQueryAvailableAclsArgs = {
	organizationId?: Maybe<Scalars['ID']>
}

export type ICoreGQLQueryUserAclsArgs = {
	userId: Scalars['ID']
	slugs?: Maybe<Array<Maybe<Scalars['String']>>>
	locationId?: Maybe<Scalars['ID']>
	organizationId: Scalars['ID']
}

export type ICoreGQLQueryAuditsArgs = {
	organizationId: Scalars['ID']
}

export type ICoreGQLQueryBigSearchArgs = {
	organizationId: Scalars['ID']
	locationId?: Maybe<Scalars['ID']>
	search: Scalars['String']
	limit?: Maybe<Scalars['Int']>
	offset?: Maybe<Scalars['Int']>
	section?: Maybe<Scalars['String']>
	types?: Maybe<Array<ICoreGQLBigSearchObjectType>>
}

export type ICoreGQLQueryCalendarArgs = {
	id: Scalars['ID']
	organizationId: Scalars['ID']
	locationId?: Maybe<Scalars['ID']>
}

export type ICoreGQLQueryCalendarsArgs = {
	page: Scalars['String']
	organizationId: Scalars['ID']
	locationId?: Maybe<Scalars['ID']>
}

export type ICoreGQLQueryDashboardCardsArgs = {
	page: Scalars['String']
}

export type ICoreGQLQueryDebugGetUserJwtsArgs = {
	locationId?: Maybe<Scalars['ID']>
	organizationId?: Maybe<Scalars['ID']>
	userId?: Maybe<Scalars['ID']>
	offset?: Maybe<Scalars['Int']>
	limit?: Maybe<Scalars['Int']>
}

export type ICoreGQLQueryFeedItemsArgs = {
	limit?: Maybe<Scalars['Int']>
	order?: Maybe<Scalars['String']>
	where?: Maybe<Scalars['SequelizeJSON']>
	offset?: Maybe<Scalars['Int']>
	after?: Maybe<Scalars['String']>
	first?: Maybe<Scalars['Int']>
	before?: Maybe<Scalars['String']>
	last?: Maybe<Scalars['Int']>
	userId?: Maybe<Scalars['ID']>
	organizationId?: Maybe<Scalars['ID']>
	locationId?: Maybe<Scalars['ID']>
}

export type ICoreGQLQueryFileItemsArgs = {
	limit?: Maybe<Scalars['Int']>
	order?: Maybe<Scalars['String']>
	where?: Maybe<Scalars['SequelizeJSON']>
	offset?: Maybe<Scalars['Int']>
	after?: Maybe<Scalars['String']>
	first?: Maybe<Scalars['Int']>
	before?: Maybe<Scalars['String']>
	last?: Maybe<Scalars['Int']>
	fileItemIds: Array<Maybe<Scalars['ID']>>
}

export type ICoreGQLQueryGroupArgs = {
	id: Scalars['ID']
	organizationId: Scalars['ID']
}

export type ICoreGQLQueryGroupsArgs = {
	organizationId: Scalars['ID']
	notAssociatedToLocationId?: Maybe<Scalars['ID']>
	limit?: Maybe<Scalars['Int']>
	order?: Maybe<Scalars['String']>
	where?: Maybe<Scalars['SequelizeJSON']>
	offset?: Maybe<Scalars['Int']>
	after?: Maybe<Scalars['String']>
	first?: Maybe<Scalars['Int']>
	before?: Maybe<Scalars['String']>
	last?: Maybe<Scalars['Int']>
}

export type ICoreGQLQueryJobArgs = {
	organizationId: Scalars['ID']
	id: Scalars['ID']
}

export type ICoreGQLQueryJobsArgs = {
	organizationId?: Maybe<Scalars['ID']>
	limit?: Maybe<Scalars['Int']>
	order?: Maybe<Scalars['String']>
	where?: Maybe<Scalars['SequelizeJSON']>
	offset?: Maybe<Scalars['Int']>
	after?: Maybe<Scalars['String']>
	first?: Maybe<Scalars['Int']>
	before?: Maybe<Scalars['String']>
	last?: Maybe<Scalars['Int']>
}

export type ICoreGQLQueryLocationArgs = {
	id: Scalars['ID']
}

export type ICoreGQLQueryLocationsArgs = {
	organizationId: Scalars['ID']
	notInGroupIds?: Maybe<Array<Maybe<Scalars['ID']>>>
	search?: Maybe<Scalars['String']>
	limit?: Maybe<Scalars['Int']>
	order?: Maybe<Scalars['String']>
	where?: Maybe<Scalars['SequelizeJSON']>
	offset?: Maybe<Scalars['Int']>
	after?: Maybe<Scalars['String']>
	first?: Maybe<Scalars['Int']>
	before?: Maybe<Scalars['String']>
	last?: Maybe<Scalars['Int']>
}

export type ICoreGQLQueryLocationsForUserArgs = {
	notInGroupIds?: Maybe<Array<Maybe<Scalars['ID']>>>
	search?: Maybe<Scalars['String']>
	limit?: Maybe<Scalars['Int']>
	order?: Maybe<Scalars['String']>
	where?: Maybe<Scalars['SequelizeJSON']>
	offset?: Maybe<Scalars['Int']>
	after?: Maybe<Scalars['String']>
	first?: Maybe<Scalars['Int']>
	before?: Maybe<Scalars['String']>
	last?: Maybe<Scalars['Int']>
}

export type ICoreGQLQueryCheckLocationSlugArgs = {
	slug: Scalars['String']
	organizationId: Scalars['ID']
	locationId?: Maybe<Scalars['ID']>
}

export type ICoreGQLQueryCheckStoreNumArgs = {
	storeNum: Scalars['String']
	organizationId: Scalars['ID']
	locationId?: Maybe<Scalars['ID']>
}

export type ICoreGQLQueryLocationScheduleArgs = {
	locationId: Scalars['ID']
	startDate?: Maybe<Scalars['String']>
	endDate?: Maybe<Scalars['String']>
}

export type ICoreGQLQueryOrganizationArgs = {
	id: Scalars['ID']
}

export type ICoreGQLQueryOrganizationsArgs = {
	limit?: Maybe<Scalars['Int']>
	order?: Maybe<Scalars['String']>
	where?: Maybe<Scalars['SequelizeJSON']>
	offset?: Maybe<Scalars['Int']>
	after?: Maybe<Scalars['String']>
	first?: Maybe<Scalars['Int']>
	before?: Maybe<Scalars['String']>
	last?: Maybe<Scalars['Int']>
}

export type ICoreGQLQueryPreferencesArgs = {
	keys?: Maybe<Array<Maybe<Scalars['String']>>>
	userId?: Maybe<Scalars['ID']>
	locationId?: Maybe<Scalars['ID']>
	organizationId?: Maybe<Scalars['ID']>
	limit?: Maybe<Scalars['Int']>
	order?: Maybe<Scalars['String']>
	where?: Maybe<Scalars['SequelizeJSON']>
	offset?: Maybe<Scalars['Int']>
	after?: Maybe<Scalars['String']>
	first?: Maybe<Scalars['Int']>
	before?: Maybe<Scalars['String']>
	last?: Maybe<Scalars['Int']>
}

export type ICoreGQLQueryQuickAddSearchArgs = {
	organizationId: Scalars['ID']
	phoneNumber: Scalars['String']
}

export type ICoreGQLQueryTeammateSchedulesArgs = {
	organizationId: Scalars['ID']
	locationId: Scalars['ID']
	userIds?: Maybe<Array<Maybe<Scalars['ID']>>>
	startDate?: Maybe<Scalars['String']>
	endDate?: Maybe<Scalars['String']>
}

export type ICoreGQLQuerySearchArgs = {
	query: Scalars['String']
	organizationId: Scalars['ID']
}

export type ICoreGQLQuerySettingsArgs = {
	page: Scalars['String']
	skillId: Scalars['ID']
	locationId?: Maybe<Scalars['ID']>
	organizationId?: Maybe<Scalars['ID']>
}

export type ICoreGQLQueryGetSettingsArgs = {
	requestedSettings?: Maybe<Array<Maybe<Scalars['String']>>>
	userId?: Maybe<Scalars['ID']>
	organizationId?: Maybe<Scalars['ID']>
	locationId?: Maybe<Scalars['ID']>
}

export type ICoreGQLQuerySkillArgs = {
	id: Scalars['ID']
}

export type ICoreGQLQuerySkillViewsArgs = {
	page: Scalars['String']
	locationId?: Maybe<Scalars['ID']>
	organizationId?: Maybe<Scalars['ID']>
	pageUserId?: Maybe<Scalars['ID']>
	skillId?: Maybe<Scalars['ID']>
	groupId?: Maybe<Scalars['ID']>
	jobTitleId?: Maybe<Scalars['ID']>
}

export type ICoreGQLQueryUnconfirmedUsersArgs = {
	organizationId: Scalars['ID']
	locationId?: Maybe<Scalars['ID']>
	limit?: Maybe<Scalars['Int']>
	order?: Maybe<Scalars['String']>
	where?: Maybe<Scalars['SequelizeJSON']>
	offset?: Maybe<Scalars['Int']>
	after?: Maybe<Scalars['String']>
	first?: Maybe<Scalars['Int']>
	before?: Maybe<Scalars['String']>
	last?: Maybe<Scalars['Int']>
}

export type ICoreGQLQueryUserArgs = {
	id: Scalars['ID']
	organizationId?: Maybe<Scalars['ID']>
	locationId?: Maybe<Scalars['ID']>
}

export type ICoreGQLQueryUserLocationsArgs = {
	limit?: Maybe<Scalars['Int']>
	order?: Maybe<Scalars['String']>
	where?: Maybe<Scalars['SequelizeJSON']>
	offset?: Maybe<Scalars['Int']>
	after?: Maybe<Scalars['String']>
	first?: Maybe<Scalars['Int']>
	before?: Maybe<Scalars['String']>
	last?: Maybe<Scalars['Int']>
	organizationId?: Maybe<Scalars['ID']>
	locationId?: Maybe<Scalars['ID']>
}

export type ICoreGQLQueryUserOrganizationsArgs = {
	limit?: Maybe<Scalars['Int']>
	order?: Maybe<Scalars['String']>
	where?: Maybe<Scalars['SequelizeJSON']>
	offset?: Maybe<Scalars['Int']>
	after?: Maybe<Scalars['String']>
	first?: Maybe<Scalars['Int']>
	before?: Maybe<Scalars['String']>
	last?: Maybe<Scalars['Int']>
	organizationId?: Maybe<Scalars['ID']>
	locationId?: Maybe<Scalars['ID']>
}

export type ICoreGQLQueryVisitsArgs = {
	limit?: Maybe<Scalars['Int']>
	order?: Maybe<Scalars['String']>
	where?: Maybe<Scalars['SequelizeJSON']>
	offset?: Maybe<Scalars['Int']>
	after?: Maybe<Scalars['String']>
	first?: Maybe<Scalars['Int']>
	before?: Maybe<Scalars['String']>
	last?: Maybe<Scalars['Int']>
	orderBy?: Maybe<Array<Maybe<ICoreGQLVisitsOrderBy>>>
	organizationId: Scalars['ID']
	locationId?: Maybe<Scalars['ID']>
	userId?: Maybe<Scalars['ID']>
}

export type ICoreGQLQueryTestSimpleQueryArgs = {
	id: Scalars['ID']
}

export type ICoreGQLQueryLoadFirstLocationsArgs = {
	limit?: Maybe<Scalars['Int']>
	order?: Maybe<Scalars['String']>
	where?: Maybe<Scalars['JSON']>
	offset?: Maybe<Scalars['Int']>
	after?: Maybe<Scalars['String']>
	first?: Maybe<Scalars['Int']>
	before?: Maybe<Scalars['String']>
	last?: Maybe<Scalars['Int']>
}

export type ICoreGQLQueryLoadUserOrLocationArgs = {
	type: Scalars['String']
}

export type ICoreGQLQueryGetSkillConnectionSettingsArgs = {
	organizationId?: Maybe<Scalars['ID']>
	locationId?: Maybe<Scalars['ID']>
	skillId?: Maybe<Scalars['ID']>
	slug?: Maybe<Scalars['String']>
	expiresIn?: Maybe<Scalars['Int']>
}

export type ICoreGQLQueryCalendarEventsArgs = {
	calendarId: Scalars['ID']
	organizationId: Scalars['ID']
	locationId?: Maybe<Scalars['ID']>
	userIds?: Maybe<Array<Scalars['ID']>>
	startAt: Scalars['DateTime']
	endAt: Scalars['DateTime']
	useMockData?: Maybe<Scalars['Boolean']>
}

export type ICoreGQLQueryCardsArgs = {
	page: Scalars['String']
	pageUserId?: Maybe<Scalars['ID']>
	skillId?: Maybe<Scalars['ID']>
	locationId?: Maybe<Scalars['ID']>
	organizationId: Scalars['ID']
	useMockData?: Maybe<Scalars['Boolean']>
}

/** The results to a search based on phone */
export type ICoreGQLQuickAddSearchResult = {
	__typename?: 'QuickAddSearchResult'
	/** Person's first name. */
	firstName?: Maybe<Scalars['String']>
	/** Person's last name. */
	lastName?: Maybe<Scalars['String']>
}

/** Add a user (just a guest right now) wicked quick */
export type ICoreGQLQuickAddUser = {
	/** The user's phone number */
	phoneNumber: Scalars['String']
	/** Optional first name */
	firstName?: Maybe<Scalars['String']>
	/** Optional last name */
	lastName?: Maybe<Scalars['String']>
	/** ID of the current organization */
	organizationId: Scalars['ID']
	/** ID of the location you want to add to */
	locationId: Scalars['ID']
}

/** Returns the added "User" */
export type ICoreGQLQuickAddUserResponse = {
	__typename?: 'quickAddUserResponse'
	/** The added User */
	User?: Maybe<ICoreGQLUser>
}

/** A radio control. Give a bunch the same name to keep them as part of the same group */
export type ICoreGQLRadio = ICoreGQLActionExecutor & {
	__typename?: 'Radio'
	/** Unique identifier */
	id: Scalars['ID']
	/** A name attached to this radio button */
	name?: Maybe<Scalars['String']>
	/** Label and text for the radio */
	label?: Maybe<Scalars['String']>
	/** Optional text to show after the label */
	postText?: Maybe<Scalars['String']>
	/** is this control disabled? */
	isDisabled?: Maybe<Scalars['Boolean']>
	/** Is this control checked? */
	isChecked?: Maybe<Scalars['Boolean']>
	/** Optional action to invoke when tapped */
	action?: Maybe<ICoreGQLAction>
}

/** The input for refreshing a JWT */
export type ICoreGQLRefreshTokenInput = {
	/** The JWT token to refresh */
	jwt: Scalars['String']
	/** Optionally set the number of seconds the JWT should be valid for. Maximum: 15780000 */
	expiresIn?: Maybe<Scalars['Int']>
}

/** The response for refreshing a JWT. A new JWT token! */
export type ICoreGQLRefreshTokenResponse = {
	__typename?: 'refreshTokenResponse'
	/** A new JWT */
	jwt: Scalars['String']
}

/** Register a UserDevice */
export type ICoreGQLRegisterDevice = {
	/** id of the user to register a device for */
	userId: Scalars['ID']
	/** The operating system running on the device ("mac" | "ios" | "android") */
	deviceOS?: Maybe<Scalars['String']>
	/** The push notification token for this device. */
	pushToken?: Maybe<Scalars['String']>
}

/** Returns id of the registered UserDevice */
export type ICoreGQLRegisterDeviceResponse = {
	__typename?: 'registerDeviceResponse'
	/** User Device id */
	userDeviceId: Scalars['ID']
}

/** values needed to remove a dashboard card */
export type ICoreGQLRemoveDashboardCardInput = {
	/** The skillCardId */
	skillCardId: Scalars['String']
	/** The page the card will show on. */
	page: Scalars['String']
	/** The slug of the skill the card belongs too. */
	skillSlug: Scalars['String']
}

/** Status will be  */
export type ICoreGQLRemoveDashboardCardResponse = {
	__typename?: 'removeDashboardCardResponse'
	/** Whether the dashboard card was removed successfully */
	success?: Maybe<Scalars['Boolean']>
	/** Errors and the reason the dashboard card could not be removed */
	errors?: Maybe<Scalars['JSON']>
}

/** Inputs for removing a user from roles */
export type ICoreGQLRemoveUserFromRolesInput = {
	/** The id of the Organization */
	organizationId: Scalars['ID']
	/** The id of the User */
	userId: Scalars['ID']
	/** Array of roles that should be removed from the user. If role="all" it will promote the user to guest organization-wide. */
	rolesToRemove: Array<Maybe<ICoreGQLAddRolesType>>
}

/** The response */
export type ICoreGQLRemoveUserFromRolesResponse = {
	__typename?: 'removeUserFromRolesResponse'
	/** If successful, will be "success" */
	status?: Maybe<Scalars['String']>
}

/** Request a login either via pin or magic link */
export type ICoreGQLRequestLogin = {
	/** The phone number of the user that is logging in */
	phoneNumber: Scalars['String']
	/** Either "pin" or "magiclink" */
	method: Scalars['String']
	/** Optional redirect path */
	redirect?: Maybe<Scalars['String']>
	/** Optional query string to include */
	query?: Maybe<Scalars['String']>
}

/** Request a login either via pin or magic link */
export type ICoreGQLRequestLoginResponse = {
	__typename?: 'requestLoginResponse'
	/** Will be "success". On failure, check errors */
	status: Scalars['String']
	/** The formatted phone number */
	phoneNumber: Scalars['String']
}

export type ICoreGQLRescheduleCalendarEventEventBlockTypeInput = {
	/** The event block id */
	id: Scalars['String']
	/** The duration of the block in seconds */
	durationSec: Scalars['Int']
}

export type ICoreGQLRescheduleCalendarEventInput = {
	/** The id of the event to reschedule. This will be in the form of '<skill_slug_v2>:1234' */
	id: Scalars['String']
	/** The id of the organization where the event occurs */
	organizationId: Scalars['ID']
	/** The id of the location where the event occurs */
	locationId?: Maybe<Scalars['ID']>
	/** An identifier that marks a group of events as related */
	collection?: Maybe<Scalars['String']>
	/** The new start for the event. This should be adjusted for timezone before it is sent to the API. */
	newStartAt?: Maybe<Scalars['String']>
	/** The user who 'owns' the event. */
	newUserId?: Maybe<Scalars['String']>
	/** Set new block durations for the event. */
	blockUpdates?: Maybe<
		Array<Maybe<ICoreGQLRescheduleCalendarEventEventBlockTypeInput>>
	>
}

export type ICoreGQLRescheduleCalendarEventResponse = {
	__typename?: 'RescheduleCalendarEventResponse'
	/** Will be 'success' or 'failure' */
	status: Scalars['String']
	/** The updated calendar event */
	calendarEvent?: Maybe<ICoreGQLCalendarEvent>
	/** Details if an error occurs */
	error?: Maybe<ICoreGQLEventError>
	/** Assuming the reschedule was successful but with warnings, this array will be populated with those warnings. */
	warnings?: Maybe<Array<Maybe<ICoreGQLEventWarning>>>
}

/** Inputs for resending an invite */
export type ICoreGQLResendInviteInput = {
	/** The id of the UnconfirmedUser */
	unconfirmedUserId: Scalars['ID']
	/** The organization id of the invite */
	organizationId: Scalars['ID']
}

/** The resend invite response */
export type ICoreGQLResendInviteResponse = {
	__typename?: 'resendInviteResponse'
	/** If successful, will be "success" */
	status?: Maybe<Scalars['String']>
}

/** Inputs for revoking an invite */
export type ICoreGQLRevokeInviteInput = {
	/** The id of the UnconfirmedUser */
	unconfirmedUserId: Scalars['ID']
	/** The organization id of the invite */
	organizationId: Scalars['ID']
}

/** The revoke invite response */
export type ICoreGQLRevokeInviteResponse = {
	__typename?: 'revokeInviteResponse'
	/** If successful, will be "success" */
	status?: Maybe<Scalars['String']>
}

/** Preferences to create or update */
export type ICoreGQLSavePreferencesInput = {
	/** The id of the organization to update */
	preferences: Array<Maybe<ICoreGQLSavePreferencesItemInput>>
}

/** Preferences to create or update */
export type ICoreGQLSavePreferencesItemInput = {
	/** The key of the preference. A valid key must begin with a letter, contain only letters, numbers, and underscores. */
	key: Scalars['String']
	/** The data for the preference to save */
	val: Scalars['JSON']
	/** If this is a user preference, must match the currently logged in user */
	userId?: Maybe<Scalars['String']>
	/**
	 * Must be set if this is an Organization-wide preference or if it is a user
	 * organization preference. Requires the "can_set_organization_preferences"
	 * permission for an Organization-wide preference.
	 **/
	organizationId?: Maybe<Scalars['String']>
	/**
	 * Must be set (along with "organizationId") if this is a Location-wide
	 * preference or if it is a user location preference. Requires the
	 * "can_set_location_preferences" permission for a Location-wide preference.
	 **/
	locationId?: Maybe<Scalars['String']>
}

/** Returns the updated "Organization" */
export type ICoreGQLSavePreferencesResponse = {
	__typename?: 'savePreferencesResponse'
	/** Will be "success" */
	status: Scalars['String']
	/** The saved preferences */
	Preferences: Array<Maybe<ICoreGQLPreference>>
}

/** Array of settings to save */
export type ICoreGQLSaveSettingsInput = {
	/**
	 * The page to save settings for. Valid options are: "skill_settings_user",
	 * "skill_settings_user_org", "skill_settings_user_location"
	 * "skill_settings_org", or "skill_settings_location"
	 **/
	page: Scalars['String']
	/** The skill id for the settings */
	skillId: Scalars['ID']
	/** The settings */
	settings: Array<Maybe<ICoreGQLSaveSettingsTypeInput>>
	/** The organization id for the settings */
	organizationId?: Maybe<Scalars['ID']>
	/** The location id for the settings */
	locationId?: Maybe<Scalars['ID']>
}

/** Status will be  */
export type ICoreGQLSaveSettingsResponse = {
	__typename?: 'saveSettingsResponse'
	/** Whether the settings were saved */
	isSaved?: Maybe<Scalars['Boolean']>
	/** Errors and the reason the setting could not be saved */
	errors?: Maybe<Scalars['JSON']>
}

/** A single setting */
export type ICoreGQLSaveSettingsTypeInput = {
	/** The setting name */
	name: Scalars['String']
	/** The setting value */
	val?: Maybe<Scalars['JSON']>
}

/** The scope warnings for a query */
export type ICoreGQLScopeWarning = {
	__typename?: 'ScopeWarning'
	/** The field not allowed in this query using the requested scope */
	field?: Maybe<Scalars['String']>
}

/** A score card! */
export type ICoreGQLScoreCard = {
	__typename?: 'ScoreCard'
	scores?: Maybe<Array<ICoreGQLScoreCardPanel>>
}

/** Panels make up the score card */
export type ICoreGQLScoreCardPanel = {
	__typename?: 'ScoreCardPanel'
	/** Unique id for React loops */
	id: Scalars['ID']
	/** The label for this score, e.g. Today's Sales */
	label?: Maybe<Scalars['String']>
	/** The score, e.g. $234.30 */
	value?: Maybe<Scalars['String']>
}

/** Returns the list of models found from the platform" */
export type ICoreGQLSearchResponse = {
	__typename?: 'SearchResponse'
	/** The list of Users found from search */
	Users?: Maybe<ICoreGQLUserSearchConnection>
}

/** Returns the list of models found from the platform" */
export type ICoreGQLSearchResponseUsersArgs = {
	limit?: Maybe<Scalars['Int']>
	order?: Maybe<Scalars['String']>
	offset?: Maybe<Scalars['Int']>
	after?: Maybe<Scalars['String']>
	first?: Maybe<Scalars['Int']>
	before?: Maybe<Scalars['String']>
	last?: Maybe<Scalars['Int']>
	orderBy?: Maybe<Array<Maybe<ICoreGQLUserTaskOrderBy>>>
}

/** Some settings */
export type ICoreGQLSetting = {
	__typename?: 'Setting'
	/** The title of the settings section */
	title: Scalars['String']
	/**
	 * The page where this setting is displayed. Valid options are:
	 * "skill_settings_user", "skill_settings_org", or "skill_settings_location"
	 **/
	page: Scalars['String']
	/** The sections to display within settings (rendered in cards) */
	sections: Array<Maybe<ICoreGQLSettingSection>>
}

/** A field within a settings */
export type ICoreGQLSettingField = {
	__typename?: 'SettingField'
	/** The name of the field. This must be a valid JSON key. */
	name: Scalars['String']
	/** The field type */
	type: Scalars['String']
	/** The ACLs required to adjust this setting field */
	acls?: Maybe<Scalars['JSON']>
	/** The props to be passed to the form builder component */
	props?: Maybe<Scalars['JSON']>
	/** The current value of this setting */
	currentValue?: Maybe<Scalars['JSON']>
}

/** A section within settings */
export type ICoreGQLSettingSection = {
	__typename?: 'SettingSection'
	/** The title of the section */
	title: Scalars['String']
	/** The fields within the section */
	fields: Array<Maybe<ICoreGQLSettingField>>
}

/** A skill */
export type ICoreGQLSkill = {
	__typename?: 'Skill'
	id?: Maybe<Scalars['String']>
	/** The skill name */
	name?: Maybe<Scalars['String']>
	/** The skill type. Will be one of: "regular", "global", "enterprise" */
	type?: Maybe<Scalars['String']>
	/** The skill slug that will also be used as the stripe plan id */
	slug?: Maybe<Scalars['String']>
	/** The v2 skill slug. When v1 slug is set, hyphens become underscores for v2. */
	v2Slug?: Maybe<Scalars['String']>
	/** The skill description */
	description?: Maybe<Scalars['String']>
	/** The webhook to post data to from sprucebot */
	webhookUrl?: Maybe<Scalars['String']>
	/** The web view */
	iframeUrl?: Maybe<Scalars['String']>
	apiKey?: Maybe<Scalars['String']>
	/** The marketing url */
	marketingUrl?: Maybe<Scalars['String']>
	/** The skill icon */
	icon?: Maybe<Scalars['String']>
	/** Describes both the events that the skill subscribes to and the events that is publishes */
	eventContract?: Maybe<Scalars['SequelizeJSON']>
	/** Describes both the events that the skill subscribes to and the events that is publishes */
	uiEnhancementContract?: Maybe<Scalars['SequelizeJSON']>
	/** Describes the ACLs that this skill provides. */
	acl?: Maybe<Scalars['SequelizeJSON']>
	/** The email for the skill developer. This may be used to send reporting information. */
	developerEmail?: Maybe<Scalars['String']>
	/** The skill version. */
	version?: Maybe<Scalars['String']>
	/** The @sprucelabs/spruce-skill version. */
	skillsKitVersion?: Maybe<Scalars['String']>
	/** The skill view version to use. */
	viewVersion?: Maybe<Scalars['Int']>
	/** Optionally include warnings for values not authorized in this scope */
	warnings?: Maybe<ICoreGQLWarning>
	Locations?: Maybe<ICoreGQLSkillBelongsToManyLocationsConnection>
	Organizations?: Maybe<ICoreGQLSkillBelongsToManyOrganizationsConnection>
	LocationSkills?: Maybe<ICoreGQLSkillHasManyLocationSkillsConnection>
	OrganizationSkills?: Maybe<ICoreGQLSkillHasManyOrganizationSkillsConnection>
	Plans?: Maybe<ICoreGQLSkillBelongsToManyPlansConnection>
	Messages?: Maybe<ICoreGQLSkillHasManyMessagesConnection>
	SkillData?: Maybe<ICoreGQLSkillHasManySkillDataConnection>
	Metadata?: Maybe<ICoreGQLSkillHasManyMetadataConnection>
	Partners?: Maybe<ICoreGQLSkillBelongsToManyPartnersConnection>
	DashboardCards?: Maybe<ICoreGQLSkillHasManyDashboardCardsConnection>
}

/** A skill */
export type ICoreGQLSkillLocationsArgs = {
	limit?: Maybe<Scalars['Int']>
	order?: Maybe<Scalars['String']>
	where?: Maybe<Scalars['SequelizeJSON']>
	offset?: Maybe<Scalars['Int']>
	after?: Maybe<Scalars['String']>
	first?: Maybe<Scalars['Int']>
	before?: Maybe<Scalars['String']>
	last?: Maybe<Scalars['Int']>
}

/** A skill */
export type ICoreGQLSkillOrganizationsArgs = {
	limit?: Maybe<Scalars['Int']>
	order?: Maybe<Scalars['String']>
	where?: Maybe<Scalars['SequelizeJSON']>
	offset?: Maybe<Scalars['Int']>
	after?: Maybe<Scalars['String']>
	first?: Maybe<Scalars['Int']>
	before?: Maybe<Scalars['String']>
	last?: Maybe<Scalars['Int']>
}

/** A skill */
export type ICoreGQLSkillLocationSkillsArgs = {
	limit?: Maybe<Scalars['Int']>
	order?: Maybe<Scalars['String']>
	where?: Maybe<Scalars['SequelizeJSON']>
	offset?: Maybe<Scalars['Int']>
	after?: Maybe<Scalars['String']>
	first?: Maybe<Scalars['Int']>
	before?: Maybe<Scalars['String']>
	last?: Maybe<Scalars['Int']>
}

/** A skill */
export type ICoreGQLSkillOrganizationSkillsArgs = {
	limit?: Maybe<Scalars['Int']>
	order?: Maybe<Scalars['String']>
	where?: Maybe<Scalars['SequelizeJSON']>
	offset?: Maybe<Scalars['Int']>
	after?: Maybe<Scalars['String']>
	first?: Maybe<Scalars['Int']>
	before?: Maybe<Scalars['String']>
	last?: Maybe<Scalars['Int']>
}

/** A skill */
export type ICoreGQLSkillPlansArgs = {
	limit?: Maybe<Scalars['Int']>
	order?: Maybe<Scalars['String']>
	where?: Maybe<Scalars['SequelizeJSON']>
	offset?: Maybe<Scalars['Int']>
	after?: Maybe<Scalars['String']>
	first?: Maybe<Scalars['Int']>
	before?: Maybe<Scalars['String']>
	last?: Maybe<Scalars['Int']>
}

/** A skill */
export type ICoreGQLSkillMessagesArgs = {
	limit?: Maybe<Scalars['Int']>
	order?: Maybe<Scalars['String']>
	where?: Maybe<Scalars['SequelizeJSON']>
	offset?: Maybe<Scalars['Int']>
	after?: Maybe<Scalars['String']>
	first?: Maybe<Scalars['Int']>
	before?: Maybe<Scalars['String']>
	last?: Maybe<Scalars['Int']>
}

/** A skill */
export type ICoreGQLSkillSkillDataArgs = {
	limit?: Maybe<Scalars['Int']>
	order?: Maybe<Scalars['String']>
	where?: Maybe<Scalars['SequelizeJSON']>
	offset?: Maybe<Scalars['Int']>
	after?: Maybe<Scalars['String']>
	first?: Maybe<Scalars['Int']>
	before?: Maybe<Scalars['String']>
	last?: Maybe<Scalars['Int']>
}

/** A skill */
export type ICoreGQLSkillMetadataArgs = {
	limit?: Maybe<Scalars['Int']>
	order?: Maybe<Scalars['String']>
	where?: Maybe<Scalars['SequelizeJSON']>
	offset?: Maybe<Scalars['Int']>
	after?: Maybe<Scalars['String']>
	first?: Maybe<Scalars['Int']>
	before?: Maybe<Scalars['String']>
	last?: Maybe<Scalars['Int']>
}

/** A skill */
export type ICoreGQLSkillPartnersArgs = {
	limit?: Maybe<Scalars['Int']>
	order?: Maybe<Scalars['String']>
	where?: Maybe<Scalars['SequelizeJSON']>
	offset?: Maybe<Scalars['Int']>
	after?: Maybe<Scalars['String']>
	first?: Maybe<Scalars['Int']>
	before?: Maybe<Scalars['String']>
	last?: Maybe<Scalars['Int']>
}

/** A skill */
export type ICoreGQLSkillDashboardCardsArgs = {
	limit?: Maybe<Scalars['Int']>
	order?: Maybe<Scalars['String']>
	where?: Maybe<Scalars['SequelizeJSON']>
	offset?: Maybe<Scalars['Int']>
	after?: Maybe<Scalars['String']>
	first?: Maybe<Scalars['Int']>
	before?: Maybe<Scalars['String']>
	last?: Maybe<Scalars['Int']>
}

/** A connection to a list of items. */
export type ICoreGQLSkillBelongsToManyLocationsConnection = {
	__typename?: 'SkillBelongsToManyLocationsConnection'
	/** Information to aid in pagination. */
	pageInfo: ICoreGQLPageInfo
	/** A list of edges. */
	edges?: Maybe<Array<Maybe<ICoreGQLSkillBelongsToManyLocationsEdge>>>
	totalCount?: Maybe<Scalars['Int']>
}

/** An edge in a connection. */
export type ICoreGQLSkillBelongsToManyLocationsEdge = {
	__typename?: 'SkillBelongsToManyLocationsEdge'
	/** The item at the end of the edge */
	node?: Maybe<ICoreGQLLocation>
	/** A cursor for use in pagination */
	cursor: Scalars['String']
}

/** A connection to a list of items. */
export type ICoreGQLSkillBelongsToManyOrganizationsConnection = {
	__typename?: 'SkillBelongsToManyOrganizationsConnection'
	/** Information to aid in pagination. */
	pageInfo: ICoreGQLPageInfo
	/** A list of edges. */
	edges?: Maybe<Array<Maybe<ICoreGQLSkillBelongsToManyOrganizationsEdge>>>
	totalCount?: Maybe<Scalars['Int']>
}

/** An edge in a connection. */
export type ICoreGQLSkillBelongsToManyOrganizationsEdge = {
	__typename?: 'SkillBelongsToManyOrganizationsEdge'
	/** The item at the end of the edge */
	node?: Maybe<ICoreGQLOrganization>
	/** A cursor for use in pagination */
	cursor: Scalars['String']
}

/** A connection to a list of items. */
export type ICoreGQLSkillBelongsToManyPartnersConnection = {
	__typename?: 'SkillBelongsToManyPartnersConnection'
	/** Information to aid in pagination. */
	pageInfo: ICoreGQLPageInfo
	/** A list of edges. */
	edges?: Maybe<Array<Maybe<ICoreGQLSkillBelongsToManyPartnersEdge>>>
	totalCount?: Maybe<Scalars['Int']>
}

/** An edge in a connection. */
export type ICoreGQLSkillBelongsToManyPartnersEdge = {
	__typename?: 'SkillBelongsToManyPartnersEdge'
	/** The item at the end of the edge */
	node?: Maybe<ICoreGQLPartner>
	/** A cursor for use in pagination */
	cursor: Scalars['String']
}

/** A connection to a list of items. */
export type ICoreGQLSkillBelongsToManyPlansConnection = {
	__typename?: 'SkillBelongsToManyPlansConnection'
	/** Information to aid in pagination. */
	pageInfo: ICoreGQLPageInfo
	/** A list of edges. */
	edges?: Maybe<Array<Maybe<ICoreGQLSkillBelongsToManyPlansEdge>>>
	totalCount?: Maybe<Scalars['Int']>
}

/** An edge in a connection. */
export type ICoreGQLSkillBelongsToManyPlansEdge = {
	__typename?: 'SkillBelongsToManyPlansEdge'
	/** The item at the end of the edge */
	node?: Maybe<ICoreGQLPlan>
	/** A cursor for use in pagination */
	cursor: Scalars['String']
}

/** Skill data */
export type ICoreGQLSkillData = {
	__typename?: 'SkillData'
	id?: Maybe<Scalars['String']>
	/** The data key */
	key?: Maybe<Scalars['String']>
	/** The data value */
	value?: Maybe<Scalars['SequelizeJSON']>
	createdAt?: Maybe<Scalars['Date']>
	updatedAt?: Maybe<Scalars['Date']>
	SkillId?: Maybe<Scalars['String']>
	LocationId?: Maybe<Scalars['String']>
	UserId?: Maybe<Scalars['String']>
	OrganizationId?: Maybe<Scalars['String']>
	/** Optionally include warnings for values not authorized in this scope */
	warnings?: Maybe<ICoreGQLWarning>
	Location?: Maybe<ICoreGQLLocation>
	User?: Maybe<ICoreGQLUser>
	Skill?: Maybe<ICoreGQLSkill>
	Organization?: Maybe<ICoreGQLOrganization>
}

/** Skill data */
export type ICoreGQLSkillDataLocationArgs = {
	where?: Maybe<Scalars['SequelizeJSON']>
}

/** Skill data */
export type ICoreGQLSkillDataUserArgs = {
	where?: Maybe<Scalars['SequelizeJSON']>
}

/** Skill data */
export type ICoreGQLSkillDataSkillArgs = {
	where?: Maybe<Scalars['SequelizeJSON']>
}

/** Skill data */
export type ICoreGQLSkillDataOrganizationArgs = {
	where?: Maybe<Scalars['SequelizeJSON']>
}

/** A connection to a list of items. */
export type ICoreGQLSkillHasManyDashboardCardsConnection = {
	__typename?: 'SkillHasManyDashboardCardsConnection'
	/** Information to aid in pagination. */
	pageInfo: ICoreGQLPageInfo
	/** A list of edges. */
	edges?: Maybe<Array<Maybe<ICoreGQLSkillHasManyDashboardCardsEdge>>>
	totalCount?: Maybe<Scalars['Int']>
}

/** An edge in a connection. */
export type ICoreGQLSkillHasManyDashboardCardsEdge = {
	__typename?: 'SkillHasManyDashboardCardsEdge'
	/** The item at the end of the edge */
	node?: Maybe<ICoreGQLDashboardCard>
	/** A cursor for use in pagination */
	cursor: Scalars['String']
}

/** A connection to a list of items. */
export type ICoreGQLSkillHasManyLocationSkillsConnection = {
	__typename?: 'SkillHasManyLocationSkillsConnection'
	/** Information to aid in pagination. */
	pageInfo: ICoreGQLPageInfo
	/** A list of edges. */
	edges?: Maybe<Array<Maybe<ICoreGQLSkillHasManyLocationSkillsEdge>>>
	totalCount?: Maybe<Scalars['Int']>
}

/** An edge in a connection. */
export type ICoreGQLSkillHasManyLocationSkillsEdge = {
	__typename?: 'SkillHasManyLocationSkillsEdge'
	/** The item at the end of the edge */
	node?: Maybe<ICoreGQLLocationSkill>
	/** A cursor for use in pagination */
	cursor: Scalars['String']
}

/** A connection to a list of items. */
export type ICoreGQLSkillHasManyMessagesConnection = {
	__typename?: 'SkillHasManyMessagesConnection'
	/** Information to aid in pagination. */
	pageInfo: ICoreGQLPageInfo
	/** A list of edges. */
	edges?: Maybe<Array<Maybe<ICoreGQLSkillHasManyMessagesEdge>>>
	totalCount?: Maybe<Scalars['Int']>
}

/** An edge in a connection. */
export type ICoreGQLSkillHasManyMessagesEdge = {
	__typename?: 'SkillHasManyMessagesEdge'
	/** The item at the end of the edge */
	node?: Maybe<ICoreGQLMessage>
	/** A cursor for use in pagination */
	cursor: Scalars['String']
}

/** A connection to a list of items. */
export type ICoreGQLSkillHasManyMetadataConnection = {
	__typename?: 'SkillHasManyMetadataConnection'
	/** Information to aid in pagination. */
	pageInfo: ICoreGQLPageInfo
	/** A list of edges. */
	edges?: Maybe<Array<Maybe<ICoreGQLSkillHasManyMetadataEdge>>>
	totalCount?: Maybe<Scalars['Int']>
}

/** An edge in a connection. */
export type ICoreGQLSkillHasManyMetadataEdge = {
	__typename?: 'SkillHasManyMetadataEdge'
	/** The item at the end of the edge */
	node?: Maybe<ICoreGQLMetadata>
	/** A cursor for use in pagination */
	cursor: Scalars['String']
}

/** A connection to a list of items. */
export type ICoreGQLSkillHasManyOrganizationSkillsConnection = {
	__typename?: 'SkillHasManyOrganizationSkillsConnection'
	/** Information to aid in pagination. */
	pageInfo: ICoreGQLPageInfo
	/** A list of edges. */
	edges?: Maybe<Array<Maybe<ICoreGQLSkillHasManyOrganizationSkillsEdge>>>
	totalCount?: Maybe<Scalars['Int']>
}

/** An edge in a connection. */
export type ICoreGQLSkillHasManyOrganizationSkillsEdge = {
	__typename?: 'SkillHasManyOrganizationSkillsEdge'
	/** The item at the end of the edge */
	node?: Maybe<ICoreGQLOrganizationSkill>
	/** A cursor for use in pagination */
	cursor: Scalars['String']
}

/** A connection to a list of items. */
export type ICoreGQLSkillHasManySkillDataConnection = {
	__typename?: 'SkillHasManySkillDataConnection'
	/** Information to aid in pagination. */
	pageInfo: ICoreGQLPageInfo
	/** A list of edges. */
	edges?: Maybe<Array<Maybe<ICoreGQLSkillHasManySkillDataEdge>>>
	totalCount?: Maybe<Scalars['Int']>
}

/** An edge in a connection. */
export type ICoreGQLSkillHasManySkillDataEdge = {
	__typename?: 'SkillHasManySkillDataEdge'
	/** The item at the end of the edge */
	node?: Maybe<ICoreGQLSkillData>
	/** A cursor for use in pagination */
	cursor: Scalars['String']
}

/** The full input for seeding skills */
export type ICoreGQLSkillSeedCreateArgs = {
	/** The organizationId of the skills you want to seed */
	organizationId: Scalars['ID']
	/** The locationId of the skills you want to seed */
	locationId?: Maybe<Scalars['ID']>
	/** The seed configs for each skill */
	skillSeeds?: Maybe<Array<ICoreGQLSkillSeedCreateInput>>
}

/** The configuration for seeding a skill via organization */
export type ICoreGQLSkillSeedCreateConfigInput = {
	/** The name of the data being seeded. */
	name?: Maybe<Scalars['String']>
	/** The description of the data being seeded. */
	description?: Maybe<Scalars['String']>
	/** The id of the data being seeded. */
	id?: Maybe<Scalars['String']>
	/** The options for the data being seeded. */
	options?: Maybe<Scalars['JSON']>
}

/** The input for seeding a skill by slug */
export type ICoreGQLSkillSeedCreateInput = {
	/** The slug for the skill to be seeded */
	slug: Scalars['String']
	configs?: Maybe<Array<Maybe<ICoreGQLSkillSeedCreateConfigInput>>>
}

/** The full input for seeding skills */
export type ICoreGQLSkillSeedDeleteArgs = {
	/** The organizationId of the skills you want to seed */
	organizationId: Scalars['ID']
	/** The locationId of the skills you want to seed */
	locationId?: Maybe<Scalars['ID']>
	/** The seed configs for each skill */
	skillSeeds?: Maybe<Array<ICoreGQLSkillSeedDeleteInput>>
}

/** The configuration for seeing a NEW organization */
export type ICoreGQLSkillSeedDeleteConfigInput = {
	/** The name of the data being seeded. */
	name?: Maybe<Scalars['String']>
	/** The name of the data being seeded. */
	description?: Maybe<Scalars['String']>
	/** The id of the data being seeded. */
	id?: Maybe<Scalars['String']>
	/** The data being seeded. */
	options?: Maybe<Scalars['JSON']>
}

/** The input for seeding a skill by slug */
export type ICoreGQLSkillSeedDeleteInput = {
	/** The slug for the skill to be seeded */
	slug: Scalars['String']
	configs?: Maybe<Array<Maybe<ICoreGQLSkillSeedDeleteConfigInput>>>
}

/** A Skill View */
export type ICoreGQLSkillView = {
	__typename?: 'SkillView'
	/** Unique ID to identify this view (for deep linking). */
	id: Scalars['String']
	/** The title of the view */
	title: Scalars['String']
	/** The host to load for this skill view */
	host: Scalars['String']
	/** The path for this skill view */
	path: Scalars['String']
	/** The skill view version to use */
	viewVersion: Scalars['Int']
	/** The JWT token used to load the skill view */
	jwt: Scalars['String']
	/** The skill from the response */
	Skill: ICoreGQLSkill
}

/** A button with a dropdown of actions on the right */
export type ICoreGQLSplitButton = {
	__typename?: 'SplitButton'
	/** ID for view caching */
	id: Scalars['ID']
	/** The main action readily surfaced to the user */
	defaultAction: ICoreGQLButton
	/** All the secondary nested actions */
	actions?: Maybe<Array<ICoreGQLButton>>
	/** Sets the visual hierarchy of the button */
	kind?: Maybe<ICoreGQLButtonKinds>
	/** Set true to fill the parent’s width */
	isFullWidth?: Maybe<Scalars['Boolean']>
	/** Sets the visual hierarchy of the button */
	isSmall?: Maybe<Scalars['Boolean']>
	/** Optional; use a portal to render the menu. By default, it renders below the button */
	usePortal?: Maybe<Scalars['Boolean']>
}

export type ICoreGQLSubscription = {
	__typename?: 'Subscription'
	/** Get audit logs for an organization. Max/default limit is 200. */
	AuditStream?: Maybe<ICoreGQLAuditStreamResponse>
	/** An example subscription used by @sprucelabs/spruce-skill developers */
	ExampleStream?: Maybe<ICoreGQLExampleStreamItem>
	/** Stream feed items for a page. */
	FeedItemStream?: Maybe<ICoreGQLFeedItemStreamResponse>
	CalendarEventStream?: Maybe<ICoreGQLCalendarEventStreamResponse>
}

export type ICoreGQLSubscriptionAuditStreamArgs = {
	organizationId?: Maybe<Scalars['ID']>
}

export type ICoreGQLSubscriptionFeedItemStreamArgs = {
	page: Scalars['String']
	userId?: Maybe<Scalars['ID']>
	organizationId?: Maybe<Scalars['ID']>
	locationId?: Maybe<Scalars['ID']>
}

export type ICoreGQLSubscriptionCalendarEventStreamArgs = {
	calendarIds: Array<Scalars['String']>
	organizationId: Scalars['ID']
	locationId?: Maybe<Scalars['ID']>
	userIds: Array<Scalars['ID']>
	startAt: Scalars['DateTime']
	endAt: Scalars['DateTime']
}

/** Input for enabling a skill at an organization */
export type ICoreGQLSyncSkillInput = {
	/** The skill name */
	name?: Maybe<Scalars['String']>
	/** The skill description */
	description?: Maybe<Scalars['String']>
	/** The skill iframeUrl */
	iframeUrl?: Maybe<Scalars['String']>
	/** The skill webhookUrl */
	webhookUrl?: Maybe<Scalars['String']>
	/** The skill marketingUrl */
	marketingUrl?: Maybe<Scalars['String']>
	/** The skill icon */
	icon?: Maybe<Scalars['String']>
	/** The skill eventContract. This is an object that has been JSON.stringify-d */
	eventContract?: Maybe<Scalars['String']>
	/** The skill uiEnhancementContract. This is an object that has been JSON.stringify-d */
	uiEnhancementContract?: Maybe<Scalars['String']>
	/** The skill viewVersion */
	viewVersion?: Maybe<Scalars['Int']>
	/** The skill acl. This is an object that has been JSON.stringify-d */
	acl?: Maybe<Scalars['String']>
	/** The skill developerEmail */
	developerEmail?: Maybe<Scalars['String']>
	/** The skill version */
	version?: Maybe<Scalars['String']>
	/** The skill skillsKitVersion */
	skillsKitVersion?: Maybe<Scalars['String']>
	/** If true, will provision a database for the skill which will be available in the response as "databaseUrl" */
	useDB?: Maybe<Scalars['Boolean']>
}

/** Returns details about the skill and settings the skill may need */
export type ICoreGQLSyncSkillResponse = {
	__typename?: 'syncSkillResponse'
	/** The skill that is syncing */
	Skill: ICoreGQLSkill
	/** The db connection string for the skill (available if useDB=true) */
	databaseUrl?: Maybe<Scalars['String']>
	/** The s3 bucket name which is used to build urls for paths to assets stored on S3 like user profile images */
	s3Bucket: Scalars['String']
}

/** A teammate schedule */
export type ICoreGQLTeammateSchedule = {
	__typename?: 'TeammateSchedule'
	/** The daily schedules */
	schedules?: Maybe<Array<Maybe<ICoreGQLTeammateScheduleScheduleType>>>
	/** The user corresponding to this schedule */
	User: ICoreGQLUser
}

/** A schedule for a single date */
export type ICoreGQLTeammateScheduleScheduleType = {
	__typename?: 'TeammateScheduleScheduleType'
	/** The date YYYY-MM-DD */
	scheduleDate: Scalars['String']
	/** Combined shifts, breaks, and blocks */
	segments?: Maybe<Array<Maybe<ICoreGQLTeammateScheduleSegmentType>>>
}

/** A single segment */
export type ICoreGQLTeammateScheduleSegmentType = {
	__typename?: 'TeammateScheduleSegmentType'
	/** The start time of the shift segment. Local to the location timezone. */
	startTime: Scalars['String']
	/** The end time of the shift segment. Local to the location timezone. */
	endTime: Scalars['String']
	/** The type of segment. "shift", "break", or "block" */
	type: Scalars['String']
	/** The subtype of the segment */
	subtype?: Maybe<Scalars['String']>
}

/** Used for testing only */
export type ICoreGQLTestType = {
	__typename?: 'TestType'
	/** a simple id combining the passed id and i suffix like '-1' */
	id: Scalars['ID']
	/** is The First or The Second */
	name: Scalars['String']
	/** This field is overridden by a resolver and should be 'hello world' */
	address: Scalars['String']
}

/** Basic text to be rendered */
export type ICoreGQLText = {
	__typename?: 'Text'
	/** Unique id for UI caching */
	id: Scalars['String']
	/** the text to render */
	text?: Maybe<Scalars['String']>
	/** Context used to populate text if it's a template {{handlebar_style}} */
	context?: Maybe<Scalars['JSON']>
}

/** Call out information so it's impossible to miss! */
export type ICoreGQLToast = {
	__typename?: 'Toast'
	/** Unique id for UI caching */
	id: Scalars['ID']
	/** Headline text */
	headline: Scalars['String']
	/** Optional; Text after the headline */
	text?: Maybe<Scalars['String']>
	/** Optional; controls whether the toast can be removed. Defaults to true */
	canRemove?: Maybe<Scalars['Boolean']>
	/** Sets the variation of toast */
	kind?: Maybe<Scalars['String']>
	/** Text for the followup action */
	followupText?: Maybe<Scalars['String']>
	/** Action to be invoked when hitting the followup CTA */
	followupAction?: Maybe<ICoreGQLAction>
}

export type ICoreGQLToggle = ICoreGQLActionExecutor & {
	__typename?: 'Toggle'
	/** Unique id for UI caching */
	id: Scalars['ID']
	/** Text after the toggle */
	postText?: Maybe<Scalars['String']>
	/** Optional action to invoke when tapped */
	action?: Maybe<ICoreGQLAction>
}

/** An unconfirmed user */
export type ICoreGQLUnconfirmedUser = {
	__typename?: 'UnconfirmedUser'
	id?: Maybe<Scalars['String']>
	/** The user's phone number */
	phoneNumber?: Maybe<Scalars['String']>
	/** The first name */
	firstName?: Maybe<Scalars['String']>
	/** The last name */
	lastName?: Maybe<Scalars['String']>
	/** First name and last initial */
	name?: Maybe<Scalars['String']>
	/** Status of invitation. Will be one of "pending" or "accepted" */
	invite?: Maybe<Scalars['String']>
	/** This tells us what type of user this is at this location */
	role?: Maybe<Scalars['String']>
	/** Default profile image to use when displaying this unconfirmed user */
	defaultProfileImages?: Maybe<Scalars['SequelizeJSON']>
	/** An array of roles to assign the user when the invite is accepted */
	inviteRoles?: Maybe<Scalars['SequelizeJSON']>
	LocationId?: Maybe<Scalars['String']>
	/** Optionally include warnings for values not authorized in this scope */
	warnings?: Maybe<ICoreGQLWarning>
	UserDevice?: Maybe<ICoreGQLUserDevice>
	Location?: Maybe<ICoreGQLLocation>
	Organization?: Maybe<ICoreGQLOrganization>
	MagicLinks?: Maybe<ICoreGQLUnconfirmedUserHasManyMagicLinksConnection>
}

/** An unconfirmed user */
export type ICoreGQLUnconfirmedUserUserDeviceArgs = {
	where?: Maybe<Scalars['SequelizeJSON']>
}

/** An unconfirmed user */
export type ICoreGQLUnconfirmedUserLocationArgs = {
	where?: Maybe<Scalars['SequelizeJSON']>
}

/** An unconfirmed user */
export type ICoreGQLUnconfirmedUserOrganizationArgs = {
	where?: Maybe<Scalars['SequelizeJSON']>
}

/** An unconfirmed user */
export type ICoreGQLUnconfirmedUserMagicLinksArgs = {
	limit?: Maybe<Scalars['Int']>
	order?: Maybe<Scalars['String']>
	where?: Maybe<Scalars['SequelizeJSON']>
	offset?: Maybe<Scalars['Int']>
	after?: Maybe<Scalars['String']>
	first?: Maybe<Scalars['Int']>
	before?: Maybe<Scalars['String']>
	last?: Maybe<Scalars['Int']>
}

/** A connection to a list of items. */
export type ICoreGQLUnconfirmedUserConnection = {
	__typename?: 'UnconfirmedUserConnection'
	/** Information to aid in pagination. */
	pageInfo: ICoreGQLPageInfo
	/** A list of edges. */
	edges?: Maybe<Array<Maybe<ICoreGQLUnconfirmedUserEdge>>>
	totalCount?: Maybe<Scalars['Int']>
}

/** An edge in a connection. */
export type ICoreGQLUnconfirmedUserEdge = {
	__typename?: 'UnconfirmedUserEdge'
	/** The item at the end of the edge */
	node?: Maybe<ICoreGQLUnconfirmedUser>
	/** A cursor for use in pagination */
	cursor: Scalars['String']
}

/** A connection to a list of items. */
export type ICoreGQLUnconfirmedUserHasManyMagicLinksConnection = {
	__typename?: 'UnconfirmedUserHasManyMagicLinksConnection'
	/** Information to aid in pagination. */
	pageInfo: ICoreGQLPageInfo
	/** A list of edges. */
	edges?: Maybe<Array<Maybe<ICoreGQLUnconfirmedUserHasManyMagicLinksEdge>>>
	totalCount?: Maybe<Scalars['Int']>
}

/** An edge in a connection. */
export type ICoreGQLUnconfirmedUserHasManyMagicLinksEdge = {
	__typename?: 'UnconfirmedUserHasManyMagicLinksEdge'
	/** The item at the end of the edge */
	node?: Maybe<ICoreGQLMagicLink>
	/** A cursor for use in pagination */
	cursor: Scalars['String']
}

/** Input for uninstalling a skill at an organization */
export type ICoreGQLUninstallSkillsInput = {
	/** The id of the organization under which to create the new Job */
	organizationId: Scalars['ID']
	/** Array of skill ids to install */
	skillIds: Array<Maybe<Scalars['ID']>>
}

/** Returns the status */
export type ICoreGQLUninstallSkillsResponse = {
	__typename?: 'uninstallSkillsResponse'
	/** Will be "success" */
	status?: Maybe<Scalars['String']>
}

/** The input for updating a user */
export type ICoreGQLUpdateAcceptedMobileTerms = {
	/** id of the user to update */
	userId: Scalars['ID']
	/** The updated date when user last accepted Mobile T&Cs and Privacy Policy */
	acceptedMobileTermsAt: Scalars['DateTime']
}

/** Returns the "User" that was updated */
export type ICoreGQLUpdateAcceptedMobileTermsResponse = {
	__typename?: 'updateAcceptedMobileTermsResponse'
	/** The User that was updated */
	User?: Maybe<ICoreGQLUser>
}

/** Input fields to update a Group for an Organization */
export type ICoreGQLUpdateGroupInput = {
	/** The id of the group */
	id: Scalars['ID']
	/** Optionally update the group's name */
	name?: Maybe<Scalars['String']>
	/** Optionally add locations to the group */
	addLocationIds?: Maybe<Array<Maybe<Scalars['ID']>>>
	/** Optionally remove locations from the group */
	removeLocationIds?: Maybe<Array<Maybe<Scalars['ID']>>>
}

/** Returns "Group" */
export type ICoreGQLUpdateGroupResponse = {
	__typename?: 'updateGroupResponse'
	/** The Group */
	Group?: Maybe<ICoreGQLGroup>
}

/** The input for updating a user */
export type ICoreGQLUpdateGuestInput = {
	/** id of the user to update */
	id: Scalars['ID']
	/** id of the organization the guest (and currently logged in user) belong to */
	organizationId: Scalars['ID']
	/** The new first name */
	firstName?: Maybe<Scalars['String']>
	/** The new last name */
	lastName?: Maybe<Scalars['String']>
	/** The phone number to update for the Guest */
	phoneNumber?: Maybe<Scalars['String']>
}

/** Returns the "User" that was updated */
export type ICoreGQLUpdateGuestResponse = {
	__typename?: 'updateGuestResponse'
	/** The User that was updated */
	User?: Maybe<ICoreGQLUser>
}

/** Input for creating a new Job */
export type ICoreGQLUpdateJobInput = {
	/** The id of the Job to update */
	id: Scalars['ID']
	/** The job's name */
	name?: Maybe<Scalars['String']>
	/** A key/value pair of ACLs for this Job. This is additive (PATCH) to the existing job acls. */
	acl?: Maybe<Scalars['JSON']>
	/**
	 * A key/value pair of ACLs that apply when the user is online only. This is
	 * additive (PATCH) to the existing job inStoreAcls. To unset an inStoreAcl set it to false.
	 **/
	inStoreAcl?: Maybe<Scalars['JSON']>
	/**
	 * The base role for this job. May be: "groupManager", "manager", or "teammate".
	 * If "acl" is omitted, the permissions will be inherited from the default role.
	 **/
	role?: Maybe<Scalars['JSON']>
}

/** Returns the "Job" */
export type ICoreGQLUpdateJobResponse = {
	__typename?: 'updateJobResponse'
	/** The Job */
	Job?: Maybe<ICoreGQLJob>
}

/** Updates a Location */
export type ICoreGQLUpdateLocationInput = {
	/** The id of the Location to update */
	id: Scalars['ID']
	/** The location's name */
	name?: Maybe<Scalars['String']>
	/** The location's slug */
	slug?: Maybe<Scalars['String']>
	/** Address line 1 */
	addressLine1?: Maybe<Scalars['String']>
	/** Address line 2 */
	addressLine2?: Maybe<Scalars['String']>
	/** The name of the city */
	addressCity?: Maybe<Scalars['String']>
	/** The state abbreviation */
	addressState?: Maybe<Scalars['String']>
	/** The zip code */
	addressZip?: Maybe<Scalars['String']>
	/** The country */
	addressCountry?: Maybe<Scalars['String']>
	/** The main phone number for the Location */
	phoneNumber?: Maybe<Scalars['String']>
	/**
	 * The timezone (https://en.wikipedia.org/wiki/List_of_tz_database_time_zones).
	 * If "timezone", "lat", or "lng" are omitted, a geocode lookup will be done to
	 * fill these fields.
	 **/
	timezone?: Maybe<Scalars['String']>
	/** The lat of the Location. If "timezone", "lat", or "lng" are omitted, a geocode lookup will be done to fill these fields. */
	lat?: Maybe<Scalars['String']>
	/** The lng of the Location. If "timezone", "lat", or "lng" are omitted, a geocode lookup will be done to fill these fields. */
	lng?: Maybe<Scalars['String']>
	/** List of skill slugs to immediately enable at the Location */
	installSlugs?: Maybe<Array<Maybe<Scalars['String']>>>
	/** List of skill slugs to immediately disable at the Location */
	removeSlugs?: Maybe<Array<Maybe<Scalars['String']>>>
	/** The Organization's Location number or unique identifier */
	storeNum?: Maybe<Scalars['String']>
	/** Is this location public and viewable by guests? */
	isPublic?: Maybe<Scalars['Boolean']>
}

/** Returns the updated "Location" */
export type ICoreGQLUpdateLocationResponse = {
	__typename?: 'updateLocationResponse'
	/** The updated Location */
	Location?: Maybe<ICoreGQLLocation>
}

/** Organization details to update */
export type ICoreGQLUpdateOrganizationInput = {
	/** The id of the organization to update */
	id: Scalars['ID']
	/** The organization name */
	name?: Maybe<Scalars['String']>
	/** Whether whitelabelling is allowed. Only Spruce "Success" users can update this. */
	allowWhiteLabelling?: Maybe<Scalars['Boolean']>
	/** The stylesheet URL for whitelabelling. Only Spruce "Success" users can update this. */
	whiteLabellingStylesheetUrl?: Maybe<Scalars['String']>
}

/** Returns the updated "Organization" */
export type ICoreGQLUpdateOrganizationResponse = {
	__typename?: 'updateOrganizationResponse'
	/** The updated Organization */
	Organization?: Maybe<ICoreGQLOrganization>
}

/** The input for updating a user */
export type ICoreGQLUpdateUserInput = {
	/** id of the user to update */
	id: Scalars['ID']
	/** The new first name */
	firstName?: Maybe<Scalars['String']>
	/** The new last name */
	lastName?: Maybe<Scalars['String']>
}

/** Returns the "User" that was updated */
export type ICoreGQLUpdateUserResponse = {
	__typename?: 'updateUserResponse'
	/** The User that was updated */
	User?: Maybe<ICoreGQLUser>
}

/** A user */
export type ICoreGQLUser = {
	__typename?: 'User'
	id?: Maybe<Scalars['String']>
	/** The users first name. */
	firstName?: Maybe<Scalars['String']>
	/** The users last name. */
	lastName?: Maybe<Scalars['String']>
	/** The users name and first initial. May be null if firstName is not set. */
	name?: Maybe<Scalars['String']>
	/** The user first name or "Friend" if it is not set */
	casualName?: Maybe<Scalars['String']>
	/** The user's phone number */
	phoneNumber?: Maybe<Scalars['String']>
	/** The base profile image uuid.  Used to build the filename for various profile image sizes. */
	profileImageUUID?: Maybe<Scalars['String']>
	/** The user profile images */
	profileImages?: Maybe<Scalars['JSON']>
	/** Default profile images to use if the user does not have a custom image set. */
	defaultProfileImages?: Maybe<Scalars['SequelizeJSON']>
	/** Whether the last message sent to the user was successfully delivered */
	lastMessageDelivered?: Maybe<Scalars['Boolean']>
	/** Date when user last accepted Mobile T&Cs and Privacy Policy */
	acceptedMobileTermsAt?: Maybe<Scalars['Date']>
	createdAt?: Maybe<Scalars['Date']>
	updatedAt?: Maybe<Scalars['Date']>
	/** Optionally include warnings for values not authorized in this scope */
	warnings?: Maybe<ICoreGQLWarning>
	UserIdentities?: Maybe<ICoreGQLUserHasManyUserIdentitiesConnection>
	UserDevices?: Maybe<ICoreGQLUserHasManyUserDevicesConnection>
	UserGroups?: Maybe<ICoreGQLUserHasManyUserGroupsConnection>
	UserOrganizations?: Maybe<ICoreGQLUserHasManyUserOrganizationsConnection>
	Visits?: Maybe<ICoreGQLUserHasManyVisitsConnection>
	Messages?: Maybe<ICoreGQLUserHasManyMessagesConnection>
	UserLocations?: Maybe<ICoreGQLUserHasManyUserLocationsConnection>
	Locations?: Maybe<ICoreGQLUserBelongsToManyLocationsConnection>
	Organizations?: Maybe<ICoreGQLUserBelongsToManyOrganizationsConnection>
	Groups?: Maybe<ICoreGQLUserBelongsToManyGroupsConnection>
	AppTokens?: Maybe<ICoreGQLUserHasManyAppTokensConnection>
	Metadata?: Maybe<ICoreGQLUserHasManyMetadataConnection>
	DashboardCards?: Maybe<ICoreGQLUserHasManyDashboardCardsConnection>
	/** [Skill Only] Get the user acls for this skill */
	acl?: Maybe<Scalars['JSON']>
}

/** A user */
export type ICoreGQLUserUserIdentitiesArgs = {
	limit?: Maybe<Scalars['Int']>
	order?: Maybe<Scalars['String']>
	where?: Maybe<Scalars['SequelizeJSON']>
	offset?: Maybe<Scalars['Int']>
	after?: Maybe<Scalars['String']>
	first?: Maybe<Scalars['Int']>
	before?: Maybe<Scalars['String']>
	last?: Maybe<Scalars['Int']>
}

/** A user */
export type ICoreGQLUserUserDevicesArgs = {
	limit?: Maybe<Scalars['Int']>
	order?: Maybe<Scalars['String']>
	where?: Maybe<Scalars['SequelizeJSON']>
	offset?: Maybe<Scalars['Int']>
	after?: Maybe<Scalars['String']>
	first?: Maybe<Scalars['Int']>
	before?: Maybe<Scalars['String']>
	last?: Maybe<Scalars['Int']>
}

/** A user */
export type ICoreGQLUserUserGroupsArgs = {
	limit?: Maybe<Scalars['Int']>
	order?: Maybe<Scalars['String']>
	where?: Maybe<Scalars['SequelizeJSON']>
	offset?: Maybe<Scalars['Int']>
	after?: Maybe<Scalars['String']>
	first?: Maybe<Scalars['Int']>
	before?: Maybe<Scalars['String']>
	last?: Maybe<Scalars['Int']>
}

/** A user */
export type ICoreGQLUserUserOrganizationsArgs = {
	limit?: Maybe<Scalars['Int']>
	order?: Maybe<Scalars['String']>
	where?: Maybe<Scalars['SequelizeJSON']>
	offset?: Maybe<Scalars['Int']>
	after?: Maybe<Scalars['String']>
	first?: Maybe<Scalars['Int']>
	before?: Maybe<Scalars['String']>
	last?: Maybe<Scalars['Int']>
}

/** A user */
export type ICoreGQLUserVisitsArgs = {
	limit?: Maybe<Scalars['Int']>
	order?: Maybe<Scalars['String']>
	where?: Maybe<Scalars['SequelizeJSON']>
	offset?: Maybe<Scalars['Int']>
	after?: Maybe<Scalars['String']>
	first?: Maybe<Scalars['Int']>
	before?: Maybe<Scalars['String']>
	last?: Maybe<Scalars['Int']>
}

/** A user */
export type ICoreGQLUserMessagesArgs = {
	limit?: Maybe<Scalars['Int']>
	order?: Maybe<Scalars['String']>
	where?: Maybe<Scalars['SequelizeJSON']>
	offset?: Maybe<Scalars['Int']>
	after?: Maybe<Scalars['String']>
	first?: Maybe<Scalars['Int']>
	before?: Maybe<Scalars['String']>
	last?: Maybe<Scalars['Int']>
}

/** A user */
export type ICoreGQLUserUserLocationsArgs = {
	limit?: Maybe<Scalars['Int']>
	order?: Maybe<Scalars['String']>
	where?: Maybe<Scalars['SequelizeJSON']>
	offset?: Maybe<Scalars['Int']>
	after?: Maybe<Scalars['String']>
	first?: Maybe<Scalars['Int']>
	before?: Maybe<Scalars['String']>
	last?: Maybe<Scalars['Int']>
}

/** A user */
export type ICoreGQLUserLocationsArgs = {
	limit?: Maybe<Scalars['Int']>
	order?: Maybe<Scalars['String']>
	where?: Maybe<Scalars['SequelizeJSON']>
	offset?: Maybe<Scalars['Int']>
	after?: Maybe<Scalars['String']>
	first?: Maybe<Scalars['Int']>
	before?: Maybe<Scalars['String']>
	last?: Maybe<Scalars['Int']>
}

/** A user */
export type ICoreGQLUserOrganizationsArgs = {
	limit?: Maybe<Scalars['Int']>
	order?: Maybe<Scalars['String']>
	where?: Maybe<Scalars['SequelizeJSON']>
	offset?: Maybe<Scalars['Int']>
	after?: Maybe<Scalars['String']>
	first?: Maybe<Scalars['Int']>
	before?: Maybe<Scalars['String']>
	last?: Maybe<Scalars['Int']>
}

/** A user */
export type ICoreGQLUserGroupsArgs = {
	limit?: Maybe<Scalars['Int']>
	order?: Maybe<Scalars['String']>
	where?: Maybe<Scalars['SequelizeJSON']>
	offset?: Maybe<Scalars['Int']>
	after?: Maybe<Scalars['String']>
	first?: Maybe<Scalars['Int']>
	before?: Maybe<Scalars['String']>
	last?: Maybe<Scalars['Int']>
}

/** A user */
export type ICoreGQLUserAppTokensArgs = {
	limit?: Maybe<Scalars['Int']>
	order?: Maybe<Scalars['String']>
	where?: Maybe<Scalars['SequelizeJSON']>
	offset?: Maybe<Scalars['Int']>
	after?: Maybe<Scalars['String']>
	first?: Maybe<Scalars['Int']>
	before?: Maybe<Scalars['String']>
	last?: Maybe<Scalars['Int']>
}

/** A user */
export type ICoreGQLUserMetadataArgs = {
	limit?: Maybe<Scalars['Int']>
	order?: Maybe<Scalars['String']>
	where?: Maybe<Scalars['SequelizeJSON']>
	offset?: Maybe<Scalars['Int']>
	after?: Maybe<Scalars['String']>
	first?: Maybe<Scalars['Int']>
	before?: Maybe<Scalars['String']>
	last?: Maybe<Scalars['Int']>
}

/** A user */
export type ICoreGQLUserDashboardCardsArgs = {
	limit?: Maybe<Scalars['Int']>
	order?: Maybe<Scalars['String']>
	where?: Maybe<Scalars['SequelizeJSON']>
	offset?: Maybe<Scalars['Int']>
	after?: Maybe<Scalars['String']>
	first?: Maybe<Scalars['Int']>
	before?: Maybe<Scalars['String']>
	last?: Maybe<Scalars['Int']>
}

/** Key/val response of the permissions the user has access to */
export type ICoreGQLUserAclsResponse = {
	__typename?: 'UserAclsResponse'
	/** Whether the dashboard card was added successfully */
	slugs: Scalars['JSON']
}

/** A connection to a list of items. */
export type ICoreGQLUserBelongsToManyGroupsConnection = {
	__typename?: 'UserBelongsToManyGroupsConnection'
	/** Information to aid in pagination. */
	pageInfo: ICoreGQLPageInfo
	/** A list of edges. */
	edges?: Maybe<Array<Maybe<ICoreGQLUserBelongsToManyGroupsEdge>>>
	totalCount?: Maybe<Scalars['Int']>
}

/** An edge in a connection. */
export type ICoreGQLUserBelongsToManyGroupsEdge = {
	__typename?: 'UserBelongsToManyGroupsEdge'
	/** The item at the end of the edge */
	node?: Maybe<ICoreGQLGroup>
	/** A cursor for use in pagination */
	cursor: Scalars['String']
}

/** A connection to a list of items. */
export type ICoreGQLUserBelongsToManyLocationsConnection = {
	__typename?: 'UserBelongsToManyLocationsConnection'
	/** Information to aid in pagination. */
	pageInfo: ICoreGQLPageInfo
	/** A list of edges. */
	edges?: Maybe<Array<Maybe<ICoreGQLUserBelongsToManyLocationsEdge>>>
	totalCount?: Maybe<Scalars['Int']>
}

/** An edge in a connection. */
export type ICoreGQLUserBelongsToManyLocationsEdge = {
	__typename?: 'UserBelongsToManyLocationsEdge'
	/** The item at the end of the edge */
	node?: Maybe<ICoreGQLLocation>
	/** A cursor for use in pagination */
	cursor: Scalars['String']
}

/** A connection to a list of items. */
export type ICoreGQLUserBelongsToManyOrganizationsConnection = {
	__typename?: 'UserBelongsToManyOrganizationsConnection'
	/** Information to aid in pagination. */
	pageInfo: ICoreGQLPageInfo
	/** A list of edges. */
	edges?: Maybe<Array<Maybe<ICoreGQLUserBelongsToManyOrganizationsEdge>>>
	totalCount?: Maybe<Scalars['Int']>
}

/** An edge in a connection. */
export type ICoreGQLUserBelongsToManyOrganizationsEdge = {
	__typename?: 'UserBelongsToManyOrganizationsEdge'
	/** The item at the end of the edge */
	node?: Maybe<ICoreGQLOrganization>
	/** A cursor for use in pagination */
	cursor: Scalars['String']
}

/** A user device */
export type ICoreGQLUserDevice = {
	__typename?: 'UserDevice'
	id?: Maybe<Scalars['String']>
	/** The user device mac address */
	macAddress?: Maybe<Scalars['String']>
	/** The operating system running on the device ("mac" | "ios" | "android") */
	deviceOS?: Maybe<Scalars['String']>
	/** The push notification token for this device. */
	pushToken?: Maybe<Scalars['String']>
	UserId?: Maybe<Scalars['String']>
	/** Optionally include warnings for values not authorized in this scope */
	warnings?: Maybe<ICoreGQLWarning>
	User?: Maybe<ICoreGQLUser>
}

/** A user device */
export type ICoreGQLUserDeviceUserArgs = {
	where?: Maybe<Scalars['SequelizeJSON']>
}

/** A user group */
export type ICoreGQLUserGroup = {
	__typename?: 'UserGroup'
	id?: Maybe<Scalars['String']>
	GroupId?: Maybe<Scalars['String']>
	UserId?: Maybe<Scalars['String']>
	JobId?: Maybe<Scalars['String']>
	OrganizationId?: Maybe<Scalars['String']>
	/** Optionally include warnings for values not authorized in this scope */
	warnings?: Maybe<ICoreGQLWarning>
	User?: Maybe<ICoreGQLUser>
	Group?: Maybe<ICoreGQLGroup>
	Job?: Maybe<ICoreGQLJob>
	Organization?: Maybe<ICoreGQLOrganization>
	LocationGroups?: Maybe<ICoreGQLUserGroupHasManyLocationGroupsConnection>
}

/** A user group */
export type ICoreGQLUserGroupUserArgs = {
	where?: Maybe<Scalars['SequelizeJSON']>
}

/** A user group */
export type ICoreGQLUserGroupGroupArgs = {
	where?: Maybe<Scalars['SequelizeJSON']>
}

/** A user group */
export type ICoreGQLUserGroupJobArgs = {
	where?: Maybe<Scalars['SequelizeJSON']>
}

/** A user group */
export type ICoreGQLUserGroupOrganizationArgs = {
	where?: Maybe<Scalars['SequelizeJSON']>
}

/** A user group */
export type ICoreGQLUserGroupLocationGroupsArgs = {
	limit?: Maybe<Scalars['Int']>
	order?: Maybe<Scalars['String']>
	where?: Maybe<Scalars['SequelizeJSON']>
	offset?: Maybe<Scalars['Int']>
	after?: Maybe<Scalars['String']>
	first?: Maybe<Scalars['Int']>
	before?: Maybe<Scalars['String']>
	last?: Maybe<Scalars['Int']>
}

/** A connection to a list of items. */
export type ICoreGQLUserGroupHasManyLocationGroupsConnection = {
	__typename?: 'UserGroupHasManyLocationGroupsConnection'
	/** Information to aid in pagination. */
	pageInfo: ICoreGQLPageInfo
	/** A list of edges. */
	edges?: Maybe<Array<Maybe<ICoreGQLUserGroupHasManyLocationGroupsEdge>>>
	totalCount?: Maybe<Scalars['Int']>
}

/** An edge in a connection. */
export type ICoreGQLUserGroupHasManyLocationGroupsEdge = {
	__typename?: 'UserGroupHasManyLocationGroupsEdge'
	/** The item at the end of the edge */
	node?: Maybe<ICoreGQLLocationGroup>
	/** A cursor for use in pagination */
	cursor: Scalars['String']
}

/** A connection to a list of items. */
export type ICoreGQLUserHasManyAppTokensConnection = {
	__typename?: 'UserHasManyAppTokensConnection'
	/** Information to aid in pagination. */
	pageInfo: ICoreGQLPageInfo
	/** A list of edges. */
	edges?: Maybe<Array<Maybe<ICoreGQLUserHasManyAppTokensEdge>>>
	totalCount?: Maybe<Scalars['Int']>
}

/** An edge in a connection. */
export type ICoreGQLUserHasManyAppTokensEdge = {
	__typename?: 'UserHasManyAppTokensEdge'
	/** The item at the end of the edge */
	node?: Maybe<ICoreGQLAppToken>
	/** A cursor for use in pagination */
	cursor: Scalars['String']
}

/** A connection to a list of items. */
export type ICoreGQLUserHasManyDashboardCardsConnection = {
	__typename?: 'UserHasManyDashboardCardsConnection'
	/** Information to aid in pagination. */
	pageInfo: ICoreGQLPageInfo
	/** A list of edges. */
	edges?: Maybe<Array<Maybe<ICoreGQLUserHasManyDashboardCardsEdge>>>
	totalCount?: Maybe<Scalars['Int']>
}

/** An edge in a connection. */
export type ICoreGQLUserHasManyDashboardCardsEdge = {
	__typename?: 'UserHasManyDashboardCardsEdge'
	/** The item at the end of the edge */
	node?: Maybe<ICoreGQLDashboardCard>
	/** A cursor for use in pagination */
	cursor: Scalars['String']
}

/** A connection to a list of items. */
export type ICoreGQLUserHasManyMessagesConnection = {
	__typename?: 'UserHasManyMessagesConnection'
	/** Information to aid in pagination. */
	pageInfo: ICoreGQLPageInfo
	/** A list of edges. */
	edges?: Maybe<Array<Maybe<ICoreGQLUserHasManyMessagesEdge>>>
	totalCount?: Maybe<Scalars['Int']>
}

/** An edge in a connection. */
export type ICoreGQLUserHasManyMessagesEdge = {
	__typename?: 'UserHasManyMessagesEdge'
	/** The item at the end of the edge */
	node?: Maybe<ICoreGQLMessage>
	/** A cursor for use in pagination */
	cursor: Scalars['String']
}

/** A connection to a list of items. */
export type ICoreGQLUserHasManyMetadataConnection = {
	__typename?: 'UserHasManyMetadataConnection'
	/** Information to aid in pagination. */
	pageInfo: ICoreGQLPageInfo
	/** A list of edges. */
	edges?: Maybe<Array<Maybe<ICoreGQLUserHasManyMetadataEdge>>>
	totalCount?: Maybe<Scalars['Int']>
}

/** An edge in a connection. */
export type ICoreGQLUserHasManyMetadataEdge = {
	__typename?: 'UserHasManyMetadataEdge'
	/** The item at the end of the edge */
	node?: Maybe<ICoreGQLMetadata>
	/** A cursor for use in pagination */
	cursor: Scalars['String']
}

/** A connection to a list of items. */
export type ICoreGQLUserHasManyUserDevicesConnection = {
	__typename?: 'UserHasManyUserDevicesConnection'
	/** Information to aid in pagination. */
	pageInfo: ICoreGQLPageInfo
	/** A list of edges. */
	edges?: Maybe<Array<Maybe<ICoreGQLUserHasManyUserDevicesEdge>>>
	totalCount?: Maybe<Scalars['Int']>
}

/** An edge in a connection. */
export type ICoreGQLUserHasManyUserDevicesEdge = {
	__typename?: 'UserHasManyUserDevicesEdge'
	/** The item at the end of the edge */
	node?: Maybe<ICoreGQLUserDevice>
	/** A cursor for use in pagination */
	cursor: Scalars['String']
}

/** A connection to a list of items. */
export type ICoreGQLUserHasManyUserGroupsConnection = {
	__typename?: 'UserHasManyUserGroupsConnection'
	/** Information to aid in pagination. */
	pageInfo: ICoreGQLPageInfo
	/** A list of edges. */
	edges?: Maybe<Array<Maybe<ICoreGQLUserHasManyUserGroupsEdge>>>
	totalCount?: Maybe<Scalars['Int']>
}

/** An edge in a connection. */
export type ICoreGQLUserHasManyUserGroupsEdge = {
	__typename?: 'UserHasManyUserGroupsEdge'
	/** The item at the end of the edge */
	node?: Maybe<ICoreGQLUserGroup>
	/** A cursor for use in pagination */
	cursor: Scalars['String']
}

/** A connection to a list of items. */
export type ICoreGQLUserHasManyUserIdentitiesConnection = {
	__typename?: 'UserHasManyUserIdentitiesConnection'
	/** Information to aid in pagination. */
	pageInfo: ICoreGQLPageInfo
	/** A list of edges. */
	edges?: Maybe<Array<Maybe<ICoreGQLUserHasManyUserIdentitiesEdge>>>
	totalCount?: Maybe<Scalars['Int']>
}

/** An edge in a connection. */
export type ICoreGQLUserHasManyUserIdentitiesEdge = {
	__typename?: 'UserHasManyUserIdentitiesEdge'
	/** The item at the end of the edge */
	node?: Maybe<ICoreGQLUserIdentity>
	/** A cursor for use in pagination */
	cursor: Scalars['String']
}

/** A connection to a list of items. */
export type ICoreGQLUserHasManyUserLocationsConnection = {
	__typename?: 'UserHasManyUserLocationsConnection'
	/** Information to aid in pagination. */
	pageInfo: ICoreGQLPageInfo
	/** A list of edges. */
	edges?: Maybe<Array<Maybe<ICoreGQLUserHasManyUserLocationsEdge>>>
	totalCount?: Maybe<Scalars['Int']>
}

/** An edge in a connection. */
export type ICoreGQLUserHasManyUserLocationsEdge = {
	__typename?: 'UserHasManyUserLocationsEdge'
	/** The item at the end of the edge */
	node?: Maybe<ICoreGQLUserLocation>
	/** A cursor for use in pagination */
	cursor: Scalars['String']
}

/** A connection to a list of items. */
export type ICoreGQLUserHasManyUserOrganizationsConnection = {
	__typename?: 'UserHasManyUserOrganizationsConnection'
	/** Information to aid in pagination. */
	pageInfo: ICoreGQLPageInfo
	/** A list of edges. */
	edges?: Maybe<Array<Maybe<ICoreGQLUserHasManyUserOrganizationsEdge>>>
	totalCount?: Maybe<Scalars['Int']>
}

/** An edge in a connection. */
export type ICoreGQLUserHasManyUserOrganizationsEdge = {
	__typename?: 'UserHasManyUserOrganizationsEdge'
	/** The item at the end of the edge */
	node?: Maybe<ICoreGQLUserOrganizaiton>
	/** A cursor for use in pagination */
	cursor: Scalars['String']
}

/** A connection to a list of items. */
export type ICoreGQLUserHasManyVisitsConnection = {
	__typename?: 'UserHasManyVisitsConnection'
	/** Information to aid in pagination. */
	pageInfo: ICoreGQLPageInfo
	/** A list of edges. */
	edges?: Maybe<Array<Maybe<ICoreGQLUserHasManyVisitsEdge>>>
	totalCount?: Maybe<Scalars['Int']>
}

/** An edge in a connection. */
export type ICoreGQLUserHasManyVisitsEdge = {
	__typename?: 'UserHasManyVisitsEdge'
	/** The item at the end of the edge */
	node?: Maybe<ICoreGQLVisit>
	/** A cursor for use in pagination */
	cursor: Scalars['String']
}

/** A user identity */
export type ICoreGQLUserIdentity = {
	__typename?: 'UserIdentity'
	/** Optionally include warnings for values not authorized in this scope */
	warnings?: Maybe<ICoreGQLWarning>
	User?: Maybe<ICoreGQLUser>
}

/** A user identity */
export type ICoreGQLUserIdentityUserArgs = {
	where?: Maybe<Scalars['SequelizeJSON']>
}

/** A user location */
export type ICoreGQLUserLocation = {
	__typename?: 'UserLocation'
	id?: Maybe<Scalars['String']>
	/** This tells us what type of user this is at this location */
	role?: Maybe<Scalars['String']>
	/** A valid user email. */
	email?: Maybe<Scalars['String']>
	/** The current status of the user at the location. Either "online" or "offline" */
	status?: Maybe<Scalars['String']>
	/** Number of total visits of a user to a location */
	visits?: Maybe<Scalars['Int']>
	/** Opt out of receiving automated location reports */
	optOutOfReports?: Maybe<Scalars['Boolean']>
	/** The last time the user was at the location */
	lastRecordedVisit?: Maybe<Scalars['Date']>
	/** Whether the user is a developer at the location and can install custom skills of their own */
	isDev?: Maybe<Scalars['Boolean']>
	updatedAt?: Maybe<Scalars['Date']>
	lastAccessPoint?: Maybe<Scalars['String']>
	JobId?: Maybe<Scalars['String']>
	LocationId?: Maybe<Scalars['String']>
	UserId?: Maybe<Scalars['String']>
	/** Optionally include warnings for values not authorized in this scope */
	warnings?: Maybe<ICoreGQLWarning>
	User?: Maybe<ICoreGQLUser>
	Location?: Maybe<ICoreGQLLocation>
	Job?: Maybe<ICoreGQLJob>
	AccessPoint?: Maybe<ICoreGQLAccessPoint>
}

/** A user location */
export type ICoreGQLUserLocationUserArgs = {
	where?: Maybe<Scalars['SequelizeJSON']>
}

/** A user location */
export type ICoreGQLUserLocationLocationArgs = {
	where?: Maybe<Scalars['SequelizeJSON']>
}

/** A user location */
export type ICoreGQLUserLocationJobArgs = {
	where?: Maybe<Scalars['SequelizeJSON']>
}

/** A user location */
export type ICoreGQLUserLocationAccessPointArgs = {
	where?: Maybe<Scalars['SequelizeJSON']>
}

/** A connection to a list of items. */
export type ICoreGQLUserLocationConnection = {
	__typename?: 'UserLocationConnection'
	/** Information to aid in pagination. */
	pageInfo: ICoreGQLPageInfo
	/** A list of edges. */
	edges?: Maybe<Array<Maybe<ICoreGQLUserLocationEdge>>>
	totalCount?: Maybe<Scalars['Int']>
}

/** An edge in a connection. */
export type ICoreGQLUserLocationEdge = {
	__typename?: 'UserLocationEdge'
	/** The item at the end of the edge */
	node?: Maybe<ICoreGQLUserLocation>
	/** A cursor for use in pagination */
	cursor: Scalars['String']
}

/** A user organization */
export type ICoreGQLUserOrganizaiton = {
	__typename?: 'UserOrganizaiton'
	id?: Maybe<Scalars['String']>
	/** The role of the user at the organization level. Currently only option is "owner" */
	role?: Maybe<Scalars['String']>
	OrganizationId?: Maybe<Scalars['String']>
	UserId?: Maybe<Scalars['String']>
	/** Optionally include warnings for values not authorized in this scope */
	warnings?: Maybe<ICoreGQLWarning>
	User?: Maybe<ICoreGQLUser>
	Organization?: Maybe<ICoreGQLOrganization>
}

/** A user organization */
export type ICoreGQLUserOrganizaitonUserArgs = {
	where?: Maybe<Scalars['SequelizeJSON']>
}

/** A user organization */
export type ICoreGQLUserOrganizaitonOrganizationArgs = {
	where?: Maybe<Scalars['SequelizeJSON']>
}

/** A connection to a list of items. */
export type ICoreGQLUserOrganizationConnection = {
	__typename?: 'UserOrganizationConnection'
	/** Information to aid in pagination. */
	pageInfo: ICoreGQLPageInfo
	/** A list of edges. */
	edges?: Maybe<Array<Maybe<ICoreGQLUserOrganizationEdge>>>
	totalCount?: Maybe<Scalars['Int']>
}

/** An edge in a connection. */
export type ICoreGQLUserOrganizationEdge = {
	__typename?: 'UserOrganizationEdge'
	/** The item at the end of the edge */
	node?: Maybe<ICoreGQLUserOrganizaiton>
	/** A cursor for use in pagination */
	cursor: Scalars['String']
}

/** A connection to a list of items. */
export type ICoreGQLUserSearchConnection = {
	__typename?: 'UserSearchConnection'
	/** Information to aid in pagination. */
	pageInfo: ICoreGQLPageInfo
	/** A list of edges. */
	edges?: Maybe<Array<Maybe<ICoreGQLUserSearchEdge>>>
	totalCount?: Maybe<Scalars['Int']>
}

/** An edge in a connection. */
export type ICoreGQLUserSearchEdge = {
	__typename?: 'UserSearchEdge'
	/** The item at the end of the edge */
	node?: Maybe<ICoreGQLUser>
	/** A cursor for use in pagination */
	cursor: Scalars['String']
}

export enum ICoreGQLUserTaskOrderBy {
	Updated = 'UPDATED',
	Firstname = 'FIRSTNAME',
	Lastname = 'LASTNAME'
}

/** Array of settings to save */
export type ICoreGQLValidateSettingsInput = {
	/**
	 * The page to save settings for. Valid options are: "skill_settings_user",
	 * "skill_settings_user_org", "skill_settings_user_location"
	 * "skill_settings_org", or "skill_settings_location"
	 **/
	page: Scalars['String']
	/** The skill id for the settings */
	skillId: Scalars['ID']
	/** The settings */
	settings: Array<Maybe<ICoreGQLValidateSettingsTypeInput>>
	/** The organization id for the settings */
	organizationId?: Maybe<Scalars['ID']>
	/** The location id for the settings */
	locationId?: Maybe<Scalars['ID']>
}

/** Status will be  */
export type ICoreGQLValidateSettingsResponse = {
	__typename?: 'validateSettingsResponse'
	/** Whether the settings are valid */
	isValid?: Maybe<Scalars['Boolean']>
	/** Errors and the reason the setting could not be saved */
	errors?: Maybe<Scalars['JSON']>
}

/** A single setting */
export type ICoreGQLValidateSettingsTypeInput = {
	/** The setting name */
	name: Scalars['String']
	/** The setting value */
	val?: Maybe<Scalars['JSON']>
}

/** A user visit */
export type ICoreGQLVisit = {
	__typename?: 'Visit'
	id?: Maybe<Scalars['String']>
	/** This tells us what type of user this is at this location */
	role?: Maybe<Scalars['String']>
	createdAt?: Maybe<Scalars['Date']>
	LocationId?: Maybe<Scalars['String']>
	UserId?: Maybe<Scalars['String']>
	/** Optionally include warnings for values not authorized in this scope */
	warnings?: Maybe<ICoreGQLWarning>
	User?: Maybe<ICoreGQLUser>
	Location?: Maybe<ICoreGQLLocation>
}

/** A user visit */
export type ICoreGQLVisitUserArgs = {
	where?: Maybe<Scalars['SequelizeJSON']>
}

/** A user visit */
export type ICoreGQLVisitLocationArgs = {
	where?: Maybe<Scalars['SequelizeJSON']>
}

/** A connection to a list of items. */
export type ICoreGQLVisitConnection = {
	__typename?: 'VisitConnection'
	/** Information to aid in pagination. */
	pageInfo: ICoreGQLPageInfo
	/** A list of edges. */
	edges?: Maybe<Array<Maybe<ICoreGQLVisitEdge>>>
	totalCount?: Maybe<Scalars['Int']>
}

/** An edge in a connection. */
export type ICoreGQLVisitEdge = {
	__typename?: 'VisitEdge'
	/** The item at the end of the edge */
	node?: Maybe<ICoreGQLVisit>
	/** A cursor for use in pagination */
	cursor: Scalars['String']
}

export enum ICoreGQLVisitsOrderBy {
	CreatedAt = 'CREATED_AT'
}

/** The scope warnings for a query */
export type ICoreGQLWarning = {
	__typename?: 'Warning'
	/** The list of scope warning on a query */
	scopes?: Maybe<Array<Maybe<ICoreGQLScopeWarning>>>
}
