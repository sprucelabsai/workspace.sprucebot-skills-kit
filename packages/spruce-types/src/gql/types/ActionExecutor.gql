union Action =
	  ActionCoreRedirect
	| ActionSkillViewRedirect
	| ActionConfirm
	| ActionShowModal
	| ActionEmitEvent
	| ActionBigSearch
	| ActionQuickEditUser
	| ActionDismissComponent
	| ActionCalendarJumpTo

enum ActionTypes {
	CoreRedirect
	SkillViewRedirect
	Confirm
	ShowModal
	EmitEvent
	BigSearch
	QuickEditUser
	DismissComponent
	CalendarJumpTo
}

"payload used for core redirect"
type ActionCoreRedirectPayload {
	"the skill slug to redirect to"
	slug: String!

	"the destination route"
	route: String!

	"Params for the route, like organizationId or locationId"
	routeParams: JSON
}

"Redirect a user in the main viewport (browser or native mobile)"
type ActionCoreRedirect {
	type: ActionTypes
	payload: ActionCoreRedirectPayload!
	onComplete: Action
	onCancel: Action
}

"payload used when redirecting a skill view"
type ActionSkillViewRedirectPayload {
	"the host of your skill, usually config.HOST"
	host: String!

	"The path to the skill view including any query string"
	path: String
}

"Redirect inside of a skill view"
type ActionSkillViewRedirect {
	type: ActionTypes
	payload: ActionSkillViewRedirectPayload!
}

"Pop up a confirmation"
type ActionConfirm {
	type: ActionTypes
	payload: ConfirmModal!
}

enum ModalSize {
	small
	medium
	fullWidth
}

"Props passed to a modal you want to pop up when invoking this action"
type ActionShowModalPayload {
	"Host and protocol to destination (usually config.INTERFACE_HOST)"
	host: String!

	"Path to your skill view"
	path: String

	"Title of the dialog"
	title: String!

	"Drop a primary action button into the footer"
	footerPrimaryActionText: String

	"Drop in a secondary action into the footer, only works if primary action is also set"
	footerSecondaryActionText: String

	"Does the primary action button start off disabled?"
	isDialogFooterPrimaryActionDisabled: Boolean

	"Does the secondary action button start off disabled?"
	isDialogFooterSecondaryActionDisabled: Boolean

	"How does the dialog size itself width wise?"
	size: ModalSize

	"Does the dialog fill the screen vertically?"
	isFullHeight: Boolean
}

"Load a skill view in a modal dialog"
type ActionShowModal {
	type: ActionTypes
	payload: ActionShowModalPayload!
}

"Emit an event to your skill when this action is invoked"
type ActionEmitEventPayload {
	"Name of the event, like 'booking:update-appointment'"
	eventName: String

	"optional location id"
	locationId: String

	"optional organizationId"
	organizationId: String

	"Arbitrary payload sent with the event"
	payload: JSON
}

"Emit an event to your skill"
type ActionEmitEvent {
	type: ActionTypes
	payload: ActionEmitEventPayload!
}

"Bring up big search with the specific roles (teammate, guest, manager, groupManager, owner)"
type ActionBigSearchPayload {
	roles: [String!]
}

"Pop up big search"
type ActionBigSearch {
	type: ActionTypes
	payload: ActionBigSearchPayload!
}

"Pop up quick edit to update a user record. You have to have permission and should pass location and organization unelss you are editing yourself"
type ActionQuickEditUserPayload {
	"The id of the user"
	userId: String!

	"optional location id"
	locationId: String

	"optional organizationId"
	organizationId: String
}

"Pop up dialog to edit the user"
type ActionQuickEditUser {
	type: ActionTypes
	payload: ActionQuickEditUserPayload!
}

"Dismiss a component by it's ID"
type ActionDismissComponentPayload {
	"Ids of the components you want to hide"
	componentIds: [String!]!
}

"Dismiss/hide components on the page whose ID's match."
type ActionDismissComponent {
	type: ActionTypes
	payload: ActionDismissComponentPayload!
}

"control the calendar if you are on a page with a calendar"
type ActionCalendarJumpToPayload {
	"Which day and time to focus"
	dateTime: Date!

	"Make sure the right calendar is selected"
	calendarId: String!

	"Show the selected user"
	userId: String
}

"Jump to a place on the calendar"
type ActionCalendarJumpTo {
	type: ActionTypes
	payload: ActionCalendarJumpToPayload!
}

interface ActionExecutor {
	action: Action
	id: ID!
}
