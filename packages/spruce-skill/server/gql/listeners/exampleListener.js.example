// @flow

// Remove the ".example" extension from this file to see an example of making a subscription to the Core API GQL subscription server.
// You could follow the same pattern for a subscription to some other GQL subscription server

const config = require('config')
const gql = require('graphql-tag')

module.exports = ctx => {
	// The subscription query
	const subscription = gql`
		subscription ExampleStream {
			ExampleStream {
				message
				sentAt
			}
		}
	`

	// Create the subscription and listen
	ctx.gqlSubscriptions.subscribe({
		uri: config.API_GRAPHQL_SUBSCRIPTIONS_URI,
		subscription,
		onEvent: response => {
			if (response.errors) {
				log.debug(
					`Received ExampleStream event with error from: ${
						config.API_GRAPHQL_SUBSCRIPTIONS_URI
					}`
				)
				log.warn(response.errors)
			} else if (response.data && response.data.ExampleStream) {
				try {
					log.debug(
						`Received ExampleStream event from: ${
							config.API_GRAPHQL_SUBSCRIPTIONS_URI
						}`,
						response.data.ExampleStream
					)

					ctx.gqlServer.pubsub.publish(
						`EXAMPLE_STREAM`,
						response.data.ExampleStream
					)
				} catch (e) {
					log.warn(e)
				}
			}
		},
		onError: err => {
			log.warn(err)
		},
		onConnected: () => {
			log.debug('GQL Subscription exampleListener: onConnected')
		},
		onDisconnected: () => {
			log.debug('GQL Subscription exampleListener: onDisconnected')
		},
		onReconnected: () => {
			log.debug('GQL Subscription exampleListener: onReconnected')
		}
	})
}
