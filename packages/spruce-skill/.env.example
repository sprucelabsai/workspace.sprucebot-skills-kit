
### First Time Setup / Configuration ###
# See: https://github.com/sprucelabsai/sprucebot-cli

########################################################################
# BASIC SKILL CONFIGURATION
#
# Set up important details about your skill
########################################################################
# The environment the skill is running in. When ENV=local, the skill will run from the server/ directory. If set to anything else, the skill will run from the build/ directory
ENV=local
# Sets up next.js to build on demand and use hot-reloading. For production this should be set to false
DEV_MODE=true

# What version of the event system are you using?
EVENT_VERSION=2
VIEW_VERSION=2

### Skill Details
ID=
NAME=Brand New Skill
SLUG=brand-new-skill
DESCRIPTION="It's gonna be big!"
# The id of the video to show on the marketing page for your skill
VIMEO_ID=

### API Details
API_HOST=https://api.spruce.ai
API_KEY=
# Allow self-signed certificates. Only used during local development.
API_SSL_ALLOW_SELF_SIGNED=true

### Hosting Details.
# Note: you'll need to run the skill over SSL to run it within the Spruce platform
PORT=3080
SERVER_HOST=http://localhost:3080
GRAPHQL_SUBSCRIPTIONS_URI=ws://localhost:3080/graphql
INTERFACE_HOST=http://localhost:3080
# Allow self-signed certificates. Only used during local development.
INTERFACE_SSL_ALLOW_SELF_SIGNED=true

### Database Options
# If enabled, you can create and use sequelize models and access some core model data. See server/models/
DB_ENABLED=false
# When true (and DB_ENABLED is true), sequelize migrations will run when the skill starts
DB_MIGRATIONS=true

# Point to a custom heartwood stylesheet. Ususally you'll want to use the default. This only needs to be set in rare cases.
# SKILL_STYLESHEET=

### GraphQL
# Enable graphql. See server/gql/resolvers and server/gql/types
GRAPHQL_ENABLED=false
# Enable GraphiQL. This should be off for production
GRAPHIQL_ENABLED=false
# Enable listeners to subscribe to an external GQL server. See server/gql/listeners/exampleListener.js
GRAPHQL_LISTENERS_ENABLED=false

# Limit on the max depth of GQL queries. https://github.com/stems/graphql-depth-limit
# GRAPHQL_MAX_DEPTH=10
# Controls limit on GQL query complexity limit. Can be adjusted to prevent malicious or expensive queries: https://github.com/slicknode/graphql-query-complexity
# GRAPHQL_MAX_COMPLEXITY=1500

### Cronjobs
# Enable cronjobs. See server/controllers/cron.js
# RUN_CRONS=true


########################################################################
# LOGGING
#
# Customization for logging options. For full customization of how logs
# are formatted and where they're sent see config/logging.js
########################################################################
# If true, all raw sql queries will be logged to the console. This can be useful for debugging issues, but could leak sensitive information to your logs.
# This should be false in production
# ORM_LOGGING=false

# The log level, valid levels in order are:
# trace, debug, info, warn, crit, fatal, superInfo
# The default log level is "warn"
LOG_LEVEL=debug

# If true, will send logs from the browser to the backend and log them. This is useful to actually know about and set up alerts about errors occurring in the frontend of your skill.
# CAPTURE_FE_LOGS=false

# Whether to log using colors in the console. default: true
# LOG_USE_COLORS=true

# Whether to attempt to log the filename and line number where the log originated. This is useful in local development environments.  default: false
# This should always be false in production as it has performance implications
# LOG_USE_TRACE=false

# If LOG_USE_TRACE=true and we should attempt to find the original file/line number via a .map file. This is useful in local development environments. default: false
# This should always be false in production as it has performance implications
# LOG_USE_SOURCEMAPS=false

# If true, will output logs as JSON. default: false
# LOG_AS_JSON=false

# Turns on the ability to send metrics: log.metric(...)
# METRICS_ENABLED=true
# A unique app key to use for metrics. This should NEVER be exposed publicly.
# METRICS_APP_KEY=1234
# Disables collecting metrics on requests
# METRICS_REQUESTS_DISABLED=false
# Disables collecting metrics on server stats
# METRICS_SERVER_STATS_DISABLED=false
# Disables collecting sequelize stats
# METRICS_SEQUELIZE_DISABLED=false



########################################################################
# DEVELOPER OPTIONS
#
# Control useful features for developers
########################################################################
# Turns on/off swagger documentation
# If enabled, visit the docs at http://localhost:3006/docs/ (or whatever url you're using)
ENABLE_SWAGGER_DOCS=true
SWAGGER_TITLE='My Skill API'
SWAGGER_VERSION=1.0.0

# Turns on debug routes. See server/controllers/1.0/owner/debug.js
# ENABLE_DEBUG_ROUTES=true

# Run only the API (server side) part of the skill without any frontend. If you load a frontend route with this enabled you'll get a generic "OK" message in the browser
API_ONLY=false